<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceStack.OrmLite</name>
    </assembly>
    <members>
        <member name="T:ServiceStack.OrmLite.Dapper.CommandDefinition">
            <summary>
            Represents the key aspects of a sql operation
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.CommandText">
            <summary>
            The command (sql or a stored-procedure name) to execute
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.Parameters">
            <summary>
            The parameters associated with the command
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.Transaction">
            <summary>
            The active transaction for the command
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.CommandTimeout">
            <summary>
            The effective timeout for the command
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.CommandType">
            <summary>
            The type of command that the command-text represents
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.AddToCache">
            <summary>
            Should the plan for this query be cached?
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.Flags">
            <summary>
            Additional state flags against this command
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.CommandDefinition.#ctor(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},ServiceStack.OrmLite.Dapper.CommandFlags,System.Threading.CancellationToken)">
            <summary>
            Initialize the command definition
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.CommandDefinition.CancellationToken">
            <summary>
            For asynchronous operations, the cancellation-token
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.CommandFlags">
            <summary>
            Additional state flags that control command behaviour
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.CommandFlags.None">
            <summary>
            No additional flags
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.CommandFlags.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.CommandFlags.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.CommandFlags.NoCache">
            <summary>
            Should the plan cache be bypassed?
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.CustomPropertyTypeMap">
            <summary>
            Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.CustomPropertyTypeMap.#ctor(System.Type,System.Func{System.Type,System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates custom property mapping
            </summary>
            <param name="type">Target entity type</param>
            <param name="propertySelector">Property selector based on target type and DataReader column name</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.CustomPropertyTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Always returns default constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Default constructor</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.CustomPropertyTypeMap.FindExplicitConstructor">
            <summary>
            Always returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.CustomPropertyTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Not implemented as far as default constructor used for all cases
            </summary>
            <param name="constructor"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.CustomPropertyTypeMap.GetMember(System.String)">
            <summary>
            Returns property based on selector strategy
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Poperty member map</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.DbString">
            <summary>
            This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DbString.IsAnsiDefault">
            <summary>
            Default value for IsAnsi.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.DbString.DefaultLength">
            <summary>
            A value to set the default value of strings
            going through Dapper. Default is 4000, any value larger than this
            field will not have the default value applied.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DbString.#ctor">
            <summary>
            Create a new DbString
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DbString.IsAnsi">
            <summary>
            Ansi vs Unicode 
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DbString.IsFixedLength">
            <summary>
            Fixed length 
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DbString.Length">
            <summary>
            Length of the string -1 for max
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DbString.Value">
            <summary>
            The value of the string
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DbString.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter to the command... internal use only
            </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.DefaultTypeMap">
            <summary>
            Represents default type mapping strategy used by Dapper
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DefaultTypeMap.#ctor(System.Type)">
            <summary>
            Creates default type map
            </summary>
            <param name="type">Entity type</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DefaultTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DefaultTypeMap.FindExplicitConstructor">
            <summary>
            Returns the constructor, if any, that has the ExplicitConstructorAttribute on it.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DefaultTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DefaultTypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DefaultTypeMap.MatchNamesWithUnderscores">
            <summary>
            Should column names like User_Id be allowed to match properties/fields like UserId ?
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DefaultTypeMap.Properties">
            <summary>
            The settable properties for this typemap
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.DynamicParameters">
            <summary>
            A bag of parameters that can be passed to the Dapper Query and Execute methods
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.#ctor">
            <summary>
            construct a dynamic parameter bag
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.#ctor(System.Object)">
            <summary>
            construct a dynamic parameter bag
            </summary>
            <param name="template">can be an anonymous type or a DynamicParameters bag</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.AddDynamicParams(System.Object)">
            <summary>
            Append a whole object full of params to the dynamic
            EG: AddDynamicParams(new {A = 1, B = 2}) // will add property A and B to the dynamic
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DynamicParameters.RemoveUnused">
            <summary>
            If true, the command-text is inspected and only values that are clearly used are included on the connection
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.AddParameters(System.Data.IDbCommand,ServiceStack.OrmLite.Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.DynamicParameters.ParameterNames">
            <summary>
            All the names of the param in the bag, use Get to yank them out
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.Get``1(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>The value, note DBNull.Value is not returned, instead the value is returned as null</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.DynamicParameters.Output``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            Allows you to automatically populate a target property/field from output parameters. It actually
            creates an InputOutput parameter, so you can still pass data in.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The object whose property/field you wish to populate.</param>
            <param name="expression">A MemberExpression targeting a property/field of the target (or descendant thereof.)</param>
            <param name="dbType"></param>
            <param name="size">The size to set on the parameter. Defaults to 0, or DbString.DefaultLength in case of strings.</param>
            <returns>The DynamicParameters instance</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.ExplicitConstructorAttribute">
            <summary>
            Tell Dapper to use an explicit constructor, passing nulls or 0s for all parameters
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.FeatureSupport">
            <summary>
            Handles variances in features per DBMS
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.FeatureSupport.Get(System.Data.IDbConnection)">
            <summary>
            Gets the feature set based on the passed connection
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.FeatureSupport.Arrays">
            <summary>
            True if the db supports array columns e.g. Postgresql
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SimpleMemberMap">
            <summary>
            Represents simple member map for one of target parameter or property or field to source DataReader column
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Creates instance for simple property mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="property">Target property</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Creates instance for simple field mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="field">Target property</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.ParameterInfo)">
            <summary>
            Creates instance for simple constructor parameter mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="parameter">Target constructor parameter</param>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SimpleMemberMap.ColumnName">
            <summary>
            DataReader column name
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SimpleMemberMap.MemberType">
            <summary>
            Target member type
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SimpleMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SimpleMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SimpleMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlDataRecordListTVPParameter">
            <summary>
            Used to pass a IEnumerable&lt;SqlDataRecord&gt; as a SqlDataRecordListTVPParameter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlDataRecordListTVPParameter.#ctor(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Server.SqlDataRecord},System.String)">
            <summary>
            Create a new instance of SqlDataRecordListTVPParameter
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper">
            <summary>
            Dapper, a light weight object mapper for ADO.NET
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a query asynchronously using .NET 4.5 Task.
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute a query asynchronously using .NET 4.5 Task.
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstAsync(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstOrDefaultAsync(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleAsync(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleOrDefaultAsync(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstOrDefaultAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleOrDefaultAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstAsync(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstOrDefaultAsync(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleAsync(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleOrDefaultAsync(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute a query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync(System.Data.IDbConnection,System.Type,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute a query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstAsync(System.Data.IDbConnection,System.Type,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstOrDefaultAsync(System.Data.IDbConnection,System.Type,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleAsync(System.Data.IDbConnection,System.Type,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleOrDefaultAsync(System.Data.IDbConnection,System.Type,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteAsync(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute a command asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the recordset</typeparam>
            <typeparam name="TSecond">The second type in the recordset</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync``3(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition,System.Func{``0,``1,``2},System.String)">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the recordset</typeparam>
            <typeparam name="TSecond">The second type in the recordset</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="splitOn">The field we should split and read the second object from (default: id)</param>
            <param name="command">The command to execute</param>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync``4(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition,System.Func{``0,``1,``2,``3},System.String)">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="splitOn">The field we should split and read the second object from (default: id)</param>
            <param name="command">The command to execute</param>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync``5(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition,System.Func{``0,``1,``2,``3,``4},System.String)">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="splitOn">The field we should split and read the second object from (default: id)</param>
            <param name="command">The command to execute</param>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync``6(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition,System.Func{``0,``1,``2,``3,``4,``5},System.String)">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync``7(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync``7(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition,System.Func{``0,``1,``2,``3,``4,``5,``6},System.String)">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync``8(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync``8(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String)">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryAsync``1(System.Data.IDbConnection,System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with arbitrary input parameters
            </summary>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="types">array of types in the recordset</param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryMultipleAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryMultipleAsync(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteReaderAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteReaderAsync(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteScalarAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteScalarAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteScalarAsync(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteScalarAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="E:ServiceStack.OrmLite.Dapper.SqlMapper.QueryCachePurged">
            <summary>
            Called if the query cache is purged via PurgeQueryCache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.PurgeQueryCache">
            <summary>
            Purge the query cache
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetCachedSQLCount">
            <summary>
            Return a count of all the cached queries by dapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetCachedSQL(System.Int32)">
            <summary>
            Return a list of all the queries cached by dapper
            </summary>
            <param name="ignoreHitCountAbove"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetHashCollissions">
            <summary>
            Deep diagnostics only: find any hash collisions in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ResetTypeHandlers">
            <summary>
            Clear the registered type handlers
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.AddTypeMap(System.Type,System.Data.DbType)">
            <summary>
            Configure the specified type to be mapped to a given db-type
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.AddTypeHandler(System.Type,ServiceStack.OrmLite.Dapper.SqlMapper.ITypeHandler)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.AddTypeHandlerImpl(System.Type,ServiceStack.OrmLite.Dapper.SqlMapper.ITypeHandler,System.Boolean)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.AddTypeHandler``1(ServiceStack.OrmLite.Dapper.SqlMapper.TypeHandler{``0})">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetDbType(System.Object)">
            <summary>
            Get the DbType that maps to a given value
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.LookupDbType(System.Type,System.String,System.Boolean,ServiceStack.OrmLite.Dapper.SqlMapper.ITypeHandler@)">
            <summary>
            OBSOLETE: For internal usage only. Lookup the DbType and handler for a given Type and member
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Obtains the data as a list; if it is *already* a list, the original object is returned without
            any duplication; otherwise, ToList() is invoked.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Execute(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a sequence of dynamic objects with properties matching the columns
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirst(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstOrDefault(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingle(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleOrDefault(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirst``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstOrDefault``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingle``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleOrDefault``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirst(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstOrDefault(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingle(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleOrDefault(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``1(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirst``1(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single instance or null of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryFirstOrDefault``1(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single or null instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingle``1(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QuerySingleOrDefault``1(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,ServiceStack.OrmLite.Dapper.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the record set</typeparam>
            <typeparam name="TSecond">The second type in the record set</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``7(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``8(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TSeventh"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with arbitrary input parameters
            </summary>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="types">array of types in the record set</param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ReadChar(System.Object)">
            <summary>
            Internal use only
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.FindOrAddParameter(System.Data.IDataParameterCollection,System.Data.IDbCommand,System.String)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.PackListParameters(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.SanitizeParameterValue(System.Object)">
            <summary>
            OBSOLETE: For internal usage only. Sanitizes the paramter value with proper type casting.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ReplaceLiterals(ServiceStack.OrmLite.Dapper.SqlMapper.IParameterLookup,System.Data.IDbCommand)">
            <summary>
            Replace all literal tokens with their text form
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Format(System.Object)">
            <summary>
            Convert numeric values to their string form for SQL literal purposes
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.CreateParamInfoGenerator(ServiceStack.OrmLite.Dapper.SqlMapper.Identity,System.Boolean,System.Boolean)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.TypeMapProvider">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map instance, default is to create new instance of DefaultTypeMap</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetTypeMap(System.Type)">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map implementation, DefaultTypeMap instance if no override present</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.SetTypeMap(System.Type,ServiceStack.OrmLite.Dapper.SqlMapper.ITypeMap)">
            <summary>
            Set custom mapping for type deserializers
            </summary>
            <param name="type">Entity type to override</param>
            <param name="map">Mapping rules impementation, null to remove custom map</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetTypeDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="startBound"></param>
            <param name="length"></param>
            <param name="returnNullIfFirstMissing"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader,System.Object)">
            <summary>
            Throws a data exception, only used internally
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.ConnectionStringComparer">
            <summary>
            How should connection strings be compared for equivalence? Defaults to StringComparer.Ordinal.
            Providing a custom implementation can be useful for allowing multi-tenancy databases with identical
            schema to share strategies. Note that usual equivalence rules apply: any equivalent connection strings
            <b>MUST</b> yield the same hash-code.
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.DataTableTypeNameKey">
            <summary>
            Key used to indicate the type name associated with a DataTable
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.AsTableValuedParameter(System.Data.DataTable,System.String)">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.SetTypeName(System.Data.DataTable,System.String)">
            <summary>
            Associate a DataTable with a type name
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetTypeName(System.Data.DataTable)">
            <summary>
            Fetch the type name associated with a DataTable
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.AsTableValuedParameter(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Server.SqlDataRecord},System.String)">
            <summary>
            Used to pass a IEnumerable&lt;SqlDataRecord&gt; as a TableValuedParameter
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.DontMap">
            <summary>
            Dummy type for excluding from multi-map
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader">
            <summary>
            The grid reader provides interfaces for reading multiple result sets from a Dapper query
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadAsync(System.Boolean)">
            <summary>
            Read the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirstAsync">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirstOrDefaultAsync">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingleAsync">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingleOrDefaultAsync">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadAsync(System.Type,System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirstAsync(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirstOrDefaultAsync(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingleAsync(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingleOrDefaultAsync(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadAsync``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirstAsync``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirstOrDefaultAsync``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingleAsync``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingleOrDefaultAsync``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read(System.Boolean)">
            <summary>
            Read the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirst">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirstOrDefault">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingle">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingleOrDefault">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirst``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirstOrDefault``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingle``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingleOrDefault``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read(System.Type,System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirst(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadFirstOrDefault(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingle(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.ReadSingleOrDefault(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``3(System.Func{``0,``1,``2},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``4(System.Func{``0,``1,``2,``3},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Read``1(System.Type[],System.Func{System.Object[],``0},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.IsConsumed">
            <summary>
            Has the underlying reader been consumed?
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Command">
            <summary>
            The command associated with the reader
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader and command.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.ICustomQueryParameter">
            <summary>
            Implement this interface to pass an arbitrary db specific parameter to Dapper
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ICustomQueryParameter.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter needed to the command before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="name">Parameter name</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Parse``1(System.Data.IDataReader)">
            <summary>
            Parses a data reader to a sequence of data of the supplied type. Used for deserializing a reader without a connection, etc.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Parse(System.Data.IDataReader,System.Type)">
            <summary>
            Parses a data reader to a sequence of data of the supplied type (as object). Used for deserializing a reader without a connection, etc.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Parse(System.Data.IDataReader)">
            <summary>
            Parses a data reader to a sequence of dynamic. Used for deserializing a reader without a connection, etc.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetRowParser(System.Data.IDataReader,System.Type,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the row parser for a specific row on a data reader. This allows for type switching every row based on, for example, a TypeId column.
            You could return a collection of the base type but have each more specific.
            </summary>
            <param name="reader">The data reader to get the parser for the current row from</param>
            <param name="type">The type to get the parser for</param>
            <param name="startIndex">The start column index of the object (default 0)</param>
            <param name="length">The length of columns to read (default -1 = all fields following startIndex)</param>
            <param name="returnNullIfFirstMissing">Return null if we can't find the first column? (default false)</param>
            <returns>A parser for this specific object from this row.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.GetRowParser``1(System.Data.IDataReader,System.Type,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the row parser for a specific row on a data reader. This allows for type switching every row based on, for example, a TypeId column.
            You could return a collection of the base type but have each more specific.
            </summary>
            <param name="reader">The data reader to get the parser for the current row from</param>
            <param name="concreteType">The type to get the parser for</param>
            <param name="startIndex">The start column index of the object (default 0)</param>
            <param name="length">The length of columns to read (default -1 = all fields following startIndex)</param>
            <param name="returnNullIfFirstMissing">Return null if we can't find the first column? (default false)</param>
            <returns>A parser for this specific object from this row.</returns>
            <example>
            var result = new List&lt;BaseType&gt;();
            using (var reader = connection.ExecuteReader(@"
              select 'abc' as Name, 1 as Type, 3.0 as Value
              union all
              select 'def' as Name, 2 as Type, 4.0 as Value"))
            {
                if (reader.Read())
                {
                    var toFoo = reader.GetRowParser&lt;BaseType&gt;(typeof(Foo));
                    var toBar = reader.GetRowParser&lt;BaseType&gt;(typeof(Bar));
                    var col = reader.GetOrdinal("Type");
                    do
                    {
                        switch (reader.GetInt32(col))
                        {
                            case 1:
                                result.Add(toFoo(reader));
                                break;
                            case 2:
                                result.Add(toBar(reader));
                                break;
                        }
                    } while (reader.Read());
                }
            }
             
            abstract class BaseType
            {
                public abstract int Type { get; }
            }
            class Foo : BaseType
            {
                public string Name { get; set; }
                public override int Type =&gt; 1;
            }
            class Bar : BaseType
            {
                public float Value { get; set; }
                public override int Type =&gt; 2;
            }
            </example>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.Identity">
            <summary>
            Identity of a cached query in Dapper, used for extensibility
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.ForDynamicParameters(System.Type)">
            <summary>
            Create an identity for use with DynamicParameters, internal use only
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.Equals(System.Object)">
             <summary>
            
             </summary>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.sql">
            <summary>
            The sql
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.commandType">
            <summary>
            The command type
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.hashCode">
             <summary>
            
             </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.gridIndex">
             <summary>
            
             </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.type">
             <summary>
            
             </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.connectionString">
             <summary>
            
             </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.parametersType">
             <summary>
            
             </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.GetHashCode">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Identity.Equals(ServiceStack.OrmLite.Dapper.SqlMapper.Identity)">
            <summary>
            Compare 2 Identity objects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.IDynamicParameters">
            <summary>
            Implement this interface to pass an arbitrary db specific set of parameters to Dapper
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.IDynamicParameters.AddParameters(System.Data.IDbCommand,ServiceStack.OrmLite.Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.IMemberMap">
            <summary>
            Implements this interface to provide custom member mapping
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.IMemberMap.ColumnName">
            <summary>
            Source DataReader column name
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.IMemberMap.MemberType">
            <summary>
             Target member type
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.IMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.IMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.IMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.IParameterCallbacks">
            <summary>
            Extends IDynamicParameters with facilities for executing callbacks after commands have completed
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.IParameterCallbacks.OnCompleted">
            <summary>
            Invoked when the command has executed
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.IParameterLookup">
            <summary>
            Extends IDynamicParameters providing by-name lookup of parameter values
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.IParameterLookup.Item(System.String)">
            <summary>
            Get the value of the specified parameter (return null if not found)
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeHandler">
            <summary>
            Implement this interface to perform custom type-based parameter handling and value parsing
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeHandler.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeHandler.Parse(System.Type,System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <param name="destinationType">The type to parse to</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeMap">
            <summary>
            Implement this interface to change default mapping of reader columns to type members
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeMap.FindExplicitConstructor">
            <summary>
            Returns a constructor which should *always* be used.
            
            Parameters will be default values, nulls for reference types and zero'd for value types.
            
            Use this class to force object creation away from parameterless constructors you don't control.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.ITypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.LiteralToken">
            <summary>
            Represents a placeholder for a value that should be replaced as a literal value in the resulting sql
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.LiteralToken.Token">
            <summary>
            The text in the original command that should be replaced
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.LiteralToken.Member">
            <summary>
            The name of the member referred to by the token
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.Settings">
            <summary>
            Permits specifying certain SqlMapper values globally.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.Settings.SetDefaults">
            <summary>
            Resets all Settings to their default values
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.Settings.CommandTimeout">
            <summary>
            Specifies the default Command Timeout for all Queries
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.Settings.ApplyNullValues">
            <summary>
            Indicates whether nulls in data are silently ignored (default) vs actively applied and assigned to members
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.Settings.PadListExpansions">
            <summary>
            Should list expansions be padded with null-valued parameters, to prevent query-plan saturation? For example,
            an 'in @foo' expansion with 7, 8 or 9 values will be sent as a list of 10 values, with 3, 2 or 1 of them null.
            The padding size is relative to the size of the list; "next 10" under 150, "next 50" under 500,
            "next 100" under 1500, etc.
            </summary>
            <remarks>
            Caution: this should be treated with care if your DB provider (or the specific configuration) allows for null
            equality (aka "ansi nulls off"), as this may change the intent of your query; as such, this is disabled by 
            default and must be enabled.
            </remarks>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.SqlMapper.Settings.InListStringSplitCount">
            <summary>
            If set (non-negative), when performing in-list expansions of integer types ("where id in @ids", etc), switch to a string_split based
            operation if there are more than this many elements. Note that this feautre requires SQL Server 2016 / compatibility level 130 (or above).
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.TypeHandler`1">
            <summary>
            Base-class for simple type-handlers
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.TypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.TypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.StringTypeHandler`1">
            <summary>
            Base-class for simple type-handlers that are based around strings
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.StringTypeHandler`1.Parse(System.String)">
            <summary>
            Parse a string into the expected type (the string will never be null)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.StringTypeHandler`1.Format(`0)">
            <summary>
            Format an instace into a string (the instance will never be null)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.StringTypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.StringTypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.TypeHandlerCache`1">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.TypeHandlerCache`1.Parse(System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.TypeHandlerCache`1.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.SqlMapper.UdtTypeHandler">
            <summary>
            A type handler for data-types that are supported by the underlying provider, but which need
            a well-known UdtTypeName to be specified
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.SqlMapper.UdtTypeHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of UdtTypeHandler with the specified UdtTypeName
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.TableValuedParameter">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.TableValuedParameter.#ctor(System.Data.DataTable)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Dapper.TableValuedParameter.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.Dapper.IWrappedDataReader">
            <summary>
            Describes a reader that controls the lifetime of both a command and a reader,
            exposing the downstream command/reader as properties.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.IWrappedDataReader.Reader">
            <summary>
            Obtain the underlying reader
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.Dapper.IWrappedDataReader.Command">
            <summary>
            Obtain the underlying command
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConverter.DialectProvider">
            <summary>
            RDBMS Dialect this Converter is for. Injected at registration.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConverter.ColumnDefinition">
            <summary>
            SQL Column Definiton used in CREATE Table. 
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConverter.DbType">
            <summary>
            Used in DB Params. Defaults to DbType.String
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverter.ToQuotedString(System.Type,System.Object)">
            <summary>
            Quoted Value in SQL Statement
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverter.InitDbParam(System.Data.IDbDataParameter,System.Type)">
            <summary>
            Customize how DB Param is initialized. Useful for supporting RDBMS-specific Types.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverter.ToDbValue(System.Type,System.Object)">
            <summary>
            Parameterized value in parameterized queries
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverter.FromDbValue(System.Type,System.Object)">
            <summary>
            Value from DB to Populate on POCO Data Model with
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConverter.GetValue(System.Data.IDataReader,System.Int32,System.Object[])">
            <summary>
            Retrieve Value from ADO.NET IDataReader. Defaults to reader.GetValue()
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.NativeValueOrmLiteConverter">
            <summary>
            For Types that are natively supported by RDBMS's and shouldn't be quoted
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiAsyncLegacy.SelectFmtAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
            Returns results from using an SqlFormat query. E.g:
            <para>db.SelectFmt&lt;Person&gt;("Age &gt; {0}", 40)</para>
            <para>db.SelectFmt&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; {0}", 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiAsyncLegacy.SelectFmtAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,System.Type,System.String,System.Object[])">
            <summary>
            Returns a partial subset of results from the specified tableType using a SqlFormat query. E.g:
            <para>db.SelectFmt&lt;EntityWithId&gt;(typeof(Person), "Age &gt; {0}", 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiAsyncLegacy.ScalarFmtAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
            Returns a single scalar value using an SqlFormat query. E.g:
            <para>db.ScalarFmt&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; {0}", 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiAsyncLegacy.ColumnFmtAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.ColumnFmt&lt;string&gt;("SELECT LastName FROM Person WHERE Age = {0}", 27)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiAsyncLegacy.ColumnDistinctFmtAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
            <para>db.ColumnDistinctFmt&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; {0}", 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiAsyncLegacy.LookupFmtAsync``2(System.Data.IDbConnection,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
            Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an SqlFormat query. E.g:
            <para>db.LookupFmt&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; {0}", 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiAsyncLegacy.DictionaryFmtAsync``2(System.Data.IDbConnection,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
            Returns a Dictionary from the first 2 columns: Column 1 (Keys), Column 2 (Values) using an SqlFormat query. E.g:
            <para>db.DictionaryFmt&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; {0}", 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiAsyncLegacy.ExistsFmtAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
            Returns true if the Query returns any records, using an SqlFormat query. E.g:
            <para>db.ExistsFmt&lt;Person&gt;("Age = {0}", 42)</para>
            <para>db.ExistsFmt&lt;Person&gt;("SELECT * FROM Person WHERE Age = {0}", 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiAsyncLegacy.ExistsAsync``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}},System.Threading.CancellationToken)">
            <summary>
            Returns true if the Query returns any records that match the SqlExpression lambda, E.g:
            <para>db.Exists&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiAsyncLegacy.SqlProcedureFmtAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,System.Object,System.String,System.Object[])">
            <summary>
            Returns results from a Stored Procedure using an SqlFormat query. E.g:
            <para></para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.SelectFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns results from using an SqlFormat query. E.g:
            <para>db.SelectFmt&lt;Person&gt;("Age &gt; {0}", 40)</para>
            <para>db.SelectFmt&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; {0}", 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.SelectFmt``1(System.Data.IDbConnection,System.Type,System.String,System.Object[])">
            <summary>
            Returns a partial subset of results from the specified tableType using a SqlFormat query. E.g:
            <para>db.SelectFmt&lt;EntityWithId&gt;(typeof(Person), "Age &gt; {0}", 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.SelectLazyFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns a lazyily loaded stream of results using an SqlFilter query. E.g:
            <para>db.SelectLazyFmt&lt;Person&gt;("Age &gt; {0}", 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.SingleFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns the first result using a SqlFormat query. E.g:
            <para>db.SingleFmt&lt;Person&gt;("Age = {0}", 42)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.ScalarFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns a single scalar value using an SqlFormat query. E.g:
            <para>db.ScalarFmt&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; {0}", 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.ColumnFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.ColumnFmt&lt;string&gt;("SELECT LastName FROM Person WHERE Age = {0}", 27)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.ColumnDistinctFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
            <para>db.ColumnDistinctFmt&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; {0}", 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.LookupFmt``2(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an SqlFormat query. E.g:
            <para>db.LookupFmt&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; {0}", 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.DictionaryFmt``2(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns a Dictionary from the first 2 columns: Column 1 (Keys), Column 2 (Values) using an SqlFormat query. E.g:
            <para>db.DictionaryFmt&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; {0}", 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.ExistsFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Returns true if the Query returns any records, using an SqlFormat query. E.g:
            <para>db.ExistsFmt&lt;Person&gt;("Age = {0}", 42)</para>
            <para>db.ExistsFmt&lt;Person&gt;("SELECT * FROM Person WHERE Age = {0}", 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadApiLegacy.Exists``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Returns true if the Query returns any records that match the SqlExpression lambda, E.g:
            <para>db.Exists&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiAsyncLegacy.SelectAsync``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}},System.Threading.CancellationToken)">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Select&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiAsyncLegacy.SelectAsync``2(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``1},ServiceStack.OrmLite.SqlExpression{``1}},System.Threading.CancellationToken)">
            <summary>
            Project results from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiAsyncLegacy.SingleAsync``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}},System.Threading.CancellationToken)">
            <summary>
            Returns a single result from using an SqlExpression lambda. E.g:
            <para>db.Single&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age == 42))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiAsyncLegacy.SingleFmtAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
            Returns the first result using a SqlFormat query. E.g:
            <para>db.SingleFmt&lt;Person&gt;("Age = {0}", 42)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiAsyncLegacy.CountAsync``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}},System.Threading.CancellationToken)">
            <summary>
            Returns the count of rows that match the SqlExpression lambda, E.g:
            <para>db.Count&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiAsyncLegacy.LoadSelectAsync``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}},System.String[],System.Threading.CancellationToken)">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelectAsync&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.SqlExpression``1(System.Data.IDbConnection)">
            <summary>
            Create a new SqlExpression builder allowing typed LINQ-like queries.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.Select``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Select&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.Select``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1})">
            <summary>
            Project results from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.Select``2(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``1},ServiceStack.OrmLite.SqlExpression{``1}})">
            <summary>
            Project results from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.Single``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Returns a single result from using an SqlExpression lambda. E.g:
            <para>db.Single&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age == 42))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.Count``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Returns the count of rows that match the SqlExpression lambda, E.g:
            <para>db.Count&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.LoadSelect``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelect&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteReadExpressionsApiLegacy.LoadSelect``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}},System.Func{``0,System.Object})">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelect&lt;Person&gt;(q =&gt; q.Where(x =&gt; x.Age &gt; 40), include: x => new { x.PrimaryAddress })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteApiAsyncLegacy.DeleteFmtAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
            Delete rows using a SqlFormat filter. E.g:
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteApiAsyncLegacy.DeleteFmtAsync(System.Data.IDbConnection,System.Threading.CancellationToken,System.Type,System.String,System.Object[])">
            <summary>
            Delete rows from the runtime table type using a SqlFormat filter. E.g:
            </summary>
            <para>db.DeleteFmt(typeof(Person), "Age = {0}", 27)</para>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteCommandExtensionsLegacy.DeleteFmt``1(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Delete rows using a SqlFormat filter. E.g:
            <para>db.Delete&lt;Person&gt;("Age > {0}", 42)</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteCommandExtensionsLegacy.DeleteFmt(System.Data.IDbConnection,System.Type,System.String,System.Object[])">
            <summary>
            Delete rows from the runtime table type using a SqlFormat filter. E.g:
            </summary>
            <para>db.DeleteFmt(typeof(Person), "Age = {0}", 27)</para>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiAsyncLegacy.InsertOnlyAsync``1(System.Data.IDbConnection,``0,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}},System.Threading.CancellationToken)">
            <summary>
            Insert only fields in POCO specified by the SqlExpression lambda. E.g:
            <para>db.InsertOnly(new Person { FirstName = "Amy", Age = 27 }, q =&gt; q.Insert(p =&gt; new { p.FirstName, p.Age }))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiAsyncLegacy.InsertOnlyAsync``1(System.Data.IDbConnection,``0,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            
              db.InsertOnly(new Person { FirstName = "Amy" }, q => q.Insert(p => new { p.FirstName }));
              INSERT INTO "Person" ("FirstName") VALUES ('Amy');
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiAsyncLegacy.UpdateOnlyAsync``1(System.Data.IDbConnection,``0,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}},System.Threading.CancellationToken)">
            <summary>
            Use an SqlExpression to select which fields to update and construct the where expression, E.g: 
            
              db.UpdateOnly(new Person { FirstName = "JJ" }, ev => ev.Update(p => p.FirstName).Where(x => x.FirstName == "Jimi"));
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            
              What's not in the update expression doesn't get updated. No where expression updates all rows. E.g:
            
              db.UpdateOnly(new Person { FirstName = "JJ", LastName = "Hendo" }, ev => ev.Update(p => p.FirstName));
              UPDATE "Person" SET "FirstName" = 'JJ'
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiAsyncLegacy.UpdateFmtAsync``1(System.Data.IDbConnection,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Flexible Update method to succinctly execute a free-text update statement using optional params. E.g:
            
              db.Update&lt;Person&gt;(set:"FirstName = {0}".Params("JJ"), where:"LastName = {0}".Params("Hendrix"));
              UPDATE "Person" SET FirstName = 'JJ' WHERE LastName = 'Hendrix'
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiAsyncLegacy.UpdateFmtAsync(System.Data.IDbConnection,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Flexible Update method to succinctly execute a free-text update statement using optional params. E.g.
            
              db.Update(table:"Person", set: "FirstName = {0}".Params("JJ"), where: "LastName = {0}".Params("Hendrix"));
              UPDATE "Person" SET FirstName = 'JJ' WHERE LastName = 'Hendrix'
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiAsyncLegacy.DeleteFmtAsync``1(System.Data.IDbConnection,System.String,System.Threading.CancellationToken)">
            <summary>
            Flexible Delete method to succinctly execute a delete statement using free-text where expression. E.g.
            
              db.Delete&lt;Person&gt;(where:"Age = {0}".Params(27));
              DELETE FROM "Person" WHERE Age = 27
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiAsyncLegacy.DeleteFmtAsync(System.Data.IDbConnection,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Flexible Delete method to succinctly execute a delete statement using free-text where expression. E.g.
            
              db.Delete(table:"Person", where: "Age = {0}".Params(27));
              DELETE FROM "Person" WHERE Age = 27
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiAsyncLegacy.DeleteAsync``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}},System.Threading.CancellationToken)">
            <summary>
            Delete the rows that matches the where expression, e.g:
            
              db.Delete&lt;Person&gt;(ev => ev.Where(p => p.Age == 27));
              DELETE FROM "Person" WHERE ("Age" = 27)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.InsertOnly``1(System.Data.IDbConnection,``0,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Insert only fields in POCO specified by the SqlExpression lambda. E.g:
            <para>db.InsertOnly(new Person { FirstName = "Amy", Age = 27 }, q =&gt; q.Insert(p =&gt; new { p.FirstName, p.Age }))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.UpdateOnly``1(System.Data.IDbConnection,``0,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Use an SqlExpression to select which fields to update and construct the where expression, E.g: 
            
              db.UpdateOnly(new Person { FirstName = "JJ" }, ev => ev.Update(p => p.FirstName).Where(x => x.FirstName == "Jimi"));
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            
              What's not in the update expression doesn't get updated. No where expression updates all rows. E.g:
            
              db.UpdateOnly(new Person { FirstName = "JJ", LastName = "Hendo" }, ev => ev.Update(p => p.FirstName));
              UPDATE "Person" SET "FirstName" = 'JJ'
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.UpdateFmt``1(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Flexible Update method to succinctly execute a free-text update statement using optional params. E.g:
            
              db.Update&lt;Person&gt;(set:"FirstName = {0}".Params("JJ"), where:"LastName = {0}".Params("Hendrix"));
              UPDATE "Person" SET FirstName = 'JJ' WHERE LastName = 'Hendrix'
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.UpdateFmt(System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Flexible Update method to succinctly execute a free-text update statement using optional params. E.g.
            
              db.Update(table:"Person", set: "FirstName = {0}".Params("JJ"), where: "LastName = {0}".Params("Hendrix"));
              UPDATE "Person" SET FirstName = 'JJ' WHERE LastName = 'Hendrix'
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.DeleteFmt``1(System.Data.IDbConnection,System.String)">
            <summary>
            Flexible Delete method to succinctly execute a delete statement using free-text where expression. E.g.
            
              db.Delete&lt;Person&gt;(where:"Age = {0}".Params(27));
              DELETE FROM "Person" WHERE Age = 27
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.DeleteFmt(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Flexible Delete method to succinctly execute a delete statement using free-text where expression. E.g.
            
              db.Delete(table:"Person", where: "Age = {0}".Params(27));
              DELETE FROM "Person" WHERE Age = 27
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.Delete``1(System.Data.IDbConnection,System.Func{ServiceStack.OrmLite.SqlExpression{``0},ServiceStack.OrmLite.SqlExpression{``0}})">
            <summary>
            Delete the rows that matches the where expression, e.g:
            
              db.Delete&lt;Person&gt;(ev => ev.Where(p => p.Age == 27));
              DELETE FROM "Person" WHERE ("Age" = 27)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.Legacy.OrmLiteWriteExpressionsApiLegacy.InsertOnly``1(System.Data.IDbConnection,``0,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            
              db.InsertOnly(new Person { FirstName = "Amy" }, q => q.Insert(p => new { p.FirstName }));
              INSERT INTO "Person" ("FirstName") VALUES ('Amy');
            </summary>
        </member>
        <member name="F:ServiceStack.OrmLite.OrmLiteContext.UseThreadStatic">
            <summary>
            Tell ServiceStack to use ThreadStatic Items Collection for Context Scoped items.
            Warning: ThreadStatic Items aren't pinned to the same request in async services which callback on different threads.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteContext.Items">
            <summary>
            Gets a list of items for this context. 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
            Returns results from the active connection.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns results from using sql. E.g:
            <para>db.Select&lt;Person&gt;("Age &gt; 40")</para>
            <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; 40")</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns results from using a parameterized query. E.g:
            <para>db.Select&lt;Person&gt;("Age &gt; @age", new { age = 40})</para>
            <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new[] { db.CreateParam("age",40) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns results from using a parameterized query. E.g:
            <para>db.Select&lt;Person&gt;("Age &gt; @age", new { age = 40})</para>
            <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new { age = 40})</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Returns results from using a parameterized query. E.g:
            <para>db.Select&lt;Person&gt;("Age &gt; @age", new Dictionary&lt;string, object&gt; { { "age", 40 } })</para>
            <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new Dictionary&lt;string, object&gt; { { "age", 40 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.Type,System.Threading.CancellationToken)">
            <summary>
            Returns a partial subset of results from the specified tableType. E.g:
            <para>db.Select&lt;EntityWithId&gt;(typeof(Person))</para>
            <para></para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectAsync``1(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns a partial subset of results from the specified tableType. E.g:
            <para>db.Select&lt;EntityWithId&gt;(typeof(Person), "Age = @age", new { age = 27 })</para>
            <para></para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.WhereAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns results from using a single name, value filter. E.g:
            <para>db.Where&lt;Person&gt;("Age", 27)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.WhereAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns results from using an anonymous type filter. E.g:
            <para>db.Where&lt;Person&gt;(new { Age = 27 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectByIdsAsync``1(System.Data.IDbConnection,System.Collections.IEnumerable,System.Threading.CancellationToken)">
            <summary>
            Returns results using the supplied primary key ids. E.g:
            <para>db.SelectByIds&lt;Person&gt;(new[] { 1, 2, 3 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectNonDefaultsAsync``1(System.Data.IDbConnection,``0,System.Threading.CancellationToken)">
            <summary>
            Query results using the non-default values in the supplied partially populated POCO example. E.g:
            <para>db.SelectNonDefaults(new Person { Id = 1 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SelectNonDefaultsAsync``1(System.Data.IDbConnection,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Query results using the non-default values in the supplied partially populated POCO example. E.g:
            <para>db.SelectNonDefaults("Age &gt; @Age", new Person { Age = 42 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SingleAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns the first result using a parameterized query. E.g:
            <para>db.Single&lt;Person&gt;(new { Age = 42 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SingleAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns results from using a single name, value filter. E.g:
            <para>db.Single&lt;Person&gt;("Age = @age", new[] { db.CreateParam("age",42) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SingleAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns results from using a single name, value filter. E.g:
            <para>db.Single&lt;Person&gt;("Age = @age", new { age = 42 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SingleByIdAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns the first result using a primary key id. E.g:
            <para>db.SingleById&lt;Person&gt;(1)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SingleWhereAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns the first result using a name, value filter. E.g:
            <para>db.SingleWhere&lt;Person&gt;("Age", 42)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ScalarAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Returns a single scalar value using an SqlExpression. E.g:
            <para>db.Column&lt;int&gt;(db.From&lt;Persion&gt;().Select(x => Sql.Count("*")).Where(q => q.Age > 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ScalarAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns a single scalar value using a parameterized query. E.g:
            <para>db.Scalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; @age", new[] { db.CreateParam("age",40) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ScalarAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns a single scalar value using a parameterized query. E.g:
            <para>db.Scalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; @age", new { age = 40 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ColumnAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlExpression. E.g:
            <para>db.Column&lt;int&gt;(db.From&lt;Persion&gt;().Select(x => x.LastName).Where(q => q.Age == 27))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ColumnAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.Column&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new[] { db.CreateParam("age",27) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ColumnAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.Column&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new { age = 27 })</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ColumnDistinctAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)" -->
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ColumnDistinctAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
            <para>db.ColumnDistinct&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ColumnDistinctAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
            <para>db.ColumnDistinct&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServiceStack.OrmLite.OrmLiteReadApiAsync.LookupAsync``2(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)" -->
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.LookupAsync``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an parameterized query. E.g:
            <para>db.Lookup&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.LookupAsync``2(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an parameterized query. E.g:
            <para>db.Lookup&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServiceStack.OrmLite.OrmLiteReadApiAsync.DictionaryAsync``2(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)" -->
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.DictionaryAsync``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns a Dictionary from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
            <para>db.Dictionary&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.DictionaryAsync``2(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns a Dictionary from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
            <para>db.Dictionary&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ExistsAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns true if the Query returns any records that match the LINQ expression, E.g:
            <para>db.Exists&lt;Person&gt;(x =&gt; x.Age &lt; 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ExistsAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Returns true if the Query returns any records that match the supplied SqlExpression, E.g:
            <para>db.Exists(db.From&lt;Person&gt;().Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ExistsAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns true if the Query returns any records, using an SqlFormat query. E.g:
            <para>db.Exists&lt;Person&gt;(new { Age = 42 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ExistsAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns true if the Query returns any records, using a parameterized query. E.g:
            <para>db.Exists&lt;Person&gt;("Age = @age", new { age = 42 })</para>
            <para>db.Exists&lt;Person&gt;("SELECT * FROM Person WHERE Age = @age", new { age = 42 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlListAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Returns results from an arbitrary SqlExpression. E.g:
            <para>db.SqlList&lt;Person&gt;(db.From&lt;Person&gt;().Select("*").Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlListAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns results from an arbitrary parameterized raw sql query. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlListAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns results from an arbitrary parameterized raw sql query. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlListAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Returns results from an arbitrary parameterized raw sql query. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", new Dictionary&lt;string, object&gt; { { "age", 42 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlListAsync``1(System.Data.IDbConnection,System.String,System.Action{System.Data.IDbCommand},System.Threading.CancellationToken)">
            <summary>
            Returns results from an arbitrary parameterized raw sql query with a dbCmd filter. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", dbCmd => ...)</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlColumnAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)" -->
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlColumnAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns the first column in a List using a parameterized query. E.g:
            <para>db.SqlColumn&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlColumnAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns the first column in a List using a parameterized query. E.g:
            <para>db.SqlColumn&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlColumnAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Returns the first column in a List using a parameterized query. E.g:
            <para>db.SqlColumn&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new Dictionary&lt;string, object&gt; { { "age", 50 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlScalarAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Returns a single Scalar value using an SqlExpression. E.g:
            <para>db.SqlScalar&lt;int&gt;(db.From&lt;Person&gt;().Select(Sql.Count("*")).Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlScalarAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter},System.Threading.CancellationToken)">
            <summary>
            Returns a single Scalar value using a parameterized query. E.g:
            <para>db.SqlScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlScalarAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns a single Scalar value using a parameterized query. E.g:
            <para>db.SqlScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlScalarAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Returns a single Scalar value using a parameterized query. E.g:
            <para>db.SqlScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new Dictionary&lt;string, object&gt; { { "age", 50 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ExecuteNonQueryAsync(System.Data.IDbConnection,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a raw sql non-query using sql. E.g:
            <para>var rowsAffected = db.ExecuteNonQueryAsync("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFormat("WaterHouse", 7))</para>
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ExecuteNonQueryAsync(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes a raw sql non-query using a parameterized query. E.g:
            <para>var rowsAffected = db.ExecuteNonQueryAsync("UPDATE Person SET LastName=@name WHERE Id=@id", new { name = "WaterHouse", id = 7 })</para>
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.ExecuteNonQueryAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Executes a raw sql non-query using a parameterized query.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.SqlProcedureAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Returns results from a Stored Procedure, using a parameterized query.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.LongScalarAsync(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
            Returns the scalar result as a long.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.LoadSingleByIdAsync``1(System.Data.IDbConnection,System.Object,System.String[],System.Threading.CancellationToken)">
            <summary>
            Returns the first result with all its references loaded, using a primary key id. E.g:
            <para>db.LoadSingleById&lt;Person&gt;(1)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.LoadSingleByIdAsync``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Returns the first result with all its references loaded, using a primary key id. E.g:
            <para>db.LoadSingleById&lt;Person&gt;(1, include = x => new { x.Address })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApiAsync.LoadReferencesAsync``1(System.Data.IDbConnection,``0,System.String[],System.Threading.CancellationToken)">
            <summary>
            Loads all the related references onto the instance. E.g:
            <para>db.LoadReferencesAsync(customer)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.ExecuteSqlAsync(System.Data.IDbConnection,System.String,System.Threading.CancellationToken)">
            <summary>
            Execute any arbitrary raw SQL.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.ExecuteSqlAsync(System.Data.IDbConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Execute any arbitrary raw SQL with db params.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.InsertAsync``1(System.Data.IDbConnection,``0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Insert 1 POCO, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
            <para>var id = db.Insert(new Person { Id = 1, FirstName = "Jimi }, selectIdentity:true)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.InsertAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,``0[])">
            <summary>
            Insert 1 or more POCOs in a transaction. E.g:
            <para>db.Insert(new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para>
            <para>          new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.InsertAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Insert a collection of POCOs in a transaction. E.g:
            <para>db.InsertAll(new[] { new Person { Id = 9, FirstName = "Biggie", LastName = "Smalls", Age = 24 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.UpdateAsync``1(System.Data.IDbConnection,``0,System.Threading.CancellationToken)">
            <summary>
            Updates 1 POCO. All fields are updated except for the PrimaryKey which is used as the identity selector. E.g:
            <para>db.Update(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.UpdateAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,``0[])">
            <summary>
            Updates 1 or more POCOs in a transaction. E.g:
            <para>db.Update(new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para>
            <para>new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.UpdateAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Updates 1 or more POCOs in a transaction. E.g:
            <para>db.UpdateAll(new[] { new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Delete rows using an anonymous type filter. E.g:
            <para>db.Delete&lt;Person&gt;(new { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteAsync``1(System.Data.IDbConnection,``0,System.Threading.CancellationToken)">
            <summary>
            Delete 1 row using all fields in the filter. E.g:
            <para>db.Delete(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,``0[])">
            <summary>
            Delete 1 or more rows in a transaction using all fields in the filter. E.g:
            <para>db.Delete(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteNonDefaultsAsync``1(System.Data.IDbConnection,``0,System.Threading.CancellationToken)">
            <summary>
            Delete 1 or more rows using only field with non-default values in the filter. E.g:
            <para>db.DeleteNonDefaults(new Person { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteNonDefaultsAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,``0[])">
            <summary>
            Delete 1 or more rows in a transaction using only field with non-default values in the filter. E.g:
            <para>db.DeleteNonDefaults(new Person { FirstName = "Jimi", Age = 27 }, 
            new Person { FirstName = "Janis", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteByIdAsync``1(System.Data.IDbConnection,System.Object,System.Threading.CancellationToken)">
            <summary>
            Delete 1 row by the PrimaryKey. E.g:
            <para>db.DeleteById&lt;Person&gt;(1)</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteByIdAsync``1(System.Data.IDbConnection,System.Object,System.UInt64,System.Threading.CancellationToken)">
            <summary>
            Delete 1 row by the PrimaryKey where the rowVersion matches the optimistic concurrency field. 
            Will throw <exception cref="T:ServiceStack.Data.OptimisticConcurrencyException">RowModefiedExeption</exception> if the 
            row does not exist or has a different row version.
            E.g: <para>db.DeleteById&lt;Person&gt;(1)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteByIdsAsync``1(System.Data.IDbConnection,System.Collections.IEnumerable,System.Threading.CancellationToken)">
            <summary>
            Delete all rows identified by the PrimaryKeys. E.g:
            <para>db.DeleteById&lt;Person&gt;(new[] { 1, 2, 3 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteAllAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
            Delete all rows in the generic table type. E.g:
            <para>db.DeleteAll&lt;Person&gt;()</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.DeleteAll(System.Data.IDbConnection,System.Type,System.Threading.CancellationToken)">
            <summary>
            Delete all rows in the runtime table type. E.g:
            <para>db.DeleteAll(typeof(Person))</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveAsync``1(System.Data.IDbConnection,``0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Insert a new row or update existing row. Returns true if a new row was inserted. 
            Optional references param decides whether to save all related references as well. E.g:
            <para>db.SaveAsync(customer, references:true)</para>
            </summary>
            <returns>true if a row was inserted; false if it was updated</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveAsync``1(System.Data.IDbConnection,System.Threading.CancellationToken,``0[])">
            <summary>
            Insert new rows or update existing rows. Return number of rows added E.g:
            <para>db.SaveAsync(new Person { Id = 10, FirstName = "Amy", LastName = "Winehouse", Age = 27 })</para>
            </summary>
            <returns>number of rows added</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Insert new rows or update existing rows. Return number of rows added E.g:
            <para>db.SaveAllAsync(new [] { new Person { Id = 10, FirstName = "Amy", LastName = "Winehouse", Age = 27 } })</para>
            </summary>
            <returns>number of rows added</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveAllReferencesAsync``1(System.Data.IDbConnection,``0,System.Threading.CancellationToken)">
            <summary>
            Populates all related references on the instance with its primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveAllReferences(customer)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveReferencesAsync``2(System.Data.IDbConnection,System.Threading.CancellationToken,``0,``1[])">
            <summary>
            Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveReference(customer, customer.Orders)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveReferencesAsync``2(System.Data.IDbConnection,``0,System.Collections.Generic.List{``1},System.Threading.CancellationToken)">
            <summary>
            Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveReference(customer, customer.Orders)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApiAsync.SaveReferencesAsync``2(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{``1},System.Threading.CancellationToken)">
            <summary>
            Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveReferences(customer, customer.Orders)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns results from using a LINQ Expression. E.g:
            <para>db.Select&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Select(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectAsync``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1},System.Threading.CancellationToken)">
            <summary>
            Project results from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SelectAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.SelectAsync(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SingleAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns a single result from using a LINQ Expression. E.g:
            <para>db.Single&lt;Person&gt;(x =&gt; x.Age == 42)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SingleAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.SingleAsync&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.SingleAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Threading.CancellationToken)">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.SingleAsync(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.ScalarAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Returns a scalar result from using an SqlExpression lambda. E.g:
            <para>db.Scalar&lt;Person, int&gt;(x =&gt; Sql.Max(x.Age))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.ScalarAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns a scalar result from using an SqlExpression lambda. E.g:
            <para>db.Scalar&lt;Person, int&gt;(x =&gt; Sql.Max(x.Age), , x =&gt; x.Age &lt; 50)</para>
            </summary>        
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.CountAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the count of rows that match the LINQ expression, E.g:
            <para>db.Count&lt;Person&gt;(x =&gt; x.Age &lt; 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.CountAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the count of rows that match the supplied SqlExpression, E.g:
            <para>db.Count(db.From&lt;Person&gt;().Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.RowCountAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Return the number of rows returned by the supplied expression
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.RowCountAsync(System.Data.IDbConnection,System.String,System.Threading.CancellationToken)">
            <summary>
            Return the number of rows returned by the supplied sql
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.LoadSelectAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[],System.Threading.CancellationToken)">
            <summary>
            Returns results with references from using a LINQ Expression. E.g:
            <para>db.LoadSelectAsync&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.LoadSelectAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[],System.Threading.CancellationToken)">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelectAsync(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApiAsync.LoadSelectAsync``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1},System.String[],System.Threading.CancellationToken)">
            <summary>
            Project results with references from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateOnlyAsync``1(System.Data.IDbConnection,``0,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Use an SqlExpression to select which fields to update and construct the where expression, E.g: 
            
              var q = db.From&gt;Person&lt;());
              db.UpdateOnly(new Person { FirstName = "JJ" }, q.Update(p => p.FirstName).Where(x => x.FirstName == "Jimi"));
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            
              What's not in the update expression doesn't get updated. No where expression updates all rows. E.g:
            
              db.UpdateOnly(new Person { FirstName = "JJ", LastName = "Hendo" }, ev.Update(p => p.FirstName));
              UPDATE "Person" SET "FirstName" = 'JJ'
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateOnlyAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
             <summary>
             Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
             
               db.UpdateOnlyAsync(() => new Person { FirstName = "JJ" }, where: p => p.LastName == "Hendrix");
               UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            
               db.UpdateOnlyAsync(() => new Person { FirstName = "JJ" });
               UPDATE "Person" SET "FirstName" = 'JJ'
             </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateOnlyAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            
              db.UpdateOnlyAsync(() => new Person { FirstName = "JJ" }, db.From&lt;Person&gt;().Where(p => p.LastName == "Hendrix"));
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateOnlyAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
             <summary>
             Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
             
               db.UpdateOnly(new Person { FirstName = "JJ" }, p => p.FirstName, p => p.LastName == "Hendrix");
               UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            
               db.UpdateOnly(new Person { FirstName = "JJ" }, p => p.FirstName);
               UPDATE "Person" SET "FirstName" = 'JJ'
             </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateAddAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
             <summary>
             Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
             Numeric fields generates an increment sql which is usefull to increment counters, etc...
             avoiding concurrency conflicts
             
               db.UpdateAddAsync(() => new Person { Age = 5 }, where: p => p.LastName == "Hendrix");
               UPDATE "Person" SET "Age" = "Age" + 5 WHERE ("LastName" = 'Hendrix')
            
               db.UpdateAddAsync(() => new Person { Age = 5 });
               UPDATE "Person" SET "Age" = "Age" + 5
             </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateOnlyAsync``1(System.Data.IDbConnection,``0,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            
              db.UpdateOnly(new Person { FirstName = "JJ" }, new[]{ "FirstName" }, p => p.LastName == "Hendrix");
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateAddAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            Numeric fields generates an increment sql which is usefull to increment counters, etc...
            avoiding concurrency conflicts
            
              db.UpdateAddAsync(() => new Person { Age = 5 }, db.From&lt;Person&gt;().Where(p => p.LastName == "Hendrix"));
              UPDATE "Person" SET "Age" = "Age" + 5 WHERE ("LastName" = 'Hendrix')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateNonDefaultsAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Updates all non-default values set on item matching the where condition (if any). E.g
            
              db.UpdateNonDefaults(new Person { FirstName = "JJ" }, p => p.FirstName == "Jimi");
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Updates all values set on item matching the where condition (if any). E.g
            
              db.Update(new Person { Id = 1, FirstName = "JJ" }, p => p.LastName == "Hendrix");
              UPDATE "Person" SET "Id" = 1,"FirstName" = 'JJ',"LastName" = NULL,"Age" = 0 WHERE ("LastName" = 'Hendrix')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.UpdateAsync``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Updates all matching fields populated on anonymousType that matches where condition (if any). E.g:
            
              db.Update&lt;Person&gt;(new { FirstName = "JJ" }, p => p.LastName == "Hendrix");
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.InsertOnlyAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            
              db.InsertOnlyAsync(new Person { FirstName = "Amy" }, p => p.FirstName));
              INSERT INTO "Person" ("FirstName") VALUES ('Amy');
            
              db.InsertOnlyAsync(new Person { Id =1 , FirstName="Amy" }, p => new { p.Id, p.FirstName }));
              INSERT INTO "Person" ("Id", "FirstName") VALUES (1, 'Amy');
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.InsertOnlyAsync``1(System.Data.IDbConnection,``0,System.String[],System.Threading.CancellationToken)">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            
              db.InsertOnly(new Person { FirstName = "Amy" }, new[]{ "FirstName" }));
              INSERT INTO "Person" ("FirstName") VALUES ('Amy');
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.InsertOnlyAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            
              db.InsertOnlyAsync(() => new Person { FirstName = "Amy" }));
              INSERT INTO "Person" ("FirstName") VALUES (@FirstName);
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.DeleteAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Delete the rows that matches the where expression, e.g:
            
              db.Delete&lt;Person&gt;(p => p.Age == 27);
              DELETE FROM "Person" WHERE ("Age" = 27)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApiAsync.DeleteAsync``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Threading.CancellationToken)">
            <summary>
            Delete the rows that matches the where expression, e.g:
            
              var q = db.From&gt;Person&lt;());
              db.Delete&lt;Person&gt;(q.Where(p => p.Age == 27));
              DELETE FROM "Person" WHERE ("Age" = 27)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select">
            <summary>
            Clear select expression. All properties will be selected.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select(System.String)">
            <summary>
            set the specified selectExpression.
            </summary>
            <param name='selectExpression'>
            raw Select expression: "Select SomeField1, SomeField2 from SomeTable"
            </param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Select(System.String[])">
            <summary>
            Set the specified selectExpression using matching fields.
            </summary>
            <param name='fields'>
            Matching Fields: "SomeField1, SomeField2"
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServiceStack.OrmLite.SqlExpression`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" -->
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Skip(System.Nullable{System.Int32})">
            <summary>
            Offset of the first row to return. The offset of the initial row is 0
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Take(System.Nullable{System.Int32})">
            <summary>
            Number of rows returned by a SELECT statement
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Limit(System.Int32,System.Int32)">
            <summary>
            Set the specified offset and rows for SQL Limit clause.
            </summary>
            <param name='skip'>
            Offset of the first row to return. The offset of the initial row is 0
            </param>
            <param name='rows'>
            Number of rows returned by a SELECT statement
            </param>	
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Limit(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the specified offset and rows for SQL Limit clause where they exist.
            </summary>
            <param name='skip'>
            Offset of the first row to return. The offset of the initial row is 0
            </param>
            <param name='rows'>
            Number of rows returned by a SELECT statement
            </param>	
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Limit(System.Int32)">
            <summary>
            Set the specified rows for Sql Limit clause.
            </summary>
            <param name='rows'>
            Number of rows returned by a SELECT statement
            </param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Limit">
            <summary>
            Clear Sql Limit clause
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.ClearLimits">
            <summary>
            Clear Offset and Limit clauses. Alias for Limit()
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Update(System.Collections.Generic.List{System.String})">
            <summary>
            Fields to be updated.
            </summary>
            <param name='updatefields'>
            List&lt;string&gt; containing Names of properties to be updated
            </param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Update(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Fields to be updated.
            </summary>
            <param name='updatefields'>
            IEnumerable&lt;string&gt; containing Names of properties to be updated
            </param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Fields to be updated.
            </summary>
            <param name='fields'>
            x=> x.SomeProperty1 or x=> new { x.SomeProperty1, x.SomeProperty2 }
            </param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Update">
            <summary>
            Clear UpdateFields list ( all fields will be updated)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Insert``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Fields to be inserted.
            </summary>
            <param name='fields'>
            x=> x.SomeProperty1 or x=> new{ x.SomeProperty1, x.SomeProperty2}
            </param>
            <typeparam name='TKey'>
            objectWithProperties
            </typeparam>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Insert(System.Collections.Generic.List{System.String})">
            <summary>
            fields to be inserted.
            </summary>
            <param name='insertFields'>
            IList&lt;string&gt; containing Names of properties to be inserted
            </param>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.Insert">
            <summary>
            Clear InsertFields list ( all fields will be inserted)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsBooleanComparison(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the expression is the parameter inside MemberExpression which should be compared with TrueExpression.
            </summary>
            <returns>Returns true if the specified expression is the parameter inside MemberExpression which should be compared with TrueExpression;
            otherwise, false.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsParameterAccess(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the expression is the parameter.
            </summary>
            <returns>Returns true if the specified expression is parameter;
            otherwise, false.</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.SqlExpression`1.IsParameterOrConvertAccess(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the expression is a Parameter or Convert Expression.
            </summary>
            <returns>Returns true if the specified expression is parameter or convert;
            otherwise, false.</returns>
        </member>
        <member name="T:ServiceStack.OrmLite.PredicateBuilder">
            <summary>
            Enables the efficient, dynamic composition of query predicates.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.True``1">
            <summary>
            Creates a predicate that evaluates to true.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.False``1">
            <summary>
            Creates a predicate that evaluates to false.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a predicate expression from the specified lambda expression.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines the first predicate with the second using the logical "and".
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines the first predicate with the second using the logical "or".
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Negates the predicate.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.PredicateBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Combines the first expression with the second using the specified merge function.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.From``1(System.Data.IDbConnection)">
            <summary>
            Creates a new SqlExpression builder allowing typed LINQ-like queries.
            Alias for SqlExpression.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.From``1(System.Data.IDbConnection,System.String)">
            <summary>
            Creates a new SqlExpression builder for the specified type using a user-defined FROM sql expression.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.OpenTransaction(System.Data.IDbConnection)">
            <summary>
            Open a Transaction in OrmLite
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.OpenTransaction(System.Data.IDbConnection,System.Data.IsolationLevel)">
            <summary>
            Open a Transaction in OrmLite
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.OpenCommand(System.Data.IDbConnection)">
            <summary>
            Create a managed OrmLite IDbCommand
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Select``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns results from using a LINQ Expression. E.g:
            <para>db.Select&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Select``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Select(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Select``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression,System.Object)">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Select(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Single``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a single result from using a LINQ Expression. E.g:
            <para>db.Single&lt;Person&gt;(x =&gt; x.Age == 42)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Single``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Select&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Single``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns results from using an SqlExpression lambda. E.g:
            <para>db.Single(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Scalar``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns a scalar result from using an SqlExpression lambda. E.g:
            <para>db.Scalar&lt;Person, int&gt;(x =&gt; Sql.Max(x.Age))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Scalar``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a scalar result from using an SqlExpression lambda. E.g:
            <para>db.Scalar&lt;Person, int&gt;(x =&gt; Sql.Max(x.Age), , x =&gt; x.Age &lt; 50)</para>
            </summary>        
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Count``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns the count of rows that match the LINQ expression, E.g:
            <para>db.Count&lt;Person&gt;(x =&gt; x.Age &lt; 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.Count``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Returns the count of rows that match the supplied SqlExpression, E.g:
            <para>db.Count(db.From&lt;Person&gt;().Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.RowCount``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Return the number of rows returned by the supplied expression
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.RowCount(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Return the number of rows returned by the supplied sql
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.RowCount(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Return the number of rows returned by the supplied sql and db params
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[])">
            <summary>
            Returns results with references from using a LINQ Expression. E.g:
            <para>db.LoadSelect&lt;Person&gt;(x =&gt; x.Age &gt; 40)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns results with references from using a LINQ Expression. E.g:
            <para>db.LoadSelect&lt;Person&gt;(x =&gt; x.Age &gt; 40, include: x => new { x.PrimaryAddress })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.String[])">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelect(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelect(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40), include:q.OnlyFields)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns results with references from using an SqlExpression lambda. E.g:
            <para>db.LoadSelect(db.From&lt;Person&gt;().Where(x =&gt; x.Age &gt; 40), include: x => new { x.PrimaryAddress })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1},System.String[])">
            <summary>
            Project results with references from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Project results with references from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadExpressionsApi.LoadSelect``2(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Project results with references from a number of joined tables into a different model
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,``0,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Use an SqlExpression to select which fields to update and construct the where expression, E.g: 
            
              var q = db.From&gt;Person&lt;());
              db.UpdateOnly(new Person { FirstName = "JJ" }, q.Update(p => p.FirstName).Where(x => x.FirstName == "Jimi"));
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            
              What's not in the update expression doesn't get updated. No where expression updates all rows. E.g:
            
              db.UpdateOnly(new Person { FirstName = "JJ", LastName = "Hendo" }, ev.Update(p => p.FirstName));
              UPDATE "Person" SET "FirstName" = 'JJ'
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
             <summary>
             Update only fields in the specified expression that matches the where condition (if any), E.g:
             
               db.UpdateOnly(() => new Person { FirstName = "JJ" }, where: p => p.LastName == "Hendrix");
               UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            
               db.UpdateOnly(() => new Person { FirstName = "JJ" });
               UPDATE "Person" SET "FirstName" = 'JJ'
             </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Update only fields in the specified expression that matches the where condition (if any), E.g:
            
              db.UpdateOnly(() => new Person { FirstName = "JJ" }, db.From&gt;Person&lt;().Where(p => p.LastName == "Hendrix"));
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
             <summary>
             Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
             
               db.UpdateOnly(new Person { FirstName = "JJ" }, p => p.FirstName, p => p.LastName == "Hendrix");
               UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            
               db.UpdateOnly(new Person { FirstName = "JJ" }, p => p.FirstName);
               UPDATE "Person" SET "FirstName" = 'JJ'
            
               db.UpdateOnly(new Person { FirstName = "JJ", Age = 27 }, p => new { p.FirstName, p.Age );
               UPDATE "Person" SET "FirstName" = 'JJ', "Age" = 27
             </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateOnly``1(System.Data.IDbConnection,``0,System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            
              db.UpdateOnly(new Person { FirstName = "JJ" }, new[]{ "FirstName" }, p => p.LastName == "Hendrix");
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateAdd``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
             <summary>
             Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
             Numeric fields generates an increment sql which is usefull to increment counters, etc...
             avoiding concurrency conflicts
             
               db.UpdateAdd(() => new Person { Age = 5 }, where: p => p.LastName == "Hendrix");
               UPDATE "Person" SET "Age" = "Age" + 5 WHERE ("LastName" = 'Hendrix')
            
               db.UpdateAdd(() => new Person { Age = 5 });
               UPDATE "Person" SET "Age" = "Age" + 5
             </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateAdd``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}},ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:
            Numeric fields generates an increment sql which is usefull to increment counters, etc...
            avoiding concurrency conflicts
            
              db.UpdateAdd(() => new Person { Age = 5 }, db.From&lt;Person&gt;().Where(p => p.LastName == "Hendrix"));
              UPDATE "Person" SET "Age" = "Age" + 5 WHERE ("LastName" = 'Hendrix')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.UpdateNonDefaults``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Updates all non-default values set on item matching the where condition (if any). E.g
            
              db.UpdateNonDefaults(new Person { FirstName = "JJ" }, p => p.FirstName == "Jimi");
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("FirstName" = 'Jimi')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.Update``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Updates all values set on item matching the where condition (if any). E.g
            
              db.Update(new Person { Id = 1, FirstName = "JJ" }, p => p.LastName == "Hendrix");
              UPDATE "Person" SET "Id" = 1,"FirstName" = 'JJ',"LastName" = NULL,"Age" = 0 WHERE ("LastName" = 'Hendrix')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.Update``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Updates all matching fields populated on anonymousType that matches where condition (if any). E.g:
            
              db.Update&lt;Person&gt;(new { FirstName = "JJ" }, p => p.LastName == "Hendrix");
              UPDATE "Person" SET "FirstName" = 'JJ' WHERE ("LastName" = 'Hendrix')
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.InsertOnly``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            
              db.InsertOnly(new Person { FirstName = "Amy" }, p => p.FirstName));
              INSERT INTO "Person" ("FirstName") VALUES ('Amy');
            
              db.InsertOnly(new Person { Id =1 , FirstName="Amy" }, p => new { p.Id, p.FirstName }));
              INSERT INTO "Person" ("Id", "FirstName") VALUES (1, 'Amy');
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.InsertOnly``1(System.Data.IDbConnection,``0,System.String[])">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            
              db.InsertOnly(new Person { FirstName = "Amy" }, new[]{ "FirstName" }));
              INSERT INTO "Person" ("FirstName") VALUES ('Amy');
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.InsertOnly``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Using an SqlExpression to only Insert the fields specified, e.g:
            
              db.InsertOnly(() => new Person { FirstName = "Amy" }));
              INSERT INTO "Person" ("FirstName") VALUES (@FirstName);
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.Delete``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Delete the rows that matches the where expression, e.g:
            
              db.Delete&lt;Person&gt;(p => p.Age == 27);
              DELETE FROM "Person" WHERE ("Age" = 27)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteExpressionsApi.Delete``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Delete the rows that matches the where expression, e.g:
            
              var q = db.From&lt;Person&gt;());
              db.Delete&lt;Person&gt;(q.Where(p => p.Age == 27));
              DELETE FROM "Person" WHERE ("Age" = 27)
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection)">
            <summary>
            Returns results from the active connection.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String)">
            <summary>
            Returns results from using sql. E.g:
            <para>db.Select&lt;Person&gt;("Age &gt; 40")</para>
            <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; 40")</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns results from using sql. E.g:
            <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new[] { db.CreateParam("age", 40) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns results from using a parameterized query. E.g:
            <para>db.Select&lt;Person&gt;("Age &gt; @age", new { age = 40})</para>
            <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new { age = 40})</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns results from using a parameterized query. E.g:
            <para>db.Select&lt;Person&gt;("Age &gt; @age", new Dictionary&lt;string, object&gt; { { "age", 40 } })</para>
            <para>db.Select&lt;Person&gt;("SELECT * FROM Person WHERE Age &gt; @age", new Dictionary&lt;string, object&gt; { { "age", 40 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.Type,System.String,System.Object)">
            <summary>
            Returns a partial subset of results from the specified tableType. E.g:
            <para>db.Select&lt;EntityWithId&gt;(typeof(Person))</para>
            <para></para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Select``1(System.Data.IDbConnection,System.Type)">
            <summary>
            Returns a partial subset of results from the specified tableType. E.g:
            <para>db.Select&lt;EntityWithId&gt;(typeof(Person))</para>
            <para></para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Where``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns results from using a single name, value filter. E.g:
            <para>db.Where&lt;Person&gt;("Age", 27)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Where``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns results from using an anonymous type filter. E.g:
            <para>db.Where&lt;Person&gt;(new { Age = 27 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectByIds``1(System.Data.IDbConnection,System.Collections.IEnumerable)">
            <summary>
            Returns results using the supplied primary key ids. E.g:
            <para>db.SelectByIds&lt;Person&gt;(new[] { 1, 2, 3 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectNonDefaults``1(System.Data.IDbConnection,``0)">
            <summary>
            Query results using the non-default values in the supplied partially populated POCO example. E.g:
            <para>db.SelectNonDefaults(new Person { Id = 1 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectNonDefaults``1(System.Data.IDbConnection,System.String,``0)">
            <summary>
            Query results using the non-default values in the supplied partially populated POCO example. E.g:
            <para>db.SelectNonDefaults("Age &gt; @Age", new Person { Age = 42 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectLazy``1(System.Data.IDbConnection)">
            <summary>
            Returns a lazyily loaded stream of results. E.g:
            <para>db.SelectLazy&lt;Person&gt;()</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectLazy``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns a lazyily loaded stream of results using a parameterized query. E.g:
            <para>db.SelectLazy&lt;Person&gt;("Age &gt; @age", new { age = 40 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SelectLazy``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Returns a lazyily loaded stream of results using a parameterized query. E.g:
            <para>db.SelectLazy(db.From&lt;Person&gt;().Where(x =&gt; x == 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.WhereLazy``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns a stream of results that are lazily loaded using a parameterized query. E.g:
            <para>db.WhereLazy&lt;Person&gt;(new { Age = 27 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Single``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns the first result using a parameterized query. E.g:
            <para>db.Single&lt;Person&gt;(new { Age = 42 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Single``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns results from using a single name, value filter. E.g:
            <para>db.Single&lt;Person&gt;("Age = @age", new[] { db.CreateParam("age",40) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Single``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns results from using a single name, value filter. E.g:
            <para>db.Single&lt;Person&gt;("Age = @age", new { age = 42 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SingleById``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns the first result using a primary key id. E.g:
            <para>db.SingleById&lt;Person&gt;(1)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SingleWhere``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns the first result using a name, value filter. E.g:
            <para>db.SingleWhere&lt;Person&gt;("Age", 42)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Scalar``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns a single scalar value using an SqlExpression. E.g:
            <para>db.Column&lt;int&gt;(db.From&lt;Persion&gt;().Select(x => Sql.Count("*")).Where(q => q.Age > 40))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Scalar``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns a single scalar value using a parameterized query. E.g:
            <para>db.Scalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; @age", new[] { db.CreateParam("age",40) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Scalar``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns a single scalar value using a parameterized query. E.g:
            <para>db.Scalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &gt; @age", new { age = 40 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Column``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlExpression. E.g:
            <para>db.Column&lt;int&gt;(db.From&lt;Persion&gt;().Select(x => x.LastName).Where(q => q.Age == 27))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Column``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.Column&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new[] { db.CreateParam("age",27) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnLazy``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlExpression. E.g:
            <para>db.ColumnLazy&lt;int&gt;(db.From&lt;Persion&gt;().Select(x => x.LastName).Where(q => q.Age == 27))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnLazy``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.ColumnLazy&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new[] { db.CreateParam("age",27) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnLazy``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.ColumnLazy&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new { age = 27 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Column``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns the first column in a List using a SqlFormat query. E.g:
            <para>db.Column&lt;string&gt;("SELECT LastName FROM Person WHERE Age = @age", new { age = 27 })</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnDistinct``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)" -->
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnDistinct``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
            <para>db.ColumnDistinct&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ColumnDistinct``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns the distinct first column values in a HashSet using an SqlFormat query. E.g:
            <para>db.ColumnDistinct&lt;int&gt;("SELECT Age FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServiceStack.OrmLite.OrmLiteReadApi.Lookup``2(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)" -->
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Lookup``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an parameterized query. E.g:
            <para>db.Lookup&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Lookup``2(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns an Dictionary&lt;K, List&lt;V&gt;&gt; grouping made from the first two columns using an parameterized query. E.g:
            <para>db.Lookup&lt;int, string&gt;("SELECT Age, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServiceStack.OrmLite.OrmLiteReadApi.Dictionary``2(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)" -->
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Dictionary``2(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns a Dictionary from the first 2 columns: Column 1 (Keys), Column 2 (Values) using sql. E.g:
            <para>db.Dictionary&lt;int, string&gt;("SELECT Id, LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns true if the Query returns any records that match the LINQ expression, E.g:
            <para>db.Exists&lt;Person&gt;(x =&gt; x.Age &lt; 50)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,ServiceStack.OrmLite.SqlExpression{``0})">
            <summary>
            Returns true if the Query returns any records that match the supplied SqlExpression, E.g:
            <para>db.Exists(db.From&lt;Person&gt;().Where(x =&gt; x.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns true if the Query returns any records, using an SqlFormat query. E.g:
            <para>db.Exists&lt;Person&gt;(new { Age = 42 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.Exists``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns true if the Query returns any records, using a parameterized query. E.g:
            <para>db.Exists&lt;Person&gt;("Age = @age", new { age = 42 })</para>
            <para>db.Exists&lt;Person&gt;("SELECT * FROM Person WHERE Age = @age", new { age = 42 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns results from an arbitrary SqlExpression. E.g:
            <para>db.SqlList&lt;Person&gt;(db.From&lt;Person&gt;().Select("*").Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns results from an arbitrary parameterized raw sql query. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns results from an arbitrary parameterized raw sql query. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns results from an arbitrary parameterized raw sql query. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", new Dictionary&lt;string, object&gt; { { "age", 42 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlList``1(System.Data.IDbConnection,System.String,System.Action{System.Data.IDbCommand})">
            <summary>
            Returns results from an arbitrary parameterized raw sql query with a dbCmd filter. E.g:
            <para>db.SqlList&lt;Person&gt;("EXEC GetRockstarsAged @age", dbCmd => ...)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlProc(System.Data.IDbConnection,System.String,System.Object,System.Boolean)">
            <summary>
            Prepare Stored Procedure with Input parameters, optionally populated with Input Params. E.g:
            <para>var cmd = db.SqlProc("GetRockstarsAged", new { age = 42 })</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ServiceStack.OrmLite.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)" -->
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns the first column in a List using a parameterized query. E.g:
            <para>db.SqlColumn&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new[] { db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns the first column in a List using a parameterized query. E.g:
            <para>db.SqlColumn&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlColumn``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns the first column in a List using a parameterized query. E.g:
            <para>db.SqlColumn&lt;string&gt;("SELECT LastName FROM Person WHERE Age &lt; @age", new Dictionary&lt;string, object&gt; { { "age", 50 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,ServiceStack.OrmLite.ISqlExpression)">
            <summary>
            Returns a single Scalar value using an SqlExpression. E.g:
            <para>db.SqlScalar&lt;int&gt;(db.From&lt;Person&gt;().Select(Sql.Count("*")).Where(q => q.Age &lt; 50))</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            Returns a single Scalar value using a parameterized query. E.g:
            <para>db.SqlScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new[]{ db.CreateParam("age",50) })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Returns a single Scalar value using a parameterized query. E.g:
            <para>db.SqlScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new { age = 50 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlScalar``1(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns a single Scalar value using a parameterized query. E.g:
            <para>db.SqlScalar&lt;int&gt;("SELECT COUNT(*) FROM Person WHERE Age &lt; @age", new Dictionary&lt;string, object&gt; { { "age", 50 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.LastInsertId(System.Data.IDbConnection)">
            <summary>
            Returns the last insert Id made from this connection.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ExecuteNonQuery(System.Data.IDbConnection,System.String)">
            <summary>
            Executes a raw sql non-query using sql. E.g:
            <para>var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFormat("WaterHouse", 7))</para>
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Executes a raw sql non-query using a parameterized query. E.g:
            <para>var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName=@name WHERE Id=@id", new { name = "WaterHouse", id = 7 })</para>
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes a raw sql non-query using a parameterized query.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Action{System.Data.IDbCommand})">
            <summary>
            Executes a raw sql non-query using a parameterized query with a dbCmd filter. E.g:
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlProcedure``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Returns results from a Stored Procedure, using a parameterized query.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.SqlProcedure``1(System.Data.IDbConnection,System.Object,System.String,System.Object[])">
            <summary>
            Returns results from a Stored Procedure using an SqlFormat query. E.g:
            <para></para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.LongScalar(System.Data.IDbConnection)">
            <summary>
            Returns the scalar result as a long.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.LoadSingleById``1(System.Data.IDbConnection,System.Object,System.String[])">
            <summary>
            Returns the first result with all its references loaded, using a primary key id. E.g:
            <para>db.LoadSingleById&lt;Person&gt;(1, include = new[]{ "Address" })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.LoadSingleById``1(System.Data.IDbConnection,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the first result with all its references loaded, using a primary key id. E.g:
            <para>db.LoadSingleById&lt;Person&gt;(1, include = x => new{ x.Address })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteReadApi.LoadReferences``1(System.Data.IDbConnection,``0)">
            <summary>
            Loads all the related references onto the instance. E.g:
            <para>db.LoadReferences(customer)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.TableExists(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Checks whether a Table Exists. E.g:
            <para>db.TableExists("Person")</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.TableExists``1(System.Data.IDbConnection)">
            <summary>
            Checks whether a Table Exists. E.g:
            <para>db.TableExists&lt;Person&gt;()</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.ColumnExists(System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Checks whether a Table Column Exists. E.g:
            <para>db.ColumnExists("Age", "Person")</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.ColumnExists``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Checks whether a Table Column Exists. E.g:
            <para>db.ColumnExists&lt;Person&gt;(x =&gt; x.Age)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTables(System.Data.IDbConnection,System.Boolean,System.Type[])">
            <summary>
            Create DB Tables from the schemas of runtime types. E.g:
            <para>db.CreateTables(typeof(Table1), typeof(Table2))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTable(System.Data.IDbConnection,System.Boolean,System.Type)">
            <summary>
            Create DB Table from the schema of the runtime type. Use overwrite to drop existing Table. E.g:
            <para>db.CreateTable(true, typeof(Table))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTableIfNotExists(System.Data.IDbConnection,System.Type[])">
            <summary>
            Only Create new DB Tables from the schemas of runtime types if they don't already exist. E.g:
            <para>db.CreateTableIfNotExists(typeof(Table1), typeof(Table2))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropAndCreateTables(System.Data.IDbConnection,System.Type[])">
            <summary>
            Drop existing DB Tables and re-create them from the schemas of runtime types. E.g:
            <para>db.DropAndCreateTables(typeof(Table1), typeof(Table2))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTable``1(System.Data.IDbConnection,System.Boolean)">
            <summary>
            Create a DB Table from the generic type. Use overwrite to drop the existing table or not. E.g:
            <para>db.CreateTable&lt;Person&gt;(overwrite=false) //default</para> 
            <para>db.CreateTable&lt;Person&gt;(overwrite=true)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTableIfNotExists``1(System.Data.IDbConnection)">
            <summary>
            Only create a DB Table from the generic type if it doesn't already exist. E.g:
            <para>db.CreateTableIfNotExists&lt;Person&gt;()</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.CreateTableIfNotExists(System.Data.IDbConnection,System.Type)">
            <summary>
            Only create a DB Table from the runtime type if it doesn't already exist. E.g:
            <para>db.CreateTableIfNotExists(typeof(Person))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropAndCreateTable``1(System.Data.IDbConnection)">
            <summary>
            Drop existing table if exists and re-create a DB Table from the generic type. E.g:
            <para>db.DropAndCreateTable&lt;Person&gt;()</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropAndCreateTable(System.Data.IDbConnection,System.Type)">
            <summary>
            Drop existing table if exists and re-create a DB Table from the runtime type. E.g:
            <para>db.DropAndCreateTable(typeof(Person))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropTables(System.Data.IDbConnection,System.Type[])">
            <summary>
            Drop any existing tables from their runtime types. E.g:
            <para>db.DropTables(typeof(Table1),typeof(Table2))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropTable(System.Data.IDbConnection,System.Type)">
            <summary>
            Drop any existing tables from the runtime type. E.g:
            <para>db.DropTable(typeof(Person))</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteSchemaApi.DropTable``1(System.Data.IDbConnection)">
            <summary>
            Drop any existing tables from the generic type. E.g:
            <para>db.DropTable&lt;Person&gt;()</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.GetLastSql(System.Data.IDbConnection)">
            <summary>
            Get the last SQL statement that was executed.
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.ExecuteSql(System.Data.IDbConnection,System.String)">
            <summary>
            Execute any arbitrary raw SQL.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.ExecuteSql(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Execute any arbitrary raw SQL with db params.
            </summary>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Insert``1(System.Data.IDbConnection,``0,System.Boolean)">
            <summary>
            Insert 1 POCO, use selectIdentity to retrieve the last insert AutoIncrement id (if any). E.g:
            <para>var id = db.Insert(new Person { Id = 1, FirstName = "Jimi }, selectIdentity:true)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Insert``1(System.Data.IDbConnection,``0[])">
            <summary>
            Insert 1 or more POCOs in a transaction. E.g:
            <para>db.Insert(new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para>
            <para>          new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.InsertAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Insert a collection of POCOs in a transaction. E.g:
            <para>db.InsertAll(new[] { new Person { Id = 9, FirstName = "Biggie", LastName = "Smalls", Age = 24 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Update``1(System.Data.IDbConnection,``0)">
            <summary>
            Updates 1 POCO. All fields are updated except for the PrimaryKey which is used as the identity selector. E.g:
            <para>db.Update(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Update``1(System.Data.IDbConnection,``0[])">
            <summary>
            Updates 1 or more POCOs in a transaction. E.g:
            <para>db.Update(new Person { Id = 1, FirstName = "Tupac", LastName = "Shakur", Age = 25 },</para>
            <para>new Person { Id = 2, FirstName = "Biggie", LastName = "Smalls", Age = 24 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.UpdateAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Updates 1 or more POCOs in a transaction. E.g:
            <para>db.UpdateAll(new[] { new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 } })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Delete rows using an anonymous type filter. E.g:
            <para>db.Delete&lt;Person&gt;(new { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,``0)">
            <summary>
            Delete 1 row using all fields in the filter. E.g:
            <para>db.Delete(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,``0[])">
            <summary>
            Delete 1 or more rows in a transaction using all fields in the filter. E.g:
            <para>db.Delete(new Person { Id = 1, FirstName = "Jimi", LastName = "Hendrix", Age = 27 })</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteNonDefaults``1(System.Data.IDbConnection,``0)">
            <summary>
            Delete 1 or more rows using only field with non-default values in the filter. E.g:
            <para>db.DeleteNonDefaults(new Person { FirstName = "Jimi", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteNonDefaults``1(System.Data.IDbConnection,``0[])">
            <summary>
            Delete 1 or more rows in a transaction using only field with non-default values in the filter. E.g:
            <para>db.DeleteNonDefaults(new Person { FirstName = "Jimi", Age = 27 }, 
            new Person { FirstName = "Janis", Age = 27 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteById``1(System.Data.IDbConnection,System.Object)">
            <summary>
            Delete 1 row by the PrimaryKey. E.g:
            <para>db.DeleteById&lt;Person&gt;(1)</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteById``1(System.Data.IDbConnection,System.Object,System.UInt64)">
            <summary>
            Delete 1 row by the PrimaryKey where the rowVersion matches the optimistic concurrency field. 
            Will throw <exception cref="T:ServiceStack.Data.OptimisticConcurrencyException">RowModefiedExeption</exception> if the 
            row does not exist or has a different row version.
            E.g: <para>db.DeleteById&lt;Person&gt;(1)</para>
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteByIds``1(System.Data.IDbConnection,System.Collections.IEnumerable)">
            <summary>
            Delete all rows identified by the PrimaryKeys. E.g:
            <para>db.DeleteById&lt;Person&gt;(new[] { 1, 2, 3 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteAll``1(System.Data.IDbConnection)">
            <summary>
            Delete all rows in the generic table type. E.g:
            <para>db.DeleteAll&lt;Person&gt;()</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Delete all rows provided. E.g:
            <para>db.DeleteAll&lt;Person&gt;(people)</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.DeleteAll(System.Data.IDbConnection,System.Type)">
            <summary>
            Delete all rows in the runtime table type. E.g:
            <para>db.DeleteAll(typeof(Person))</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>
            Delete rows using a SqlFormat filter. E.g:
            <para>db.Delete&lt;Person&gt;("Age > @age", new { age = 42 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Delete(System.Data.IDbConnection,System.Type,System.String,System.Object)">
            <summary>
            Delete rows using a SqlFormat filter. E.g:
            <para>db.Delete&lt;Person&gt;("Age > @age", new { age = 42 })</para>
            </summary>
            <returns>number of rows deleted</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Save``1(System.Data.IDbConnection,``0,System.Boolean)">
            <summary>
            Insert a new row or update existing row. Returns true if a new row was inserted. 
            Optional references param decides whether to save all related references as well. E.g:
            <para>db.Save(customer, references:true)</para>
            </summary>
            <returns>true if a row was inserted; false if it was updated</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.Save``1(System.Data.IDbConnection,``0[])">
            <summary>
            Insert new rows or update existing rows. Return number of rows added E.g:
            <para>db.Save(new Person { Id = 10, FirstName = "Amy", LastName = "Winehouse", Age = 27 })</para>
            </summary>
            <returns>number of rows added</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.SaveAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Insert new rows or update existing rows. Return number of rows added E.g:
            <para>db.SaveAll(new [] { new Person { Id = 10, FirstName = "Amy", LastName = "Winehouse", Age = 27 } })</para>
            </summary>
            <returns>number of rows added</returns>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.SaveAllReferences``1(System.Data.IDbConnection,``0)">
            <summary>
            Populates all related references on the instance with its primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveAllReferences(customer)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.SaveReferences``2(System.Data.IDbConnection,``0,``1[])">
            <summary>
            Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveReference(customer, customer.Orders)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.SaveReferences``2(System.Data.IDbConnection,``0,System.Collections.Generic.List{``1})">
            <summary>
            Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveReference(customer, customer.Orders)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.SaveReferences``2(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Populates the related references with the instance primary key and saves them. Uses '(T)Id' naming convention. E.g:
            <para>db.SaveReferences(customer, customer.Orders)</para> 
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.ToUpdateStatement``1(System.Data.IDbConnection,``0,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Generates inline UPDATE SQL Statement
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteWriteApi.ToInsertStatement``1(System.Data.IDbConnection,``0,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Generates inline INSERT SQL Statement
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteConnection">
            <summary>
            Wrapper IDbConnection class to allow for connection sharing, mocking, etc.
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLiteConnectionFactory">
            <summary>
            Allow for mocking and unit testing by providing non-disposing 
            connection factory with injectable IDbCommand and IDbTransaction proxies
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnectionFactory.AlwaysReturnCommand">
            <summary>
            Force the IDbConnection to always return this IDbCommand
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.OrmLiteConnectionFactory.AlwaysReturnTransaction">
            <summary>
            Force the IDbConnection to always return this IDbTransaction
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.Open(ServiceStack.Data.IDbConnectionFactory)">
            <summary>
            Alias for OpenDbConnection
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.OrmLiteConnectionFactoryExtensions.Open(ServiceStack.Data.IDbConnectionFactory,System.String)">
            <summary>
            Alias for OpenDbConnection
            </summary>
        </member>
        <member name="T:ServiceStack.OrmLite.OrmLitePersistenceProvider">
            <summary>
            Allow for code-sharing between OrmLite, IPersistenceProvider and ICacheClient
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetConverter(System.Type)">
            <summary>
            Gets the explicit Converter registered for a specific type
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetConverterBestMatch(System.Type)">
            <summary>
            Return best matching converter, falling back to Enum, Value or Ref Type Converters
            </summary>
        </member>
        <member name="M:ServiceStack.OrmLite.IOrmLiteDialectProvider.GetQuotedValue(System.String)">
            <summary>
            Quote the string so that it can be used inside an SQL-expression
            Escape quotes inside the string
            </summary>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.OrmLite.SqlBuilder">
            <summary>
            Nice SqlBuilder class by @samsaffron from Dapper.Contrib:
            http://samsaffron.com/archive/2011/09/05/Digging+ourselves+out+of+the+mess+Linq-2-SQL+created
            Modified to work in .NET 3.5
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.SelectItem.Alias">
            <summary>
            Unquoted alias for the column or expression being selected.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.SelectItemExpression.SelectExpression">
            <summary>
            The SQL expression being selected, including any necessary quoting.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.SelectItemColumn.ColumnName">
            <summary>
            Unquoted column name being selected.
            </summary>
        </member>
        <member name="P:ServiceStack.OrmLite.SelectItemColumn.QuotedTableAlias">
            <summary>
            Table name or alias used to prefix the column name, if any. Already quoted.
            </summary>
        </member>
    </members>
</doc>
