<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 11.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="11.0">
 <Namespaces>
  <Namespace Name="ServiceStack.Data">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'ServiceStack.Data' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="ServiceStack.Logging">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'ServiceStack.Logging' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="ServiceStack.Reflection">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'ServiceStack.Reflection' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="C:\src\ServiceStack\src\ServiceStack.Common\bin\Release\ServiceStack.Common.dll">
   <Modules>
    <Module Name="servicestack.common.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'ServiceStack.Common.dll' with a strong name key.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'ServiceStack.Common.dll' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="">
       <Types>
        <Type Name="DictionaryExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="DeclareTypesInNamespaces" Category="Microsoft.Design" CheckId="CA1050" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">'DictionaryExtensions' should be declared inside a namespace.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ConvertAll`3(System.Collections.Generic.IDictionary`2&lt;!!1,!!2&gt;,System.Func`3&lt;!!1,!!2,!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="37">Change 'List&lt;T&gt;' in 'DictionaryExtensions.ConvertAll&lt;T, K, V&gt;(IDictionary&lt;K, V&gt;, Func&lt;K, V, T&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="37">In member 'DictionaryExtensions.ConvertAll&lt;T, K, V&gt;(IDictionary&lt;K, V&gt;, Func&lt;K, V, T&gt;)', correct the casing of 'Fn' in parameter name 'createFn' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="37">In method 'DictionaryExtensions.ConvertAll&lt;T, K, V&gt;(IDictionary&lt;K, V&gt;, Func&lt;K, V, T&gt;)', correct the spelling of 'Fn' in parameter name 'createFn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="K" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="37">On method 'DictionaryExtensions.ConvertAll&lt;T, K, V&gt;(IDictionary&lt;K, V&gt;, Func&lt;K, V, T&gt;)', consider providing a more meaningful name than generic type parameter name 'K'.</Issue>
            </Message>
            <Message Id="V" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="37">On method 'DictionaryExtensions.ConvertAll&lt;T, K, V&gt;(IDictionary&lt;K, V&gt;, Func&lt;K, V, T&gt;)', consider providing a more meaningful name than generic type parameter name 'V'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="37">On method 'DictionaryExtensions.ConvertAll&lt;T, K, V&gt;(IDictionary&lt;K, V&gt;, Func&lt;K, V, T&gt;)', prefix generic type parameter name 'K' with 'T'.</Issue>
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="37">On method 'DictionaryExtensions.ConvertAll&lt;T, K, V&gt;(IDictionary&lt;K, V&gt;, Func&lt;K, V, T&gt;)', prefix generic type parameter name 'V' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ForEach`2(System.Collections.Generic.Dictionary`2&lt;!!0,!!1&gt;,System.Action`2&lt;!!0,!!1&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="14">In member 'DictionaryExtensions.ForEach&lt;TKey, TValue&gt;(this Dictionary&lt;TKey, TValue&gt;, Action&lt;TKey, TValue&gt;)', correct the casing of 'Fn' in parameter name 'onEachFn' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="14">In method 'DictionaryExtensions.ForEach&lt;TKey, TValue&gt;(this Dictionary&lt;TKey, TValue&gt;, Action&lt;TKey, TValue&gt;)', correct the spelling of 'Fn' in parameter name 'onEachFn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="14">In externally visible method 'DictionaryExtensions.ForEach&lt;TKey, TValue&gt;(this Dictionary&lt;TKey, TValue&gt;, Action&lt;TKey, TValue&gt;)', validate parameter 'dictionary' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="16">In externally visible method 'DictionaryExtensions.ForEach&lt;TKey, TValue&gt;(this Dictionary&lt;TKey, TValue&gt;, Action&lt;TKey, TValue&gt;)', validate parameter 'onEachFn' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetOrAdd`2(System.Collections.Generic.Dictionary`2&lt;!!0,!!1&gt;,!!0,System.Func`2&lt;!!0,!!1&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="45">In member 'DictionaryExtensions.GetOrAdd&lt;K, V&gt;(this Dictionary&lt;K, V&gt;, K, Func&lt;K, V&gt;)', correct the casing of 'Fn' in parameter name 'createFn' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="45">In method 'DictionaryExtensions.GetOrAdd&lt;K, V&gt;(this Dictionary&lt;K, V&gt;, K, Func&lt;K, V&gt;)', correct the spelling of 'Fn' in parameter name 'createFn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="K" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="45">On method 'DictionaryExtensions.GetOrAdd&lt;K, V&gt;(this Dictionary&lt;K, V&gt;, K, Func&lt;K, V&gt;)', consider providing a more meaningful name than generic type parameter name 'K'.</Issue>
            </Message>
            <Message Id="V" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="45">On method 'DictionaryExtensions.GetOrAdd&lt;K, V&gt;(this Dictionary&lt;K, V&gt;, K, Func&lt;K, V&gt;)', consider providing a more meaningful name than generic type parameter name 'V'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="45">On method 'DictionaryExtensions.GetOrAdd&lt;K, V&gt;(this Dictionary&lt;K, V&gt;, K, Func&lt;K, V&gt;)', prefix generic type parameter name 'K' with 'T'.</Issue>
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="45">On method 'DictionaryExtensions.GetOrAdd&lt;K, V&gt;(this Dictionary&lt;K, V&gt;, K, Func&lt;K, V&gt;)', prefix generic type parameter name 'V' with 'T'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="48">In externally visible method 'DictionaryExtensions.GetOrAdd&lt;K, V&gt;(this Dictionary&lt;K, V&gt;, K, Func&lt;K, V&gt;)', validate parameter 'map' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="49">In externally visible method 'DictionaryExtensions.GetOrAdd&lt;K, V&gt;(this Dictionary&lt;K, V&gt;, K, Func&lt;K, V&gt;)', validate parameter 'createFn' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValueOrDefault`2(System.Collections.Generic.Dictionary`2&lt;!!1,!!0&gt;,!!1)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="9">In externally visible method 'DictionaryExtensions.GetValueOrDefault&lt;TValue, TKey&gt;(this Dictionary&lt;TKey, TValue&gt;, TKey)', validate parameter 'dictionary' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnorderedEquivalentTo`2(System.Collections.Generic.IDictionary`2&lt;!!0,!!1&gt;,System.Collections.Generic.IDictionary`2&lt;!!0,!!1&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="K" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="22">On method 'DictionaryExtensions.UnorderedEquivalentTo&lt;K, V&gt;(this IDictionary&lt;K, V&gt;, IDictionary&lt;K, V&gt;)', consider providing a more meaningful name than generic type parameter name 'K'.</Issue>
            </Message>
            <Message Id="V" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="22">On method 'DictionaryExtensions.UnorderedEquivalentTo&lt;K, V&gt;(this IDictionary&lt;K, V&gt;, IDictionary&lt;K, V&gt;)', consider providing a more meaningful name than generic type parameter name 'V'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="22">On method 'DictionaryExtensions.UnorderedEquivalentTo&lt;K, V&gt;(this IDictionary&lt;K, V&gt;, IDictionary&lt;K, V&gt;)', prefix generic type parameter name 'K' with 'T'.</Issue>
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DictionaryExtensions.cs" Line="22">On method 'DictionaryExtensions.UnorderedEquivalentTo&lt;K, V&gt;(this IDictionary&lt;K, V&gt;, IDictionary&lt;K, V&gt;)', prefix generic type parameter name 'V' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="ServiceStack">
       <Types>
        <Type Name="ActionExecExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ExecAllAndWait(System.Collections.Generic.ICollection`1&lt;System.Action&gt;,System.TimeSpan)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ActionExecExtensions.cs" Line="17">In externally visible method 'ActionExecExtensions.ExecAllAndWait(this ICollection&lt;Action&gt;, TimeSpan)', validate parameter 'actions' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecAsync(System.Collections.Generic.IEnumerable`1&lt;System.Action&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ActionExecExtensions.cs" Line="29">Change 'List&lt;WaitHandle&gt;' in 'ActionExecExtensions.ExecAsync(this IEnumerable&lt;Action&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ActionExecExtensions.cs" Line="30">In externally visible method 'ActionExecExtensions.ExecAsync(this IEnumerable&lt;Action&gt;)', validate parameter 'actions' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WaitAll(System.Collections.Generic.ICollection`1&lt;System.Threading.WaitHandle&gt;,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Ms" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ActionExecExtensions.cs" Line="51">In member 'ActionExecExtensions.WaitAll(this ICollection&lt;WaitHandle&gt;, int)', correct the casing of 'Ms' in parameter name 'timeoutMs' by changing it to 'MS'.</Issue>
            </Message>
            <Message Id="Ms" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ActionExecExtensions.cs" Line="51">In method 'ActionExecExtensions.WaitAll(this ICollection&lt;WaitHandle&gt;, int)', correct the spelling of 'Ms' in parameter name 'timeoutMs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WaitAll(System.Collections.Generic.List`1&lt;System.IAsyncResult&gt;,System.TimeSpan)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ActionExecExtensions.cs" Line="62">Change 'List&lt;IAsyncResult&gt;' in 'ActionExecExtensions.WaitAll(this List&lt;IAsyncResult&gt;, TimeSpan)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ActionExecExtensions.cs" Line="62">In externally visible method 'ActionExecExtensions.WaitAll(this List&lt;IAsyncResult&gt;, TimeSpan)', validate parameter 'asyncResults' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WaitAll(System.Collections.Generic.List`1&lt;System.Threading.WaitHandle&gt;,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ActionExecExtensions.cs" Line="46">Change 'List&lt;WaitHandle&gt;' in 'ActionExecExtensions.WaitAll(this List&lt;WaitHandle&gt;, int)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="Ms" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ActionExecExtensions.cs" Line="46">In member 'ActionExecExtensions.WaitAll(this List&lt;WaitHandle&gt;, int)', correct the casing of 'Ms' in parameter name 'timeoutMs' by changing it to 'MS'.</Issue>
            </Message>
            <Message Id="Ms" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ActionExecExtensions.cs" Line="46">In method 'ActionExecExtensions.WaitAll(this List&lt;WaitHandle&gt;, int)', correct the spelling of 'Ms' in parameter name 'timeoutMs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ActionExecExtensions.cs" Line="46">In externally visible method 'ActionExecExtensions.WaitAll(this List&lt;WaitHandle&gt;, int)', validate parameter 'waitHandles' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WaitAll(System.Threading.WaitHandle[],System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="timeOut" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ActionExecExtensions.cs" Line="74">In member 'ActionExecExtensions.WaitAll(WaitHandle[], int)', the compound word 'timeOut' in parameter name 'timeOutMs' exists as a discrete term. If your usage is intended to be single word, case it as 'timeout' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Ms" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ActionExecExtensions.cs" Line="74">In member 'ActionExecExtensions.WaitAll(WaitHandle[], int)', correct the casing of 'Ms' in parameter name 'timeOutMs' by changing it to 'MS'.</Issue>
            </Message>
            <Message Id="Ms" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ActionExecExtensions.cs" Line="74">In method 'ActionExecExtensions.WaitAll(WaitHandle[], int)', correct the spelling of 'Ms' in parameter name 'timeOutMs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AssertExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ThrowIfNull(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="AssertExtensions.cs" Line="19">In member 'AssertExtensions.ThrowIfNull(this object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ThrowIfNull(System.Object,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="AssertExtensions.cs" Line="24">In member 'AssertExtensions.ThrowIfNull(this object, string)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ThrowIfNullOrEmpty(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="AssertExtensions.cs" Line="30">In method 'AssertExtensions.ThrowIfNullOrEmpty(this string)', correct the spelling of 'str' in parameter name 'strValue' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ThrowIfNullOrEmpty(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="AssertExtensions.cs" Line="35">In method 'AssertExtensions.ThrowIfNullOrEmpty(this string, string)', correct the spelling of 'str' in parameter name 'strValue' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ThrowOnFirstNull(System.Object[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="objs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="AssertExtensions.cs" Line="11">In method 'AssertExtensions.ThrowOnFirstNull(params object[])', correct the spelling of 'objs' in parameter name 'objs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="objs" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="AssertExtensions.cs" Line="11">In member 'AssertExtensions.ThrowOnFirstNull(params object[])', consider replacing the data type identifier 'objs' in parameter name 'objs' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="AssertExtensions.cs" Line="11">In externally visible method 'AssertExtensions.ThrowOnFirstNull(params object[])', validate parameter 'objs' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AssertUtils" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in type name 'AssertUtils'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AreNotNull(System.Collections.Generic.IDictionary`2&lt;System.String,System.Object&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="AssertUtils.cs" Line="26">In externally visible method 'AssertUtils.AreNotNull(IDictionary&lt;string, object&gt;)', validate parameter 'fieldMap' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ByteArrayExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AreEqual(System.Byte[],System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ByteArrayExtensions.cs" Line="7">In method 'ByteArrayExtensions.AreEqual(this byte[], byte[])', correct the spelling of 'b' in parameter name 'b1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ByteArrayExtensions.cs" Line="7">In method 'ByteArrayExtensions.AreEqual(this byte[], byte[])', correct the spelling of 'b' in parameter name 'b2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CommandsUtils" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in type name 'CommandsUtils'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'CommandsUtils' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ExecuteAsyncCommandExec(System.Collections.Generic.IEnumerable`1&lt;ServiceStack.Commands.ICommandExec&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CommandsUtils.cs" Line="104">Change 'List&lt;WaitHandle&gt;' in 'CommandsUtils.ExecuteAsyncCommandExec(IEnumerable&lt;ICommandExec&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CommandsUtils.cs" Line="105">In externally visible method 'CommandsUtils.ExecuteAsyncCommandExec(IEnumerable&lt;ICommandExec&gt;)', validate parameter 'commands' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteAsyncCommandExec(System.TimeSpan,System.Collections.Generic.IEnumerable`1&lt;ServiceStack.Commands.ICommandExec&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="timeout" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CommandsUtils.cs" Line="87">Parameter 'timeout' of 'CommandsUtils.ExecuteAsyncCommandExec(TimeSpan, IEnumerable&lt;ICommandExec&gt;)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CommandsUtils.cs" Line="87">In externally visible method 'CommandsUtils.ExecuteAsyncCommandExec(TimeSpan, IEnumerable&lt;ICommandExec&gt;)', validate parameter 'commands' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteAsyncCommandList`1(System.TimeSpan,ServiceStack.Commands.ICommandList`1&lt;!!0&gt;[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CommandsUtils.cs" Line="18">Change 'List&lt;T&gt;' in 'CommandsUtils.ExecuteAsyncCommandList&lt;T&gt;(TimeSpan, params ICommandList&lt;T&gt;[])' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteAsyncCommandList`1(System.TimeSpan,System.Collections.Generic.IEnumerable`1&lt;ServiceStack.Commands.ICommandList`1&lt;!!0&gt;&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CommandsUtils.cs" Line="23">Change 'List&lt;T&gt;' in 'CommandsUtils.ExecuteAsyncCommandList&lt;T&gt;(TimeSpan, IEnumerable&lt;ICommandList&lt;T&gt;&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CommandsUtils.cs" Line="23">Consider a design where 'CommandsUtils.ExecuteAsyncCommandList&lt;T&gt;(TimeSpan, IEnumerable&lt;ICommandList&lt;T&gt;&gt;)' doesn't nest generic type 'IEnumerable&lt;ICommandList&lt;T&gt;&gt;'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CommandsUtils.cs" Line="25">In externally visible method 'CommandsUtils.ExecuteAsyncCommandList&lt;T&gt;(TimeSpan, IEnumerable&lt;ICommandList&lt;T&gt;&gt;)', validate parameter 'commands' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CryptUtils" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in type name 'CryptUtils'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CreatePublicAndPrivateKeyPair()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CryptUtils.cs" Line="178">In method 'CryptUtils.CreatePublicAndPrivateKeyPair()', call System.IDisposable.Dispose on object 'rsaProvider' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreatePublicAndPrivateKeyPair(ServiceStack.RsaKeyLengths)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CryptUtils.cs" Line="164">Replace method 'CryptUtils.CreatePublicAndPrivateKeyPair(RsaKeyLengths)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CryptUtils.cs" Line="164">In method 'CryptUtils.CreatePublicAndPrivateKeyPair(RsaKeyLengths)', call System.IDisposable.Dispose on object 'rsaProvider' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Decrypt(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CryptUtils.cs" Line="39">Method 'CryptUtils.Decrypt(this string)' passes 'No KeyPair given for encryption in CryptUtils' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Decrypt(System.String,System.String,ServiceStack.RsaKeyLengths)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CryptUtils.cs" Line="134">Replace method 'CryptUtils.Decrypt(string, string, RsaKeyLengths)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CryptUtils.cs" Line="136">In method 'CryptUtils.Decrypt(string, string, RsaKeyLengths)', call System.IDisposable.Dispose on object 'rsaCryptoServiceProvider' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CryptUtils.cs" Line="142">In externally visible method 'CryptUtils.Decrypt(string, string, RsaKeyLengths)', validate parameter 'data' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Encrypt(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CryptUtils.cs" Line="32">Method 'CryptUtils.Encrypt(this string)' passes 'No KeyPair given for encryption in CryptUtils' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Encrypt(System.String,System.String,ServiceStack.RsaKeyLengths)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CryptUtils.cs" Line="66">Replace method 'CryptUtils.Encrypt(string, string, RsaKeyLengths)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CryptUtils.cs" Line="97">In method 'CryptUtils.Encrypt(string, string, RsaKeyLengths)', call System.IDisposable.Dispose on object 'SHA1.Create()' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="CryptUtils.cs" Line="81">In method 'CryptUtils.Encrypt(string, string, RsaKeyLengths)', call System.IDisposable.Dispose on object 'rsaCryptoServiceProvider' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#KeyPair" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'CryptUtils.KeyPair' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Length" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'CryptUtils.Length' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DirectoryInfoExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetMatchingFiles(System.IO.DirectoryInfo,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DirectoryInfoExtensions.cs" Line="11">Consider changing the type of parameter 'rootDirPath' in 'DirectoryInfoExtensions.GetMatchingFiles(this DirectoryInfo, string)' from 'DirectoryInfo' to its base type 'FileSystemInfo'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DirectoryInfoExtensions.cs" Line="11">In method 'DirectoryInfoExtensions.GetMatchingFiles(this DirectoryInfo, string)', correct the spelling of 'Dir' in parameter name 'rootDirPath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DirectoryInfoExtensions.cs" Line="11">In externally visible method 'DirectoryInfoExtensions.GetMatchingFiles(this DirectoryInfo, string)', validate parameter 'rootDirPath' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMatchingFiles(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'DirectoryInfoExtensions.GetMatchingFiles(string, string)', correct the spelling of 'Dir' in parameter name 'rootDirPath' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DisposableExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose(System.Collections.Generic.IEnumerable`1&lt;System.IDisposable&gt;,ServiceStack.Logging.ILog)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DisposableExtensions.cs" Line="17">Modify 'DisposableExtensions.Dispose(this IEnumerable&lt;IDisposable&gt;, ILog)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DisposableExtensions.cs" Line="21">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'DisposableExtensions.Dispose(this IEnumerable&lt;IDisposable&gt;, ILog)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DisposableExtensions.cs" Line="11">In externally visible method 'DisposableExtensions.Dispose(this IEnumerable&lt;IDisposable&gt;, ILog)', validate parameter 'resources' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Run`1(!!0,System.Action`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="DisposableExtensions.cs" Line="42">In externally visible method 'DisposableExtensions.Run&lt;T&gt;(this T, Action&lt;T&gt;)', validate parameter 'runActionThenDispose' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EnumerableExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Each`1(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;,System.Action`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="24">In externally visible method 'EnumerableExtensions.Each&lt;T&gt;(this IEnumerable&lt;T&gt;, Action&lt;T&gt;)', validate parameter 'action' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Each`1(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;,System.Action`2&lt;System.Int32,!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="35">In externally visible method 'EnumerableExtensions.Each&lt;T&gt;(this IEnumerable&lt;T&gt;, Action&lt;int, T&gt;)', validate parameter 'action' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FirstNonDefault`1(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="86">In externally visible method 'EnumerableExtensions.FirstNonDefault&lt;T&gt;(this IEnumerable&lt;T&gt;)', validate parameter 'values' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FirstNonDefaultOrEmpty(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="77">In externally visible method 'EnumerableExtensions.FirstNonDefaultOrEmpty(this IEnumerable&lt;string&gt;)', validate parameter 'values' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Map`1(System.Collections.IEnumerable,System.Func`2&lt;System.Object,!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="54">Change 'List&lt;To&gt;' in 'EnumerableExtensions.Map&lt;To&gt;(this IEnumerable, Func&lt;object, To&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="54">On method 'EnumerableExtensions.Map&lt;To&gt;(this IEnumerable, Func&lt;object, To&gt;)', prefix generic type parameter name 'To' with 'T'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="60">In externally visible method 'EnumerableExtensions.Map&lt;To&gt;(this IEnumerable, Func&lt;object, To&gt;)', validate parameter 'converter' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Map`2(System.Collections.Generic.IEnumerable`1&lt;!!1&gt;,System.Func`2&lt;!!1,!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="41">Change 'List&lt;To&gt;' in 'EnumerableExtensions.Map&lt;To, From&gt;(this IEnumerable&lt;From&gt;, Func&lt;From, To&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="41">On method 'EnumerableExtensions.Map&lt;To, From&gt;(this IEnumerable&lt;From&gt;, Func&lt;From, To&gt;)', prefix generic type parameter name 'From' with 'T'.</Issue>
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="41">On method 'EnumerableExtensions.Map&lt;To, From&gt;(this IEnumerable&lt;From&gt;, Func&lt;From, To&gt;)', prefix generic type parameter name 'To' with 'T'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="47">In externally visible method 'EnumerableExtensions.Map&lt;To, From&gt;(this IEnumerable&lt;From&gt;, Func&lt;From, To&gt;)', validate parameter 'converter' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToDictionary`3(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;,System.Func`2&lt;!!0,System.Collections.Generic.KeyValuePair`2&lt;!!1,!!2&gt;&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="150">Consider a design where 'EnumerableExtensions.ToDictionary&lt;T, TKey, TValue&gt;(this IEnumerable&lt;T&gt;, Func&lt;T, KeyValuePair&lt;TKey, TValue&gt;&gt;)' doesn't nest generic type 'Func&lt;T, KeyValuePair&lt;TKey, TValue&gt;&gt;'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="151">In externally visible method 'EnumerableExtensions.ToDictionary&lt;T, TKey, TValue&gt;(this IEnumerable&lt;T&gt;, Func&lt;T, KeyValuePair&lt;TKey, TValue&gt;&gt;)', validate parameter 'list' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="153">In externally visible method 'EnumerableExtensions.ToDictionary&lt;T, TKey, TValue&gt;(this IEnumerable&lt;T&gt;, Func&lt;T, KeyValuePair&lt;TKey, TValue&gt;&gt;)', validate parameter 'map' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToObjects`1(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="67">Change 'List&lt;object&gt;' in 'EnumerableExtensions.ToObjects&lt;T&gt;(this IEnumerable&lt;T&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="68">In externally visible method 'EnumerableExtensions.ToObjects&lt;T&gt;(this IEnumerable&lt;T&gt;)', validate parameter 'items' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToSafeDictionary`2(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;,System.Func`2&lt;!!0,!!1&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="expr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="137">In method 'EnumerableExtensions.ToSafeDictionary&lt;T, TKey&gt;(this IEnumerable&lt;T&gt;, Func&lt;T, TKey&gt;)', correct the spelling of 'expr' in parameter name 'expr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumerableExtensions.cs" Line="142">In externally visible method 'EnumerableExtensions.ToSafeDictionary&lt;T, TKey&gt;(this IEnumerable&lt;T&gt;, Func&lt;T, TKey&gt;)', validate parameter 'expr' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EnumExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add`1(System.Enum,!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ServiceStack.StringExtensions.Fmt(System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumExtensions.cs" Line="106">Method 'EnumExtensions.Add&lt;T&gt;(this Enum, T)' passes a literal string as parameter 'text' of a call to 'StringExtensions.Fmt(this string, params object[])'. Retrieve the following string(s) from a resource table instead: "Enums of type {0}".</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumExtensions.cs" Line="94">In externally visible method 'EnumExtensions.Add&lt;T&gt;(this Enum, T)', validate parameter 'enum' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTypeCode(System.Enum)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumExtensions.cs" Line="53">In externally visible method 'EnumExtensions.GetTypeCode(this Enum)', validate parameter 'enum' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Has`1(System.Enum,!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ServiceStack.StringExtensions.Fmt(System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumExtensions.cs" Line="70">Method 'EnumExtensions.Has&lt;T&gt;(this Enum, T)' passes a literal string as parameter 'text' of a call to 'StringExtensions.Fmt(this string, params object[])'. Retrieve the following string(s) from a resource table instead: "Enums of type {0}".</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumExtensions.cs" Line="58">In externally visible method 'EnumExtensions.Has&lt;T&gt;(this Enum, T)', validate parameter 'enum' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Is`1(System.Enum,!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ServiceStack.StringExtensions.Fmt(System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumExtensions.cs" Line="88">Method 'EnumExtensions.Is&lt;T&gt;(this Enum, T)' passes a literal string as parameter 'text' of a call to 'StringExtensions.Fmt(this string, params object[])'. Retrieve the following string(s) from a resource table instead: "Enums of type {0}".</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumExtensions.cs" Line="76">In externally visible method 'EnumExtensions.Is&lt;T&gt;(this Enum, T)', validate parameter 'enum' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove`1(System.Enum,!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ServiceStack.StringExtensions.Fmt(System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumExtensions.cs" Line="124">Method 'EnumExtensions.Remove&lt;T&gt;(this Enum, T)' passes a literal string as parameter 'text' of a call to 'StringExtensions.Fmt(this string, params object[])'. Retrieve the following string(s) from a resource table instead: "Enums of type {0}".</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumExtensions.cs" Line="112">In externally visible method 'EnumExtensions.Remove&lt;T&gt;(this Enum, T)', validate parameter 'enum' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToDescription(System.Enum)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumExtensions.cs" Line="27">In externally visible method 'EnumExtensions.ToDescription(this Enum)', validate parameter 'enum' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToList(System.Enum)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumExtensions.cs" Line="45">Change 'List&lt;string&gt;' in 'EnumExtensions.ToList(this Enum)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="EnumExtensions.cs" Line="45">In externally visible method 'EnumExtensions.ToList(this Enum)', validate parameter 'enum' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExecExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ExecAll`1(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;,System.Action`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="24">Modify 'ExecExtensions.ExecAll&lt;T&gt;(this IEnumerable&lt;T&gt;, Action&lt;T&gt;)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="18">In externally visible method 'ExecExtensions.ExecAll&lt;T&gt;(this IEnumerable&lt;T&gt;, Action&lt;T&gt;)', validate parameter 'instances' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="22">In externally visible method 'ExecExtensions.ExecAll&lt;T&gt;(this IEnumerable&lt;T&gt;, Action&lt;T&gt;)', validate parameter 'action' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecAllWithFirstOut`2(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;,System.Func`2&lt;!!0,!!1&gt;,!!1&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="43">Modify 'ExecExtensions.ExecAllWithFirstOut&lt;T, TReturn&gt;(this IEnumerable&lt;T&gt;, Func&lt;T, TReturn&gt;, ref TReturn)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="33">Consider a design that does not require that 'firstResult' be a reference parameter.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="33">In externally visible method 'ExecExtensions.ExecAllWithFirstOut&lt;T, TReturn&gt;(this IEnumerable&lt;T&gt;, Func&lt;T, TReturn&gt;, ref TReturn)', validate parameter 'instances' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="37">In externally visible method 'ExecExtensions.ExecAllWithFirstOut&lt;T, TReturn&gt;(this IEnumerable&lt;T&gt;, Func&lt;T, TReturn&gt;, ref TReturn)', validate parameter 'action' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecReturnFirstWithResult`2(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;,System.Func`2&lt;!!0,!!1&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="62">Modify 'ExecExtensions.ExecReturnFirstWithResult&lt;T, TReturn&gt;(this IEnumerable&lt;T&gt;, Func&lt;T, TReturn&gt;)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="52">In externally visible method 'ExecExtensions.ExecReturnFirstWithResult&lt;T, TReturn&gt;(this IEnumerable&lt;T&gt;, Func&lt;T, TReturn&gt;)', validate parameter 'instances' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="56">In externally visible method 'ExecExtensions.ExecReturnFirstWithResult&lt;T, TReturn&gt;(this IEnumerable&lt;T&gt;, Func&lt;T, TReturn&gt;)', validate parameter 'action' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.Type,System.String,System.Exception)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="13">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ExecExtensions.LogError(Type, string, Exception)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="13">In externally visible method 'ExecExtensions.LogError(Type, string, Exception)', validate parameter 'declaringType' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="13">In externally visible method 'ExecExtensions.LogError(Type, string, Exception)', validate parameter 'ex' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RetryOnException(System.Action,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="120">In externally visible method 'ExecExtensions.RetryOnException(Action, int)', validate parameter 'action' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RetryOnException(System.Action,System.Nullable`1&lt;System.TimeSpan&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="timeOut" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="91">In member 'ExecExtensions.RetryOnException(Action, TimeSpan?)', the compound word 'timeOut' in parameter name 'timeOut' exists as a discrete term. If your usage is intended to be single word, case it as 'timeout' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="103">Modify 'ExecExtensions.RetryOnException(Action, TimeSpan?)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="111">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExecExtensions.RetryOnException(Action, TimeSpan?)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="100">In externally visible method 'ExecExtensions.RetryOnException(Action, TimeSpan?)', validate parameter 'action' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RetryUntilTrue(System.Func`1&lt;System.Boolean&gt;,System.Nullable`1&lt;System.TimeSpan&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="timeOut" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="73">In member 'ExecExtensions.RetryUntilTrue(Func&lt;bool&gt;, TimeSpan?)', the compound word 'timeOut' in parameter name 'timeOut' exists as a discrete term. If your usage is intended to be single word, case it as 'timeout' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="86">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExecExtensions.RetryUntilTrue(Func&lt;bool&gt;, TimeSpan?)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ExecExtensions.cs" Line="79">In externally visible method 'ExecExtensions.RetryUntilTrue(Func&lt;bool&gt;, TimeSpan?)', validate parameter 'action' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FuncUtils" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in type name 'FuncUtils'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#TryExec(System.Action)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="FuncUtils.cs" Line="23">Modify 'FuncUtils.TryExec(Action)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="FuncUtils.cs" Line="20">In externally visible method 'FuncUtils.TryExec(Action)', validate parameter 'action' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TryExec`1(System.Func`1&lt;!!0&gt;,!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="FuncUtils.cs" Line="41">Modify 'FuncUtils.TryExec&lt;T&gt;(Func&lt;T&gt;, T)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="defaultValue" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="FuncUtils.cs" Line="39">Parameter 'defaultValue' of 'FuncUtils.TryExec&lt;T&gt;(Func&lt;T&gt;, T)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="FuncUtils.cs" Line="39">In externally visible method 'FuncUtils.TryExec&lt;T&gt;(Func&lt;T&gt;, T)', validate parameter 'func' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WaitWhile(System.Func`1&lt;System.Boolean&gt;,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="FuncUtils.cs" Line="51">Replace method 'FuncUtils.WaitWhile(Func&lt;bool&gt;, int, int)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="millsecond" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="FuncUtils.cs" Line="51">In method 'FuncUtils.WaitWhile(Func&lt;bool&gt;, int, int)', correct the spelling of 'millsecond' in parameter name 'millsecondPollPeriod' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="FuncUtils.cs" Line="52">In externally visible method 'FuncUtils.WaitWhile(Func&lt;bool&gt;, int, int)', validate parameter 'condition' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HasId`1" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="94">Initialize all static fields in 'HasId&lt;TEntity&gt;' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HasPropertyId`1" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="74">Initialize all static fields in 'HasPropertyId&lt;TEntity&gt;' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IdUtils" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in type name 'IdUtils'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CreateCacheKeyPath`1(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="183">Consider a design where 'IdUtils.CreateCacheKeyPath&lt;T&gt;(string)' doesn't require explicit type parameter 'T' in any call to it.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="193">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'IdUtils.CreateCacheKeyPath&lt;T&gt;(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="183">In externally visible method 'IdUtils.CreateCacheKeyPath&lt;T&gt;(string)', validate parameter 'idValue' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateUrn(System.Type,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="172">Consider changing the type of parameter 'type' in 'IdUtils.CreateUrn(Type, object)' from 'Type' to its base type 'MemberInfo'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="172">In method 'IdUtils.CreateUrn(Type, object)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="172">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'IdUtils.CreateUrn(Type, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="172">Change the return type of 'IdUtils.CreateUrn(Type, object)' from string to System.Uri.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="172">In externally visible method 'IdUtils.CreateUrn(Type, object)', validate parameter 'type' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateUrn`1(!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="178">In method 'IdUtils.CreateUrn&lt;T&gt;(this T)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="178">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'IdUtils.CreateUrn&lt;T&gt;(this T)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="177">Change the return type of 'IdUtils.CreateUrn&lt;T&gt;(this T)' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateUrn`1(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="167">Consider a design where 'IdUtils.CreateUrn&lt;T&gt;(object)' doesn't require explicit type parameter 'T' in any call to it.</Issue>
            </Message>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="167">In method 'IdUtils.CreateUrn&lt;T&gt;(object)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="167">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'IdUtils.CreateUrn&lt;T&gt;(object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="167">Change the return type of 'IdUtils.CreateUrn&lt;T&gt;(object)' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetObjectId(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="137">In externally visible method 'IdUtils.GetObjectId(this object)', validate parameter 'entity' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToSafePathCacheKey`1(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="152">Consider a design where 'IdUtils.ToSafePathCacheKey&lt;T&gt;(this string)' doesn't require explicit type parameter 'T' in any call to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToUrn`1(!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="147">Change the return type of 'IdUtils.ToUrn&lt;T&gt;(this T)' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToUrn`1(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="157">Consider a design where 'IdUtils.ToUrn&lt;T&gt;(this object)' doesn't require explicit type parameter 'T' in any call to it.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="157">Change the return type of 'IdUtils.ToUrn&lt;T&gt;(this object)' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IdUtils`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in type name 'IdUtils&lt;T&gt;'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="18">Initialize all static fields in 'IdUtils&lt;T&gt;' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetId(!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IdUtils.cs" Line="64">Remove 'IdUtils&lt;T&gt;.GetId(T)' from 'IdUtils&lt;T&gt;' or make it an instance member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IntExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Times(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change either member or parameter name 'times' so that one differs from the other.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Times(System.Int32,System.Action)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="30">In member 'IntExtensions.Times(this int, Action)', correct the casing of 'Fn' in parameter name 'actionFn' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="30">In method 'IntExtensions.Times(this int, Action)', correct the spelling of 'Fn' in parameter name 'actionFn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="30">Change either member or parameter name 'times' so that one differs from the other.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="32">In externally visible method 'IntExtensions.Times(this int, Action)', validate parameter 'actionFn' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Times(System.Int32,System.Action`1&lt;System.Int32&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="22">In member 'IntExtensions.Times(this int, Action&lt;int&gt;)', correct the casing of 'Fn' in parameter name 'actionFn' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="22">In method 'IntExtensions.Times(this int, Action&lt;int&gt;)', correct the spelling of 'Fn' in parameter name 'actionFn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="22">Change either member or parameter name 'times' so that one differs from the other.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="24">In externally visible method 'IntExtensions.Times(this int, Action&lt;int&gt;)', validate parameter 'actionFn' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Times`1(System.Int32,System.Func`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="38">Change 'List&lt;T&gt;' in 'IntExtensions.Times&lt;T&gt;(this int, Func&lt;T&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="38">In member 'IntExtensions.Times&lt;T&gt;(this int, Func&lt;T&gt;)', correct the casing of 'Fn' in parameter name 'actionFn' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="38">In method 'IntExtensions.Times&lt;T&gt;(this int, Func&lt;T&gt;)', correct the spelling of 'Fn' in parameter name 'actionFn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="38">Change either member or parameter name 'times' so that one differs from the other.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="41">In externally visible method 'IntExtensions.Times&lt;T&gt;(this int, Func&lt;T&gt;)', validate parameter 'actionFn' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Times`1(System.Int32,System.Func`2&lt;System.Int32,!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="48">Change 'List&lt;T&gt;' in 'IntExtensions.Times&lt;T&gt;(this int, Func&lt;int, T&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="48">In member 'IntExtensions.Times&lt;T&gt;(this int, Func&lt;int, T&gt;)', correct the casing of 'Fn' in parameter name 'actionFn' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="48">In method 'IntExtensions.Times&lt;T&gt;(this int, Func&lt;int, T&gt;)', correct the spelling of 'Fn' in parameter name 'actionFn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="48">Change either member or parameter name 'times' so that one differs from the other.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="51">In externally visible method 'IntExtensions.Times&lt;T&gt;(this int, Func&lt;int, T&gt;)', validate parameter 'actionFn' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TimesAsync(System.Int32,System.Action)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="68">Change 'List&lt;IAsyncResult&gt;' in 'IntExtensions.TimesAsync(this int, Action)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="68">In member 'IntExtensions.TimesAsync(this int, Action)', correct the casing of 'Fn' in parameter name 'actionFn' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="68">In method 'IntExtensions.TimesAsync(this int, Action)', correct the spelling of 'Fn' in parameter name 'actionFn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="71">In externally visible method 'IntExtensions.TimesAsync(this int, Action)', validate parameter 'actionFn' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TimesAsync(System.Int32,System.Action`1&lt;System.Int32&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="58">Change 'List&lt;IAsyncResult&gt;' in 'IntExtensions.TimesAsync(this int, Action&lt;int&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="58">In member 'IntExtensions.TimesAsync(this int, Action&lt;int&gt;)', correct the casing of 'Fn' in parameter name 'actionFn' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="58">In method 'IntExtensions.TimesAsync(this int, Action&lt;int&gt;)', correct the spelling of 'Fn' in parameter name 'actionFn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IntExtensions.cs" Line="61">In externally visible method 'IntExtensions.TimesAsync(this int, Action&lt;int&gt;)', validate parameter 'actionFn' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IPAddressExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetAllNetworkInterfaceIpv4Addresses()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="129">Modify 'IPAddressExtensions.GetAllNetworkInterfaceIpv4Addresses()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="112">Change 'IPAddressExtensions.GetAllNetworkInterfaceIpv4Addresses()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllNetworkInterfaceIpv6Addresses()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="157">Modify 'IPAddressExtensions.GetAllNetworkInterfaceIpv6Addresses()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="142">Change 'List&lt;IPAddress&gt;' in 'IPAddressExtensions.GetAllNetworkInterfaceIpv6Addresses()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="142">Change 'IPAddressExtensions.GetAllNetworkInterfaceIpv6Addresses()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetBroadcastAddress(System.Net.IPAddress,System.Net.IPAddress)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="19">In externally visible method 'IPAddressExtensions.GetBroadcastAddress(this IPAddress, IPAddress)', validate parameter 'address' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="20">In externally visible method 'IPAddressExtensions.GetBroadcastAddress(this IPAddress, IPAddress)', validate parameter 'subnetMask' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNetworkAddress(System.Net.IPAddress,System.Net.IPAddress)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="35">In externally visible method 'IPAddressExtensions.GetNetworkAddress(this IPAddress, IPAddress)', validate parameter 'address' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="36">In externally visible method 'IPAddressExtensions.GetNetworkAddress(this IPAddress, IPAddress)', validate parameter 'subnetMask' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNetworkAddressBytes(System.Byte[],System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Adress" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="43">In method 'IPAddressExtensions.GetNetworkAddressBytes(byte[], byte[])', correct the spelling of 'Adress' in parameter name 'ipAdressBytes' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="ip" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="43">In method 'IPAddressExtensions.GetNetworkAddressBytes(byte[], byte[])', correct the spelling of 'ip' in parameter name 'ipAdressBytes' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="43">In member 'IPAddressExtensions.GetNetworkAddressBytes(byte[], byte[])', consider replacing the data type identifier 'Bytes' in parameter name 'ipAdressBytes' with a more generic term, such as 'value'.</Issue>
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="43">In member 'IPAddressExtensions.GetNetworkAddressBytes(byte[], byte[])', consider replacing the data type identifier 'Bytes' in parameter name 'subnetMaskBytes' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'IPAddressExtensions.GetNetworkAddressBytes(byte[], byte[])', validate parameter 'ipAdressBytes' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'IPAddressExtensions.GetNetworkAddressBytes(byte[], byte[])', validate parameter 'subnetMaskBytes' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsInSameIpv4Subnet(System.Byte[],System.Byte[],System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="96">In member 'IPAddressExtensions.IsInSameIpv4Subnet(this byte[], byte[], byte[])', consider replacing the data type identifier 'Bytes' in parameter name 'address1Bytes' with a more generic term, such as 'value'.</Issue>
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="96">In member 'IPAddressExtensions.IsInSameIpv4Subnet(this byte[], byte[], byte[])', consider replacing the data type identifier 'Bytes' in parameter name 'address2Bytes' with a more generic term, such as 'value'.</Issue>
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="96">In member 'IPAddressExtensions.IsInSameIpv4Subnet(this byte[], byte[], byte[])', consider replacing the data type identifier 'Bytes' in parameter name 'subnetMaskBytes' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="96">In externally visible method 'IPAddressExtensions.IsInSameIpv4Subnet(this byte[], byte[], byte[])', validate parameter 'address1Bytes' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="96">In externally visible method 'IPAddressExtensions.IsInSameIpv4Subnet(this byte[], byte[], byte[])', validate parameter 'address2Bytes' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsInSameIpv4Subnet(System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="84">In externally visible method 'IPAddressExtensions.IsInSameIpv4Subnet(this IPAddress, IPAddress, IPAddress)', validate parameter 'address2' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="84">In externally visible method 'IPAddressExtensions.IsInSameIpv4Subnet(this IPAddress, IPAddress, IPAddress)', validate parameter 'address' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsInSameIpv6Subnet(System.Byte[],System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="68">In member 'IPAddressExtensions.IsInSameIpv6Subnet(this byte[], byte[])', consider replacing the data type identifier 'Bytes' in parameter name 'address1Bytes' with a more generic term, such as 'value'.</Issue>
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="68">In member 'IPAddressExtensions.IsInSameIpv6Subnet(this byte[], byte[])', consider replacing the data type identifier 'Bytes' in parameter name 'address2Bytes' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'IPAddressExtensions.IsInSameIpv6Subnet(this byte[], byte[])', validate parameter 'address1Bytes' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'IPAddressExtensions.IsInSameIpv6Subnet(this byte[], byte[])', validate parameter 'address2Bytes' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsInSameIpv6Subnet(System.Net.IPAddress,System.Net.IPAddress)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="56">In externally visible method 'IPAddressExtensions.IsInSameIpv6Subnet(this IPAddress, IPAddress)', validate parameter 'address2' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="IPAddressExtensions.cs" Line="56">In externally visible method 'IPAddressExtensions.IsInSameIpv6Subnet(this IPAddress, IPAddress)', validate parameter 'address' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MetadataAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'MetadataAttribute' so that it does not end in 'Attribute'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Args" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataAttribute.Args' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;MetadataPropertyType&gt;' in 'MetadataAttribute.Args' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConstructorArgs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataAttribute.ConstructorArgs' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;MetadataPropertyType&gt;' in 'MetadataAttribute.ConstructorArgs' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MetadataOperationType" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Actions" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataOperationType.Actions' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'MetadataOperationType.Actions' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MetadataPropertyType" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AllowableValues" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'MetadataPropertyType.AllowableValues' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Attributes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataPropertyType.Attributes' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;MetadataAttribute&gt;' in 'MetadataPropertyType.Attributes' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GenericArgs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'MetadataPropertyType.GenericArgs' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParamType" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Param' in member name 'MetadataPropertyType.ParamType' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="BaseType" Certainty="95" Level="Error">The property name 'MetadataPropertyType.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MetadataType" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Attributes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataType.Attributes' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;MetadataAttribute&gt;' in 'MetadataType.Attributes' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnumNames" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataType.EnumNames' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'MetadataType.EnumNames' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnumValues" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataType.EnumValues' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'MetadataType.EnumValues' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GenericArgs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'MetadataType.GenericArgs' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFullName()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="MetadataTypes.cs" Line="114">Change 'MetadataType.GetFullName()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InnerTypes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataType.InnerTypes' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;MetadataTypeName&gt;' in 'MetadataType.InnerTypes' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Properties" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataType.Properties' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;MetadataPropertyType&gt;' in 'MetadataType.Properties' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Routes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataType.Routes' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;MetadataRoute&gt;' in 'MetadataType.Routes' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MetadataTypeName" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GenericArgs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'MetadataTypeName.GenericArgs' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MetadataTypes" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Operations" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataTypes.Operations' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;MetadataOperationType&gt;' in 'MetadataTypes.Operations' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Types" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataTypes.Types' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;MetadataType&gt;' in 'MetadataTypes.Types' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MetadataTypesConfig" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable`1&lt;System.Int32&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="MetadataTypes.cs" Line="9">Replace method 'MetadataTypesConfig.MetadataTypesConfig(string, bool, bool, bool, bool, bool, bool, string, bool, bool, bool, int?)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="0#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="MetadataTypes.cs" Line="9">Change the type of parameter 'baseUrl' of method 'MetadataTypesConfig.MetadataTypesConfig(string, bool, bool, bool, bool, bool, bool, string, bool, bool, bool, int?)' from string to System.Uri, or provide an overload of 'MetadataTypesConfig.MetadataTypesConfig(string, bool, bool, bool, bool, bool, bool, string, bool, bool, bool, int?)', that allows 'baseUrl' to be passed as a System.Uri object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BaseUrl" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UriPropertiesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1056" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Change the type of property 'MetadataTypesConfig.BaseUrl' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CSharpTypeAlias" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataTypesConfig.CSharpTypeAlias' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DefaultNamespaces" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataTypesConfig.DefaultNamespaces' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'MetadataTypesConfig.DefaultNamespaces' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExportAttributes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataTypesConfig.ExportAttributes' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FSharpTypeAlias" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataTypesConfig.FSharpTypeAlias' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IgnoreTypes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataTypesConfig.IgnoreTypes' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IgnoreTypesInNamespaces" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataTypesConfig.IgnoreTypesInNamespaces' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'MetadataTypesConfig.IgnoreTypesInNamespaces' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VbNetKeyWords" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataTypesConfig.VbNetKeyWords' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message Id="KeyWords" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'KeyWords' in member name 'MetadataTypesConfig.VbNetKeyWords' exists as a discrete term. If your usage is intended to be single word, case it as 'Keywords' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Vb" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'Vb' in member name 'MetadataTypesConfig.VbNetKeyWords' by changing it to 'VB'.</Issue>
            </Message>
            <Message Id="Vb" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vb' in member name 'MetadataTypesConfig.VbNetKeyWords' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VbNetTypeAlias" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'MetadataTypesConfig.VbNetTypeAlias' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message Id="Vb" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'Vb' in member name 'MetadataTypesConfig.VbNetTypeAlias' by changing it to 'VB'.</Issue>
            </Message>
            <Message Id="Vb" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vb' in member name 'MetadataTypesConfig.VbNetTypeAlias' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ModelConfig`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'ModelConfig&lt;T&gt;' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Id(System.Func`2&lt;!0,System.Object&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ModelConfig.cs" Line="9">Remove 'ModelConfig&lt;T&gt;.Id(Func&lt;T, object&gt;)' from 'ModelConfig&lt;T&gt;' or make it an instance member.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ModelConfig.cs" Line="9">In member 'ModelConfig&lt;T&gt;.Id(Func&lt;T, object&gt;)', correct the casing of 'Fn' in parameter name 'getIdFn' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="ModelConfig.cs" Line="9">In method 'ModelConfig&lt;T&gt;.Id(Func&lt;T, object&gt;)', correct the spelling of 'Fn' in parameter name 'getIdFn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PerfUtils" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Perf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Perf' in type name 'PerfUtils'.</Issue>
          </Message>
          <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in type name 'PerfUtils'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Measure(System.Action,System.Int32,System.Int32,System.Action,System.Action,System.Action)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.GC.Collect" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="System.GC.Collect" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="PerfUtils.cs" Line="61">Remove the call to GC.Collect from 'PerfUtils.Measure(Action, int, int, Action, Action, Action)'. It is usually unnecessary to force garbage collection, and doing so can severely degrade performance.</Issue>
            </Message>
            <Message Id="ForMs" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="PerfUtils.cs" Line="54">In member 'PerfUtils.Measure(Action, int, int, Action, Action, Action)', the compound word 'ForMs' in parameter name 'runForMs' exists as a discrete term. If your usage is intended to be single word, case it as 'Forms' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="PerfUtils.cs" Line="54">Replace method 'PerfUtils.Measure(Action, int, int, Action, Action, Action)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="Ms" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="PerfUtils.cs" Line="54">In member 'PerfUtils.Measure(Action, int, int, Action, Action, Action)', correct the casing of 'Ms' in parameter name 'runForMs' by changing it to 'MS'.</Issue>
            </Message>
            <Message Id="Ms" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="PerfUtils.cs" Line="54">In method 'PerfUtils.Measure(Action, int, int, Action, Action, Action)', correct the spelling of 'Ms' in parameter name 'runForMs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="PerfUtils.cs" Line="54">In method 'PerfUtils.Measure(Action, int, int, Action, Action, Action)', correct the spelling of 'fn' in parameter name 'fn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="warmup" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="PerfUtils.cs" Line="54">In method 'PerfUtils.Measure(Action, int, int, Action, Action, Action)', correct the spelling of 'warmup' in parameter name 'warmup' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MeasureFor(System.Action,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ForMs" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="PerfUtils.cs" Line="23">In member 'PerfUtils.MeasureFor(Action, int)', the compound word 'ForMs' in parameter name 'runForMs' exists as a discrete term. If your usage is intended to be single word, case it as 'Forms' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Ms" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="PerfUtils.cs" Line="23">In member 'PerfUtils.MeasureFor(Action, int)', correct the casing of 'Ms' in parameter name 'runForMs' by changing it to 'MS'.</Issue>
            </Message>
            <Message Id="Ms" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="PerfUtils.cs" Line="23">In method 'PerfUtils.MeasureFor(Action, int)', correct the spelling of 'Ms' in parameter name 'runForMs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="PerfUtils.cs" Line="23">In method 'PerfUtils.MeasureFor(Action, int)', correct the spelling of 'fn' in parameter name 'fn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="PerfUtils.cs" Line="29">In externally visible method 'PerfUtils.MeasureFor(Action, int)', validate parameter 'fn' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RsaKeyLengths" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
           <Issue Name="NotFlagsNoZeroValue" Certainty="95" Level="CriticalError">Add a member to 'RsaKeyLengths' that has a value of zero with a suggested name of 'None'.</Issue>
          </Message>
          <Message TypeName="MarkEnumsWithFlags" Category="Microsoft.Design" CheckId="CA1027" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">The constituent members of 'RsaKeyLengths' appear to represent flags that can be combined rather than discrete values. If this is correct, mark the enumeration with FlagsAttribute.</Issue>
          </Message>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'RsaKeyLengths' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="StringUtils" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in type name 'StringUtils'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#HtmlCharacterCodes" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'StringUtils.HtmlCharacterCodes' or change the field to one that is an immutable reference type. If the reference type 'IDictionary&lt;string, string&gt;' is, in fact, immutable, exclude this message.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UrnId" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Create(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="50">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'UrnId.Create(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="42">In externally visible method 'UrnId.Create(string, string)', validate parameter 'objectTypeName' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="46">In externally visible method 'UrnId.Create(string, string)', validate parameter 'idFieldValue' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Create(System.Type,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="88">Consider changing the type of parameter 'objectType' in 'UrnId.Create(Type, string)' from 'Type' to its base type 'MemberInfo'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="92">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'UrnId.Create(Type, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="92">In externally visible method 'UrnId.Create(Type, string)', validate parameter 'objectType' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="88">In externally visible method 'UrnId.Create(Type, string)', validate parameter 'idFieldValue' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Create(System.Type,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="102">Consider changing the type of parameter 'objectType' in 'UrnId.Create(Type, string, string)' from 'Type' to its base type 'MemberInfo'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="110">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'UrnId.Create(Type, string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="110">In externally visible method 'UrnId.Create(Type, string, string)', validate parameter 'objectType' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="106">In externally visible method 'UrnId.Create(Type, string, string)', validate parameter 'idFieldName' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="102">In externally visible method 'UrnId.Create(Type, string, string)', validate parameter 'idFieldValue' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Create`1(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="83">Consider a design where 'UrnId.Create&lt;T&gt;(object)' doesn't require explicit type parameter 'T' in any call to it.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="83">In externally visible method 'UrnId.Create&lt;T&gt;(object)', validate parameter 'idFieldValue' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Create`1(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="78">Consider a design where 'UrnId.Create&lt;T&gt;(string)' doesn't require explicit type parameter 'T' in any call to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Create`1(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="97">Consider a design where 'UrnId.Create&lt;T&gt;(string, string)' doesn't require explicit type parameter 'T' in any call to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateWithParts(System.String,System.String[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="68">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'UrnId.CreateWithParts(string, params string[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="55">In externally visible method 'UrnId.CreateWithParts(string, params string[])', validate parameter 'objectTypeName' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="61">In externally visible method 'UrnId.CreateWithParts(string, params string[])', validate parameter 'keyParts' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateWithParts`1(System.String[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="73">Consider a design where 'UrnId.CreateWithParts&lt;T&gt;(params string[])' doesn't require explicit type parameter 'T' in any call to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetGuidId(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="120">Change the type of parameter 'urn' of method 'UrnId.GetGuidId(string)' from string to System.Uri, or provide an overload of 'UrnId.GetGuidId(string)', that allows 'urn' to be passed as a System.Uri object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLongId(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="long" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="125">Consider replacing the language-specific data type identifier 'Long' in member name 'UrnId.GetLongId(string)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="System.Int64.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="125">Because the behavior of 'long.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UrnId.GetLongId(string)' with a call to 'long.Parse(string, IFormatProvider)'. If the result of 'long.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="125">Change the type of parameter 'urn' of method 'UrnId.GetLongId(string)' from string to System.Uri, or provide an overload of 'UrnId.GetLongId(string)', that allows 'urn' to be passed as a System.Uri object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStringId(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="115">Change the type of parameter 'urn' of method 'UrnId.GetStringId(string)' from string to System.Uri, or provide an overload of 'UrnId.GetStringId(string)', that allows 'urn' to be passed as a System.Uri object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parse(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="28">Change the type of parameter 'urnId' of method 'UrnId.Parse(string)' from string to System.Uri, or provide an overload of 'UrnId.Parse(string)', that allows 'urnId' to be passed as a System.Uri object.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="UrnId.cs" Line="28">In externally visible method 'UrnId.Parse(string)', validate parameter 'urnId' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XLinqExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AllElements(System.Collections.Generic.IEnumerable`1&lt;System.Xml.Linq.XElement&gt;,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="270">In externally visible method 'XLinqExtensions.AllElements(this IEnumerable&lt;XElement&gt;, string)', validate parameter 'elements' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AllElements(System.Xml.Linq.XElement,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="226">Consider changing the type of parameter 'element' in 'XLinqExtensions.AllElements(this XElement, string)' from 'XElement' to its base type 'XContainer'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AnyElement(System.Collections.Generic.IEnumerable`1&lt;System.Xml.Linq.XElement&gt;,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="257">In externally visible method 'XLinqExtensions.AnyElement(this IEnumerable&lt;XElement&gt;, string)', validate parameter 'elements' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AnyElement(System.Xml.Linq.XElement,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="242">Consider changing the type of parameter 'element' in 'XLinqExtensions.AnyElement(this XElement, string)' from 'XElement' to its base type 'XContainer'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AssertElementHasValue(System.Xml.Linq.XElement,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="197">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'XLinqExtensions.AssertElementHasValue(this XElement, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FirstElement(System.Xml.Linq.XElement)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="279">Consider changing the type of parameter 'element' in 'XLinqExtensions.FirstElement(this XElement)' from 'XElement' to its base type 'XContainer'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="279">In externally visible method 'XLinqExtensions.FirstElement(this XElement)', validate parameter 'element' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAttributeValueOrDefault`1(System.Xml.Linq.XAttribute,System.String,System.Func`2&lt;System.Xml.Linq.XAttribute,!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="attr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="35">In method 'XLinqExtensions.GetAttributeValueOrDefault&lt;T&gt;(this XAttribute, string, Func&lt;XAttribute, T&gt;)', correct the spelling of 'attr' in parameter name 'attr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="name" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="35">Parameter 'name' of 'XLinqExtensions.GetAttributeValueOrDefault&lt;T&gt;(this XAttribute, string, Func&lt;XAttribute, T&gt;)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetBool(System.Xml.Linq.XElement,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="bool" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="44">Consider replacing the language-specific data type identifier 'Bool' in member name 'XLinqExtensions.GetBool(this XElement, string)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetBoolOrDefault(System.Xml.Linq.XElement,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="bool" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="50">Consider replacing the language-specific data type identifier 'Bool' in member name 'XLinqExtensions.GetBoolOrDefault(this XElement, string)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetInt(System.Xml.Linq.XElement,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="int" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="61">Consider replacing the language-specific data type identifier 'Int' in member name 'XLinqExtensions.GetInt(this XElement, string)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetIntOrDefault(System.Xml.Linq.XElement,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="int" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="67">Consider replacing the language-specific data type identifier 'Int' in member name 'XLinqExtensions.GetIntOrDefault(this XElement, string)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLong(System.Xml.Linq.XElement,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="long" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="78">Consider replacing the language-specific data type identifier 'Long' in member name 'XLinqExtensions.GetLong(this XElement, string)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLongOrDefault(System.Xml.Linq.XElement,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="long" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="84">Consider replacing the language-specific data type identifier 'Long' in member name 'XLinqExtensions.GetLongOrDefault(this XElement, string)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValues(System.Collections.Generic.IEnumerable`1&lt;System.Xml.Linq.XElement&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="203">Change 'List&lt;string&gt;' in 'XLinqExtensions.GetValues(this IEnumerable&lt;XElement&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="els" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="203">In method 'XLinqExtensions.GetValues(this IEnumerable&lt;XElement&gt;)', correct the spelling of 'els' in parameter name 'els' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common" File="XLinqExtensions.cs" Line="204">In externally visible method 'XLinqExtensions.GetValues(this IEnumerable&lt;XElement&gt;)', validate parameter 'els' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="ServiceStack.Data">
       <Types>
        <Type Name="DbConnectionFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Func`1&lt;System.Data.IDbConnection&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Data" File="DbConnectionFactory.cs" Line="11">In member 'DbConnectionFactory.DbConnectionFactory(Func&lt;IDbConnection&gt;)', correct the casing of 'Fn' in parameter name 'connectionFactoryFn' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Data" File="DbConnectionFactory.cs" Line="11">In method 'DbConnectionFactory.DbConnectionFactory(Func&lt;IDbConnection&gt;)', correct the spelling of 'Fn' in parameter name 'connectionFactoryFn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="ServiceStack.Logging">
       <Types>
        <Type Name="ConsoleLogFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Logging" File="ConsoleLogFactory.cs" Line="15">Replace method 'ConsoleLogFactory.ConsoleLogFactory(bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConsoleLogger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="type" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Logging" File="ConsoleLogger.cs" Line="22">Parameter 'type' of 'ConsoleLogger.ConsoleLogger(string)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="type" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Logging" File="ConsoleLogger.cs" Line="29">Parameter 'type' of 'ConsoleLogger.ConsoleLogger(Type)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Log(System.Object,System.Exception)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Logging" File="ConsoleLogger.cs" Line="45">Method 'ConsoleLogger.Log(object, Exception)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: ", Exception: ".</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="ServiceStack.Reflection">
       <Types>
        <Type Name="DelegateFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Create(System.Reflection.MethodInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="DelegateFactory.cs" Line="26">In externally visible method 'DelegateFactory.Create(MethodInfo)', validate parameter 'method' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateVoid(System.Reflection.MethodInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="DelegateFactory.cs" Line="55">In externally visible method 'DelegateFactory.CreateVoid(MethodInfo)', validate parameter 'method' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DelegateFactory+LateBoundMethod" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'DelegateFactory.LateBoundMethod'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="DelegateFactory+LateBoundVoid" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'DelegateFactory.LateBoundVoid'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="PropertyAccessor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetPropertyFn`1(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="12">Correct the casing of 'Fn' in member name 'PropertyAccessor.GetPropertyFn&lt;TEntity&gt;(string)' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="12">Correct the spelling of 'Fn' in member name 'PropertyAccessor.GetPropertyFn&lt;TEntity&gt;(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetPropertyFn`1(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="26">Correct the casing of 'Fn' in member name 'PropertyAccessor.SetPropertyFn&lt;TEntity&gt;(string)' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="26">Correct the spelling of 'Fn' in member name 'PropertyAccessor.SetPropertyFn&lt;TEntity&gt;(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PropertyAccessor`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetPropertyFn()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="60">Correct the casing of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.GetPropertyFn()' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="60">Correct the spelling of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.GetPropertyFn()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="60">Change 'PropertyAccessor&lt;TEntity&gt;.GetPropertyFn()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetPropertyFn()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="65">Correct the casing of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.SetPropertyFn()' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="65">Correct the spelling of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.SetPropertyFn()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TypedGetPropertyFn`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="73">Correct the casing of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.TypedGetPropertyFn&lt;TId&gt;()' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="73">Correct the spelling of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.TypedGetPropertyFn&lt;TId&gt;()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TypedSetPropertyFn`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="94">Correct the casing of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.TypedSetPropertyFn&lt;TId&gt;()' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="94">Correct the spelling of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.TypedSetPropertyFn&lt;TId&gt;()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnTypedGetPropertyFn`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="86">Consider a design where 'PropertyAccessor&lt;TEntity&gt;.UnTypedGetPropertyFn&lt;TId&gt;()' doesn't require explicit type parameter 'TId' in any call to it.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="86">Correct the casing of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.UnTypedGetPropertyFn&lt;TId&gt;()' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="86">Correct the casing of 'Un' in member name 'PropertyAccessor&lt;TEntity&gt;.UnTypedGetPropertyFn&lt;TId&gt;()' by changing it to 'UN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="86">Correct the spelling of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.UnTypedGetPropertyFn&lt;TId&gt;()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnTypedSetPropertyFn`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="110">Consider a design where 'PropertyAccessor&lt;TEntity&gt;.UnTypedSetPropertyFn&lt;TId&gt;()' doesn't require explicit type parameter 'TId' in any call to it.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="110">Correct the casing of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.UnTypedSetPropertyFn&lt;TId&gt;()' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="110">Correct the casing of 'Un' in member name 'PropertyAccessor&lt;TEntity&gt;.UnTypedSetPropertyFn&lt;TId&gt;()' by changing it to 'UN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="110">Correct the spelling of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.UnTypedSetPropertyFn&lt;TId&gt;()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValueTypedGetPropertyFn`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="81">Consider a design where 'PropertyAccessor&lt;TEntity&gt;.ValueTypedGetPropertyFn&lt;TId&gt;()' doesn't require explicit type parameter 'TId' in any call to it.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="81">Correct the casing of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.ValueTypedGetPropertyFn&lt;TId&gt;()' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="81">Correct the spelling of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.ValueTypedGetPropertyFn&lt;TId&gt;()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValueTypesSetPropertyFn`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="102">Consider a design where 'PropertyAccessor&lt;TEntity&gt;.ValueTypesSetPropertyFn&lt;TId&gt;()' doesn't require explicit type parameter 'TId' in any call to it.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="102">Correct the casing of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.ValueTypesSetPropertyFn&lt;TId&gt;()' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="PropertyAccessor.cs" Line="102">Correct the spelling of 'Fn' in member name 'PropertyAccessor&lt;TEntity&gt;.ValueTypesSetPropertyFn&lt;TId&gt;()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StaticAccessors`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#TypedGetPropertyFn`1(System.Reflection.PropertyInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="14">Remove 'StaticAccessors&lt;TEntity&gt;.TypedGetPropertyFn&lt;TId&gt;(PropertyInfo)' from 'StaticAccessors&lt;TEntity&gt;' or make it an instance member.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="14">Correct the casing of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.TypedGetPropertyFn&lt;TId&gt;(PropertyInfo)' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="14">Correct the spelling of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.TypedGetPropertyFn&lt;TId&gt;(PropertyInfo)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TypedSetPropertyFn`1(System.Reflection.PropertyInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="64">Remove 'StaticAccessors&lt;TEntity&gt;.TypedSetPropertyFn&lt;TId&gt;(PropertyInfo)' from 'StaticAccessors&lt;TEntity&gt;' or make it an instance member.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="64">Correct the casing of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.TypedSetPropertyFn&lt;TId&gt;(PropertyInfo)' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="64">Correct the spelling of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.TypedSetPropertyFn&lt;TId&gt;(PropertyInfo)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnTypedGetPropertyFn`1(System.Reflection.PropertyInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="55">Remove 'StaticAccessors&lt;TEntity&gt;.UnTypedGetPropertyFn&lt;TId&gt;(PropertyInfo)' from 'StaticAccessors&lt;TEntity&gt;' or make it an instance member.</Issue>
            </Message>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="55">Consider a design where 'StaticAccessors&lt;TEntity&gt;.UnTypedGetPropertyFn&lt;TId&gt;(PropertyInfo)' doesn't require explicit type parameter 'TId' in any call to it.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="55">Correct the casing of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.UnTypedGetPropertyFn&lt;TId&gt;(PropertyInfo)' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="55">Correct the casing of 'Un' in member name 'StaticAccessors&lt;TEntity&gt;.UnTypedGetPropertyFn&lt;TId&gt;(PropertyInfo)' by changing it to 'UN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="55">Correct the spelling of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.UnTypedGetPropertyFn&lt;TId&gt;(PropertyInfo)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnTypedSetPropertyFn`1(System.Reflection.PropertyInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="108">Remove 'StaticAccessors&lt;TEntity&gt;.UnTypedSetPropertyFn&lt;TId&gt;(PropertyInfo)' from 'StaticAccessors&lt;TEntity&gt;' or make it an instance member.</Issue>
            </Message>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="108">Consider a design where 'StaticAccessors&lt;TEntity&gt;.UnTypedSetPropertyFn&lt;TId&gt;(PropertyInfo)' doesn't require explicit type parameter 'TId' in any call to it.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="108">Correct the casing of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.UnTypedSetPropertyFn&lt;TId&gt;(PropertyInfo)' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="108">Correct the casing of 'Un' in member name 'StaticAccessors&lt;TEntity&gt;.UnTypedSetPropertyFn&lt;TId&gt;(PropertyInfo)' by changing it to 'UN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="108">Correct the spelling of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.UnTypedSetPropertyFn&lt;TId&gt;(PropertyInfo)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValueUnTypedGetPropertyFn`1(System.Reflection.PropertyInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="23">Remove 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedGetPropertyFn&lt;TId&gt;(PropertyInfo)' from 'StaticAccessors&lt;TEntity&gt;' or make it an instance member.</Issue>
            </Message>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="23">Consider a design where 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedGetPropertyFn&lt;TId&gt;(PropertyInfo)' doesn't require explicit type parameter 'TId' in any call to it.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="23">Correct the casing of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedGetPropertyFn&lt;TId&gt;(PropertyInfo)' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="23">Correct the casing of 'Un' in member name 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedGetPropertyFn&lt;TId&gt;(PropertyInfo)' by changing it to 'UN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="23">Correct the spelling of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedGetPropertyFn&lt;TId&gt;(PropertyInfo)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValueUnTypedGetPropertyTypeFn(System.Reflection.PropertyInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="29">Remove 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedGetPropertyTypeFn(PropertyInfo)' from 'StaticAccessors&lt;TEntity&gt;' or make it an instance member.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="29">Correct the casing of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedGetPropertyTypeFn(PropertyInfo)' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="29">Correct the casing of 'Un' in member name 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedGetPropertyTypeFn(PropertyInfo)' by changing it to 'UN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="29">Correct the spelling of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedGetPropertyTypeFn(PropertyInfo)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="30">In externally visible method 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedGetPropertyTypeFn(PropertyInfo)', validate parameter 'pi' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValueUnTypedSetPropertyFn`1(System.Reflection.PropertyInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="73">Remove 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedSetPropertyFn&lt;TId&gt;(PropertyInfo)' from 'StaticAccessors&lt;TEntity&gt;' or make it an instance member.</Issue>
            </Message>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="73">Consider a design where 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedSetPropertyFn&lt;TId&gt;(PropertyInfo)' doesn't require explicit type parameter 'TId' in any call to it.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="73">Correct the casing of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedSetPropertyFn&lt;TId&gt;(PropertyInfo)' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="73">Correct the casing of 'Un' in member name 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedSetPropertyFn&lt;TId&gt;(PropertyInfo)' by changing it to 'UN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="73">Correct the spelling of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedSetPropertyFn&lt;TId&gt;(PropertyInfo)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValueUnTypedSetPropertyTypeFn(System.Reflection.PropertyInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="79">Remove 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedSetPropertyTypeFn(PropertyInfo)' from 'StaticAccessors&lt;TEntity&gt;' or make it an instance member.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="79">Correct the casing of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedSetPropertyTypeFn(PropertyInfo)' by changing it to 'FN'.</Issue>
            </Message>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="79">Correct the casing of 'Un' in member name 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedSetPropertyTypeFn(PropertyInfo)' by changing it to 'UN'.</Issue>
            </Message>
            <Message Id="Fn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="79">Correct the spelling of 'Fn' in member name 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedSetPropertyTypeFn(PropertyInfo)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Reflection" File="StaticAccessors.cs" Line="80">In externally visible method 'StaticAccessors&lt;TEntity&gt;.ValueUnTypedSetPropertyTypeFn(PropertyInfo)', validate parameter 'pi' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="ServiceStack.Support">
       <Types>
        <Type Name="AdapterBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Action)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Support" File="AdapterBase.cs" Line="51">In externally visible method 'AdapterBase.Execute(Action)', validate parameter 'action' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Execute`1(System.Func`1&lt;!!0&gt;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Support" File="AdapterBase.cs" Line="23">In externally visible method 'AdapterBase.Execute&lt;T&gt;(Func&lt;T&gt;)', validate parameter 'action' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CommandResultsHandler`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Collections.Generic.List`1&lt;!0&gt;,ServiceStack.Commands.ICommandList`1&lt;!0&gt;,System.Threading.AutoResetEvent)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Support" File="CommandResultsHandler.cs" Line="13">Change 'List&lt;T&gt;' in 'CommandResultsHandler&lt;T&gt;.CommandResultsHandler(List&lt;T&gt;, ICommandList&lt;T&gt;, AutoResetEvent)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InMemoryLog" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AppendToLog(System.Collections.Generic.ICollection`1&lt;System.String&gt;,System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\src\ServiceStack\src\ServiceStack.Common\Support" File="InMemoryLogFactory.cs" Line="77">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'InMemoryLog.AppendToLog(ICollection&lt;string&gt;, string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DebugEntries" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'InMemoryLog.DebugEntries' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'InMemoryLog.DebugEntries' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DebugExceptions" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'InMemoryLog.DebugExceptions' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;Exception&gt;' in 'InMemoryLog.DebugExceptions' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ErrorEntries" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'InMemoryLog.ErrorEntries' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'InMemoryLog.ErrorEntries' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ErrorExceptions" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'InMemoryLog.ErrorExceptions' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;Exception&gt;' in 'InMemoryLog.ErrorExceptions' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FatalEntries" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'InMemoryLog.FatalEntries' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'InMemoryLog.FatalEntries' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FatalExceptions" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'InMemoryLog.FatalExceptions' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;Exception&gt;' in 'InMemoryLog.FatalExceptions' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InfoEntries" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'InMemoryLog.InfoEntries' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'InMemoryLog.InfoEntries' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InfoExceptions" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'InMemoryLog.InfoExceptions' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;Exception&gt;' in 'InMemoryLog.InfoExceptions' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WarnEntries" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'InMemoryLog.WarnEntries' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;string&gt;' in 'InMemoryLog.WarnEntries' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WarnExceptions" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'InMemoryLog.WarnExceptions' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;Exception&gt;' in 'InMemoryLog.WarnExceptions' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InMemoryLogFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetLogger(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-10-14 02:59:31Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\src\ServiceStack\src\ServiceStack.Common\Support" File="InMemoryLogFactory.cs" Line="19">In externally visible method 'InMemoryLogFactory.GetLogger(Type)', validate parameter 'type' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001">
   <Name>Avoid calling problematic methods</Name>
   <Description>Avoid making unnecessary and potentially dangerous method calls.</Description>
   <Resolution Name="System.GC.Collect">Remove the call to GC.Collect from {0}. It is usually unnecessary to force garbage collection, and doing so can severely degrade performance.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385973(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="reliabilityrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182130(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182327(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberParameterShouldBeDiscreteTerm">In member {0}, the compound word '{1}' in parameter name {2} exists as a discrete term. If your usage is intended to be single word, case it as '{3}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/3hk32yyz(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DeclareTypesInNamespaces" Category="Microsoft.Design" CheckId="CA1050">
   <Name>Declare types in namespaces</Name>
   <Description>A type should be defined inside a namespace to avoid duplication.</Description>
   <Resolution Name="Default">{0} should be declared inside a namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182134(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026">
   <Name>Default parameters should not be used</Name>
   <Description>Some programming languages do not support default parameters. Replace default parameters with method overloads that supply the default argument.</Description>
   <Resolution Name="Default">Replace method {0} with an overload that supplies all default arguments.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182135(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104">
   <Name>Do not declare read only mutable reference types</Name>
   <Description>A read-only declaration for a mutable reference type does not prevent the field's instance data from being modified. For example, a read-only StringBuilder field declaration does not make sense, since the data encapsulated by the StringBuilder can be modified using the read-only reference.</Description>
   <Resolution Name="Default">Remove the read-only designation from {0} or change the field to one that is an immutable reference type. If the reference type {1} is, in fact, immutable, exclude this message.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182302(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="25">Error</MessageLevel>
   <File Name="securityrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000">
   <Name>Do not declare static members on generic types</Name>
   <Description>The syntax for calling static members on generic types is complex as the type parameter has to be specified for each call.</Description>
   <Resolution Name="Default">Remove {0} from {1} or make it an instance member.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182139(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
   <Name>Do not nest generic types in member signatures</Name>
   <Description>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182144(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045">
   <Name>Do not pass types by reference</Name>
   <Description>Although there are legitimate times to use reference parameters, such use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be a reference parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182146(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008">
   <Name>Enums should have zero value</Name>
   <Description>An enum should generally have a zero value. If the enum is not decorated with the Flags attribute, it should have a member with a value of zero that represents the empty state. Optionally, this value is named 'None'. For a Flags-attributed enum, a zero-valued member is optional and, if it exists, should always be named 'None'. This value should indicate that no values have been set in the enum. Using a zero-valued member for other purposes is contrary to the use of the Flags attribute in that the bitwise AND and OR operators are useless with the member.</Description>
   <Resolution Name="NotFlagsNoZeroValue">Add a member to {0} that has a value of zero with a suggested name of 'None'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182149(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004">
   <Name>Generic methods should provide type parameter</Name>
   <Description>Methods where the type parameter cannot be inferred from the parameters and therefore has to be defined in the method call are too difficult to understand. Methods with a formal parameter typed as the generic method type parameter support inference. Methods with no formal parameter typed as the generic method type parameter don't support inference.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't require explicit type parameter {1} in any call to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182150(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MethodTypeParameterMoreMeaningfulName">On method {0}, consider providing a more meaningful name than generic type parameter name {1}.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715">
   <Name>Identifiers should have correct prefix</Name>
   <Description>Prefix interface names with the letter 'I' to indicate that the type is an interface, as in IFormattable. Prefix generic type parameter names with the letter 'T' and provide them with descriptive names, as in Dictionary&lt;TKey, TValue&gt;, unless a single 'T' is completely self-explanatory, as in Collection&lt;T&gt;. Use Pascal casing for both interface and type parameter names. Use abbreviations sparingly. Do not use the underscore character. Do use similar names when defining a class/interface pair where the class is a standard implementation of the interface. The names should differ only by the letter I prefixed on the interface name, as with Component and IComponent.</Description>
   <Resolution Name="MethodTypeParameter">On method {0}, prefix generic type parameter name {1} with 'T'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182243(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Resolution Name="LanguageSpecificMember">Consider replacing the language-specific data type identifier '{0}' in member name {1} with either a language-independent equivalent or a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
   <Name>Identifiers should not have incorrect suffix</Name>
   <Description>Types that do not extend certain base types should not use reserved name suffixes. Types and members should not use 'Ex' or 'New' to distinguish them from an earlier version of the same API, instead, use a numeric suffix such as '2' or provide a more meaningful suffix. Concrete type implementations and members should not end 'Impl'. Members instead, should either consider using the suggested alternate 'Core' in replacement of 'Impl' or avoid any suffix at all.</Description>
   <Resolution Name="TypeNoAlternate">Rename type name {0} so that it does not end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182247(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
   <Name>Initialize reference type static fields inline</Name>
   <Description>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</Description>
   <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182275(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
   <Name>Instantiate argument exceptions correctly</Name>
   <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
   <Resolution Name="IncorrectParameterName">Method {0} passes '{1}' as the {2} argument to a {3} constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182347(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="MarkEnumsWithFlags" Category="Microsoft.Design" CheckId="CA1027">
   <Name>Mark enums with FlagsAttribute</Name>
   <Description>The enumeration appears to be made up of combinable flags. If this true, apply the Flags attribute to the enumeration.</Description>
   <Resolution Name="Default">The constituent members of {0} appear to represent flags that can be combined rather than discrete values. If this is correct, mark the enumeration with FlagsAttribute.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182159(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182162(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211">
   <Name>Non-constant fields should not be visible</Name>
   <Description>Static fields should be constant unless you carefully manage access to the field using locks. Using static variables without making them thread safe can compromise execution state. This rule applies to managed code libraries. If the analyzed assembly is an application, it is usually safe to exclude violations of this rule.</Description>
   <Resolution Name="Default">Consider making {0} non-public or a constant.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182353(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308">
   <Name>Normalize strings to uppercase</Name>
   <Description>Strings should be normalized to upper-case.</Description>
   <Resolution Name="ToUpperInvariant">In method {0}, replace the call to {1} with String.ToUpperInvariant().</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386042(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717">
   <Name>Only FlagsAttribute enums should have plural names</Name>
   <Description>Plural names indicate that the values of the enumeration can be combined. For example, an enumeration named 'Day' indicates a single day, and an enumeration named 'Days' indicates multiple days. Enumeration values should be combined using the bit-wise OR operator only if the Flags attribute is present on the enumeration.</Description>
   <Resolution Name="Default">If the name {0} is plural, change it to its singular form.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264487(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719">
   <Name>Parameter names should not match member names</Name>
   <Description>Parameter names should be distinct from member names.</Description>
   <Resolution Name="Default">Change either member or parameter name {0} so that one differs from the other.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182252(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
   <Name>Properties should not return arrays</Name>
   <Description>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</Description>
   <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/0fss9skc(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721">
   <Name>Property names should not match get methods</Name>
   <Description>A Get method was found with the same name as a property. Get methods and properties should have names that clearly distinguish their function. See the design guidelines for information regarding choosing properties over methods.</Description>
   <Resolution Name="BaseType">The property name {0} is confusing given the existence of inherited method {1}. Rename or remove this property.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182253(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="CSharp2_0">Because type {0} contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054">
   <Name>URI parameters should not be strings</Name>
   <Description>If a parameter name contains "uri" or "url" or "urn", and it's typed as string, the parameter type should be changed to System.Uri, unless there is an overload method where the same parameter is typed as System.Uri.</Description>
   <Resolution Name="Default">Change the type of parameter {0} of method {1} from string to System.Uri, or provide an overload of {1}, that allows {0} to be passed as a System.Uri object.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182174(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="UriPropertiesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1056">
   <Name>URI properties should not be strings</Name>
   <Description>If a property name contains "uri" or "url" or "urn" and it's typed as string, it should be changed to System.Uri.</Description>
   <Resolution Name="Default">Change the type of property {0} from string to System.Uri.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182175(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055">
   <Name>URI return values should not be strings</Name>
   <Description>If a function name contains "uri" or "url" or "urn" and the return type is string, the return type should be changed to System.Uri.</Description>
   <Resolution Name="Default">Change the return type of {0} from string to System.Uri.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182176(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
