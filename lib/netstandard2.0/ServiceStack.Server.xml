<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceStack.Server</name>
    </assembly>
    <members>
        <member name="T:ServiceStack.Messaging.Rcon.Client">
            <summary>
            Base rcon class.
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.Client.OnDisconnectedHandler">
            <summary>
            Event delegate when disconnected from the server.
            </summary>
            <param name="rcon"></param>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.Client.AsyncCallback">
            <summary>
            Delegate for async callbacks.
            </summary>
            <param name="rcon"></param>
            <param name="packet"></param>
        </member>
        <member name="E:ServiceStack.Messaging.Rcon.Client.OnDisconnected">
            <summary>
            Disconnected event.
            </summary>
        </member>
        <member name="F:ServiceStack.Messaging.Rcon.Client._sock">
            <summary>
            Rcon connection socket. Always set to null when not connected.
            </summary>
        </member>
        <member name="F:ServiceStack.Messaging.Rcon.Client._sequenceID">
            <summary>
            Unique ID for each message.
            </summary>
        </member>
        <member name="F:ServiceStack.Messaging.Rcon.Client._registeredCallbacks">
            <summary>
            Registered callbacks.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.#ctor(System.Net.IPEndPoint)">
            <summary>
            Create a new instance of rcon.
            </summary>
            <param name="rconEndpoint">Endpoint to connect to, usually the game server with query port.</param>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.Connect">
            <summary>
            Attempts to connect to the game server for rcon operations.
            </summary>
            <returns>True if connection established, false otherwise.</returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.ProcessPacket(System.Byte[],ServiceStack.Messaging.Rcon.ClientSocketState)">
            <summary>
            Processes a received packet.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.Disconnect">
            <summary>
            Disconnects from rcon.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.Client.InternalSend(System.Byte[][])">
            <summary>
            Sends message to the server.
            </summary>
            <param name="words">Words to send.</param>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.Endpoint">
            <summary>
            Game server endpoint.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.LastException">
            <summary>
            Last exception that occured during operation.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.Connected">
            <summary>
            Connected?
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Client.SequenceID">
            <summary>
            Gets the next unique ID to be used for transmisson. Read this before sending to pair responses to sent messages.
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.NotConnectedException">
            <summary>
            Exception thrown when attempting to send on a non-connected service client.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.FromServer">
            <summary>
            True if the packet originated on the server.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.IsResponse">
            <summary>
            True if the packet is a response from a sent packet.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.Sequence">
            <summary>
            Sequence identifier. Unique to the connection.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Rcon.Packet.Words">
            <summary>
            Words.
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Rcon.PacketCodec">
            <summary>
            Contains methods required for encoding and decoding rcon packets.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.DecodePacket(System.Byte[])">
            <summary>
            Decodes a packet.
            </summary>
            <param name="packet">The packet.</param>
            <returns>A packet object.</returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.DecodeHeader(System.Byte[])">
            <summary>
            Decodes the packet header.
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.DecodeWords(System.Byte[])">
            <summary>
            Decodes words in a packet.
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.EncodePacket(System.Boolean,System.Boolean,System.UInt32,System.Byte[][])">
            <summary>
            Encodes a packet for transmission to the server.
            </summary>
            <param name="fromServer"></param>
            <param name="isResponse"></param>
            <param name="id"></param>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.EncodeHeader(System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Encodes a packet header.
            </summary>
            <param name="fromServer"></param>
            <param name="isResponse"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.Rcon.PacketCodec.EncodeWords(System.Byte[][])">
            <summary>
            Encodes words.
            </summary>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Messaging.Redis.RedisMqServer">
            <summary>
            Creates a Redis MQ Server that processes each message on its own background thread.
            i.e. if you register 3 handlers it will create 7 background threads:
              - 1 listening to the Redis MQ Subscription, getting notified of each new message
              - 3x1 Normal InQ for each message handler
              - 3x1 PriorityQ for each message handler (Turn off with DisablePriorityQueues)
            
            When RedisMqServer Starts it creates a background thread subscribed to the Redis MQ Topic that
            listens for new incoming messages. It also starts 2 background threads for each message type:
             - 1 for processing the services Priority Queue and 1 processing the services normal Inbox Queue.
            
            Priority Queue's can be enabled on a message-per-message basis by specifying types in the 
            OnlyEnablePriortyQueuesForTypes property. The DisableAllPriorityQueues property disables all Queues.
            
            The Start/Stop methods are idempotent i.e. It's safe to call them repeatedly on multiple threads 
            and the Redis MQ Server will only have Started or Stopped once.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.RequestFilter">
            <summary>
            Execute global transformation or custom logic before a request is processed.
            Must be thread-safe.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.ResponseFilter">
            <summary>
            Execute global transformation or custom logic on the response.
            Must be thread-safe.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.ErrorHandler">
            <summary>
            Execute global error handler logic. Must be thread-safe.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.PriortyQueuesWhitelist">
            <summary>
            If you only want to enable priority queue handlers (and threads) for specific msg types
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.DisablePriorityQueues">
            <summary>
            Don't listen on any Priority Queues
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.Redis.RedisMqServer.PublishResponsesWhitelist">
            <summary>
            Opt-in to only publish responses on this white list. 
            Publishes all responses by default.
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Redis.RedisTransientMessageFactory">
            <summary>
            Transient message queues are a one-pass message queue service that starts
            processing messages when Start() is called. Any subsequent Start() calls 
            while the service is running is ignored.
            
            The transient service will continue to run until all messages have been 
            processed after which time it will shutdown all processing until Start() is called again.
            </summary>
        </member>
    </members>
</doc>
