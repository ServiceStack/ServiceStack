<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceStack.Common</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "M:ServiceStack.AssertUtils.AreNotNull(System.Collections.Generic.IDictionary{System.String,System.Object})" -->
        <member name="M:ServiceStack.CommandsUtils.ExecuteAsyncCommandExec(System.Collections.Generic.IEnumerable{ServiceStack.Commands.ICommandExec})">
            <summary>
            Provide the an option for the callee to block until all commands are executed
            </summary>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.EnumerableExtensions.Safe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return T[0] when enumerable is null, safe to use in enumerations like foreach
            </summary>
        </member>
        <member name="M:ServiceStack.EnumExtensions.ToDescription(System.Enum)">
            <summary>
            Gets the textual description of the enum if it has one. e.g.
            
            <code>
            enum UserColors
            {
                [Description("Bright Red")]
                BrightRed
            }
            UserColors.BrightRed.ToDescription();
            </code>
            </summary>
            <param name="enum"></param>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.ExecUtils.BaseDelayMs">
            <summary>
            Default base sleep time (milliseconds).
            </summary>
        </member>
        <member name="P:ServiceStack.ExecUtils.MaxBackOffMs">
            <summary>
            Default maximum back-off time before retrying a request
            </summary>
        </member>
        <member name="P:ServiceStack.ExecUtils.MaxRetries">
            <summary>
            Maximum retry limit. Avoids integer overflow issues.
            </summary>
        </member>
        <member name="M:ServiceStack.ExecUtils.SleepBackOffMultiplier(System.Int32)">
            <summary>
            How long to sleep before next retry using Exponential BackOff delay with Full Jitter.
            </summary>
            <param name="retriesAttempted"></param>
        </member>
        <member name="M:ServiceStack.ExecUtils.CalculateFullJitterBackOffDelay(System.Int32)">
            <summary>
            Exponential BackOff Delay with Full Jitter
            </summary>
            <param name="retriesAttempted"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ExecUtils.CalculateFullJitterBackOffDelay(System.Int32,System.Int32,System.Int32)">
            <summary>
            Exponential BackOff Delay with Full Jitter from:
            https://github.com/aws/aws-sdk-java/blob/master/aws-java-sdk-core/src/main/java/com/amazonaws/retry/PredefinedBackoffStrategies.java
            </summary>
            <param name="retriesAttempted"></param>
            <param name="baseDelay"></param>
            <param name="maxBackOffMs"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ExecUtils.CalculateExponentialDelay(System.Int32)">
            <summary>
            Calculate exponential retry back-off.
            </summary>
            <param name="retriesAttempted"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ExecUtils.CalculateExponentialDelay(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate exponential retry back-off.
            </summary>
            <param name="retriesAttempted"></param>
            <param name="baseDelay"></param>
            <param name="maxBackOffMs"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FuncUtils.TryExec(System.Action)">
            <summary>
            Invokes the action provided and returns true if no excpetion was thrown.
            Otherwise logs the exception and returns false if an exception was thrown.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.IPAddressExtensions">
            <summary>
            Useful IPAddressExtensions from: 
            http://blogs.msdn.com/knom/archive/2008/12/31/ip-address-calculations-with-c-subnetmasks-networks.aspx
            
            </summary>
        </member>
        <member name="M:ServiceStack.IPAddressExtensions.GetAllNetworkInterfaceIpv4Addresses">
            <summary>
            Gets the ipv4 addresses from all Network Interfaces that have Subnet masks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.IPAddressExtensions.GetAllNetworkInterfaceIpv6Addresses">
            <summary>
            Gets the ipv6 addresses from all Network Interfaces.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.JS.Configure">
            <summary>
            Configure ServiceStack.Text JSON Serializer to use Templates JS parsing
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.ConsoleLogFactory">
            <summary>
            Creates a Console Logger, that logs all messages to: System.Console
            
            Made public so its testable
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.ConsoleLogger">
            <summary>
            Default logger is to Console.WriteLine
            
            Made public so its testable
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Log(System.Object,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.LogFormat(System.Object,System.Object[])">
            <summary>
            Logs the format.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ConsoleLogger.Log(System.Object)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.DebugLogFactory">
            <summary>
            Creates a Debug Logger, that logs all messages to: System.Diagnostics.Debug
            
            Made public so its testable
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.DebugLogger">
            <summary>
            Default logger is to System.Diagnostics.Debug.WriteLine
            
            Made public so its testable
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Log(System.Object,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.LogFormat(System.Object,System.Object[])">
            <summary>
            Logs the format.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.DebugLogger.Log(System.Object)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ExecuteType">
            <summary>
            Categories of sql statements.
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.None">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.NonQuery">
            <summary>
            DML statements that alter database state, e.g. INSERT, UPDATE
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.Scalar">
            <summary>
            Statements that return a single record
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ExecuteType.Reader">
            <summary>
            Statements that iterate over a result set
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.IDbProfiler">
            <summary>
            A callback for ProfiledDbConnection and family
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.ExecuteStart(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType)">
            <summary>
            Called when a command starts executing
            </summary>
            <param name="profiledDbCommand"></param>
            <param name="executeType"></param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.ExecuteFinish(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType,System.Data.Common.DbDataReader)">
            <summary>
            Called when a reader finishes executing
            </summary>
            <param name="profiledDbCommand"></param>
            <param name="executeType"></param>
            <param name="reader"></param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.ReaderFinish(System.Data.Common.DbDataReader)">
            <summary>
            Called when a reader is done iterating through the data 
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.IDbProfiler.OnError(System.Data.Common.DbCommand,ServiceStack.MiniProfiler.Data.ExecuteType,System.Exception)">
            <summary>
            Called when an error happens during execution of a command 
            </summary>
            <param name="profiledDbCommand"></param>
            <param name="executeType"></param>
            <param name="exception"></param>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.IDbProfiler.IsActive">
            <summary>
            True if the profiler instance is active
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ProfiledConnection">
            <summary>
            Wraps a database connection, allowing sql execution timings to be collected when a <see cref="T:ServiceStack.MiniProfiler.Data.IDbProfiler"/> session is started.
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledConnection.#ctor(System.Data.Common.DbConnection,ServiceStack.MiniProfiler.Data.IDbProfiler,System.Boolean)">
            <summary>
            Returns a new <see cref="T:ServiceStack.MiniProfiler.Data.ProfiledConnection"/> that wraps <paramref name="connection"/>, 
            providing query execution profiling.  If profiler is null, no profiling will occur.
            </summary>
            <param name="connection">Your provider-specific flavor of connection, e.g. SqlConnection, OracleConnection</param>
            <param name="profiler">The currently started <see cref="T:ServiceStack.MiniProfiler.Data.IDbProfiler"/> or null.</param>
            <param name="autoDisposeConnection">Determines whether the ProfiledDbConnection will dispose the underlying connection.</param>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.InnerConnection">
            <summary>
            The underlying, real database connection to your db provider.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.Profiler">
            <summary>
            The current profiler instance; could be null.
            </summary>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledConnection.WrappedConnection">
            <summary>
            The raw connection this is wrapping
            </summary>
        </member>
        <member name="T:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory">
            <summary>
            Wrapper for a db provider factory to enable profiling
            </summary>
        </member>
        <member name="F:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.Instance">
            <summary>
            Every provider factory must have an Instance public field
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.InitProfiledDbProviderFactory(ServiceStack.MiniProfiler.Data.IDbProfiler,System.Data.Common.DbProviderFactory)">
            <summary>
            Allow to re-init the provider factory.
            </summary>
            <param name="profiler"></param>
            <param name="wrappedFactory"></param>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.#ctor(ServiceStack.MiniProfiler.Data.IDbProfiler,System.Data.Common.DbProviderFactory)">
            <summary>
            proxy
            </summary>
            <param name="profiler"></param>
            <param name="wrappedFactory"></param>
        </member>
        <member name="P:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CanCreateDataSourceEnumerator">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateDataSourceEnumerator">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateCommand">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateConnection">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateParameter">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateConnectionStringBuilder">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateCommandBuilder">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreateDataAdapter">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.MiniProfiler.Data.ProfiledProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
            <summary>
            proxy
            </summary>
        </member>
        <member name="M:ServiceStack.PerfUtils.MeasureFor(System.Action,System.Int32)">
            <summary>
            Runs an action for a minimum of runForMs
            </summary>
            <param name="fn">What to run</param>
            <param name="runForMs">Minimum ms to run for</param>
            <returns>time elapsed in micro seconds</returns>
        </member>
        <member name="M:ServiceStack.PerfUtils.Measure(System.Action,System.Int32,System.Int32,System.Action,System.Action,System.Action)">
            <summary>
            Returns average microseconds an action takes when run for the specified runForMs
            </summary>
            <param name="fn">What to run</param>
            <param name="times">How many times to run for each iteration</param>
            <param name="runForMs">Minimum ms to run for</param>
            <param name="setup"></param>
            <param name="warmup"></param>
            <param name="teardown"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.StringUtils.SafeInput(System.String)">
            <summary>
            Protect against XSS by cleaning non-standared User Input
            </summary>
        </member>
        <member name="T:ServiceStack.Support.AdapterBase">
            <summary>
            Common functionality when creating adapters
            </summary>
        </member>
        <member name="M:ServiceStack.Support.AdapterBase.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified expression. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Support.AdapterBase.Execute(System.Action)">
            <summary>
            Executes the specified action (for void methods).
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:ServiceStack.Support.InMemoryLogFactory">
            <summary>
            Note: InMemoryLog keeps all logs in memory, so don't use it long running exceptions
            
            Returns a thread-safe InMemoryLog which you can use while *TESTING*
            to provide a detailed analysis of your logs.
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.LayoutPage">
            <summary>
            Use specified Layout 
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.Layout">
            <summary>
            Use Layout with specified name
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.NoLayout">
            <summary>
            Render without any Layout
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.Model">
            <summary>
            
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.Args">
            <summary>
            Add additional Args available to all pages 
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.TemplateFilters">
            <summary>
            Add additional template filters available to all pages
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.Options">
            <summary>
            Return additional HTTP Headers in HTTP Requests
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.ContentType">
            <summary>
            Specify the Content-Type of the Response 
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.PageTransformers">
            <summary>
            Transform the Page output using a chain of stream transformers
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.OutputTransformers">
            <summary>
            Transform the entire output using a chain of stream transformers
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.FilterTransformers">
            <summary>
            Available transformers that can transform context filter stream outputs
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.ExcludeFiltersNamed">
            <summary>
            Don't allow access to specified filters
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.LastFilterError">
            <summary>
            The last error thrown by a filter
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.LastFilterStackTrace">
            <summary>
            The StackTrace where the Last Error Occured 
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.AssignExceptionsTo">
            <summary>
            What argument errors should be binded to
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.SkipFilterExecution">
            <summary>
            Whether to skip execution of all page filters and just write template string fragments
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.SkipExecutingFiltersIfError">
            <summary>
            Overrides Context to specify whether to Ignore or Continue executing filters on error 
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.RethrowExceptions">
            <summary>
            Whether to always rethrow Exceptions
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.PageResult.HaltExecution">
            <summary>
            Immediately halt execution of the page
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.TemplateConfig.FatalExceptions">
            <summary>
            Rethrow fatal exceptions thrown on incorrect API usage    
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.TemplateContext.FilterTransformers">
            <summary>
            Available transformers that can transform context filter stream outputs
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.TemplateContext.CheckForModifiedPagesAfter">
            How long in between checking for modified pages
        </member>
        <member name="P:ServiceStack.Templates.TemplateContext.RenderExpressionExceptions">
            <summary>
            Render render filter exceptions in-line where filter is located
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.TemplateContext.AssignExceptionsTo">
            <summary>
            What argument to assign Fitler Exceptions to
            </summary>
        </member>
        <member name="P:ServiceStack.Templates.TemplateContext.SkipExecutingFiltersIfError">
            <summary>
            Whether to 
            </summary>
        </member>
        <member name="T:ServiceStack.UrnId">
            <summary>
            Creates a Unified Resource Name (URN) with the following formats:
            
            	- urn:{TypeName}:{IdFieldValue}						e.g. urn:UserSession:1
            	- urn:{TypeName}:{IdFieldName}:{IdFieldValue}		e.g. urn:UserSession:UserId:1			
            
            </summary>
        </member>
    </members>
</doc>
