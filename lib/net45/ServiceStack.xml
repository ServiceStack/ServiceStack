<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceStack</name>
    </assembly>
    <members>
        <member name="T:ServiceStack.AppHostBase">
            <summary>
            Inherit from this class if you want to host your web services inside an
            ASP.NET application.
            </summary>
        </member>
        <member name="M:ServiceStack.AppHostExtensions.GetContainer(ServiceStack.IAppHost)">
            <summary>
            Get an IAppHost container. 
            Note: Registering dependencies should only be done during setup/configuration 
            stage and remain immutable there after for thread-safety.
            </summary>
            <param name="appHost"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.AppHostHttpListenerBase">
            <summary>
            Inherit from this class if you want to host your web services inside a 
            Console Application, Windows Service, etc.
            
            Usage of HttpListener allows you to host webservices on the same port (:80) as IIS 
            however it requires admin user privillages.
            </summary>
        </member>
        <member name="M:ServiceStack.AppHostHttpListenerPoolBase.ThreadPoolManager.Dispose">
            <summary>
            Exécute les tâches définies par l'application associées à la libération ou à la redéfinition des ressources non managées.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ServiceStack.AspNet.ServiceStackPage.UnauthorizedRedirectUrl">
            <summary>
            Default redirct URL if [Authenticate] attribute doesn't permit access.
            </summary>
        </member>
        <member name="P:ServiceStack.AspNet.ServiceStackPage.ForbiddenRedirectUrl">
            <summary>
            Default redirct URL if Required Role or Permission attributes doesn't permit access.
            </summary>
        </member>
        <member name="T:ServiceStack.AuthenticateAttribute">
            <summary>
            Indicates that the request dto, which is associated with this attribute,
            requires authentication.
            </summary>
        </member>
        <member name="P:ServiceStack.AuthenticateAttribute.Provider">
            <summary>
            Restrict authentication to a specific <see cref="T:ServiceStack.Auth.IAuthProvider"/>.
            For example, if this attribute should only permit access
            if the user is authenticated with <see cref="T:ServiceStack.Auth.BasicAuthProvider"/>,
            you should set this property to <see cref="F:ServiceStack.Auth.BasicAuthProvider.Name"/>.
            </summary>
        </member>
        <member name="P:ServiceStack.AuthenticateAttribute.HtmlRedirect">
            <summary>
            Redirect the client to a specific URL if authentication failed.
            If this property is null, simply `401 Unauthorized` is returned.
            </summary>
        </member>
        <member name="T:ServiceStack.AuthFeature">
            <summary>
            Enable the authentication feature and configure the AuthService.
            </summary>
        </member>
        <member name="P:ServiceStack.AuthFeature.CreateDigestAuthHashes">
            <summary>
            Whether to Create Digest Auth MD5 Hash when Creating/Updating Users.
            Defaults to only creating Digest Auth when DigestAuthProvider is registered.
            </summary>
        </member>
        <member name="P:ServiceStack.AuthFeature.SaveUserNamesInLowerCase">
            <summary>
            Should UserName or Emails be saved in AuthRepository in LowerCase
            </summary>
        </member>
        <member name="M:ServiceStack.AuthFeature.RegisterAuthProvider(ServiceStack.Auth.IAuthProvider)">
            <summary>
            Use a plugin to register authProvider dynamically. Your plugin can implement `IPreInitPlugin` interface
            to call `appHost.GetPlugin&lt;AuthFeature&gt;().RegisterAuthProvider()` before the AuthFeature is registered.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.IManageApiKeys">
            <summary>
            The Interface Auth Repositories need to implement to support API Keys
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.ApiKey">
            <summary>
            The POCO Table used to persist API Keys
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.ApiKeyAuthProvider">
            <summary>
            Enable access to protected Services using API Keys
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.ServiceRoutes">
            <summary>
            Modify the registration of GetApiKeys and RegenerateApiKeys Services
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.KeySizeBytes">
            <summary>
            How much entropy should the generated keys have. (default 24)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.Environments">
            <summary>
            Generate different keys for different environments. (default live,test)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.KeyTypes">
            <summary>
            Different types of Keys each user can have. (default secret)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.ExpireKeysAfter">
            <summary>
            Whether to automatically expire keys. (default no expiry)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.InitSchema">
            <summary>
            Automatically create the ApiKey Table for AuthRepositories which need it. (default true)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.RequireSecureConnection">
            <summary>
            Whether to only allow access via API Key from a secure connection. (default true)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.GenerateApiKey">
            <summary>
            Change how API Key is generated
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.CreateApiKeyFilter">
            <summary>
            Run custom filter after API Key is created
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.SessionCacheDuration">
            <summary>
            Cache the User Session so it can be reused between subsequent API Key Requests
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.ApiKeyAuthProvider.AllowInHttpParams">
            <summary>
            Whether to allow API Keys in 'apikey' QueryString or FormData
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.AspNetWindowsAuthProvider.AllRoles">
            <summary>
            Specify all roles to be used by this application
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.AspNetWindowsAuthProvider.LimitAccessToRoles">
            <summary>
            Only allow access to users in specified roles
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.ValidateFn">
            <summary>
            Inject logic into existing services by introspecting the request and injecting your own
            validation logic. Exceptions thrown will have the same behaviour as if the service threw it.
            
            If a non-null object is returned the request will short-circuit and return that response.
            </summary>
            <param name="service">The instance of the service</param>
            <param name="httpMethod">GET,POST,PUT,DELETE</param>
            <param name="requestDto"></param>
            <returns>Response DTO; non-null will short-circuit execution and return that response</returns>
        </member>
        <member name="M:ServiceStack.Auth.AuthenticateService.GetAuthProviders(System.String)">
            <summary>
            Get AuthProviders Registered in AuthFeature Plugin.
            </summary>
            <param name="provider">specific provider, or null for all providers</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ServiceStack.Auth.AuthenticateService.GetAuthProvider(System.String)">
            <summary>
            Get specific AuthProvider
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Auth.AuthenticateService.Authenticate(ServiceStack.Authenticate)">
            <summary>
            Public API entry point to authenticate via code
            </summary>
            <param name="request"></param>
            <returns>null; if already autenticated otherwise a populated instance of AuthResponse</returns>
        </member>
        <member name="M:ServiceStack.Auth.AuthenticateService.Authenticate(ServiceStack.Authenticate,System.String,ServiceStack.Auth.IAuthSession,ServiceStack.Auth.IAuthProvider)">
            <summary>
            The specified <paramref name="session"/> may change as a side-effect of this method. If
            subsequent code relies on current <see cref="T:ServiceStack.Auth.IAuthSession"/> data be sure to reload
            the session istance via <see cref="M:ServiceStack.ServiceExtensions.GetSession(ServiceStack.IServiceBase,System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.AuthEvents">
            <summary>
            Conveneint base class with empty virtual methods so subclasses only need to override the hooks they need.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.AuthProvider.FallbackConfig(System.String)">
            <summary>
            Allows specifying a global fallback config that if exists is formatted with the Provider as the first arg.
            E.g. this appSetting with the TwitterAuthProvider: 
            oauth.CallbackUrl="http://localhost:11001/auth/{0}"
            Would result in: 
            oauth.CallbackUrl="http://localhost:11001/auth/twitter"
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Auth.AuthProvider.Logout(ServiceStack.IServiceBase,ServiceStack.Authenticate)">
            <summary>
            Remove the Users Session
            </summary>
            <param name="service"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Auth.FacebookAuthProvider">
            <summary>
            Create a Facebook App at: https://developers.facebook.com/apps
            The Callback URL for your app should match the CallbackUrl provided.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.GithubAuthProvider">
            <summary>
              Create an App at: https://github.com/settings/applications/new
              The Callback URL for your app should match the CallbackUrl provided.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ServiceStack.Auth.GoogleAuthProvider" -->
        <member name="M:ServiceStack.Auth.AuthHttpGateway.DownloadYammerUserInfo(System.String)">
            <summary>
            Download Yammer User Info given its ID.
            </summary>
            <param name="yammerUserId">
            The Yammer User ID.
            </param>
            <returns>
            The User info in JSON format.
            </returns>
            <remarks>
            <para>
            Yammer provides a method to retrieve current user information via
            "https://www.yammer.com/api/v1/users/current.json".
            </para>
            <para>
            However, to ensure consistency with the rest of the Auth codebase,
            the explicit URL will be used, where [:id] denotes the User ID: 
            "https://www.yammer.com/api/v1/users/[:id].json"
            </para>
            <para>
            Refer to: https://developer.yammer.com/restapi/ for full documentation.
            </para>
            </remarks>
        </member>
        <member name="M:ServiceStack.Auth.IAuthProvider.Logout(ServiceStack.IServiceBase,ServiceStack.Authenticate)">
            <summary>
            Remove the Users Session
            </summary>
            <param name="service"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Auth.IAuthProvider.Authenticate(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession,ServiceStack.Authenticate)">
            <summary>
            The entry point for all AuthProvider providers. Runs inside the AuthService so exceptions are treated normally.
            Overridable so you can provide your own Auth implementation.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.IAuthProvider.IsAuthorized(ServiceStack.Auth.IAuthSession,ServiceStack.Auth.IAuthTokens,ServiceStack.Authenticate)">
            <summary>
            Determine if the current session is already authenticated with this AuthProvider
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.IAuthSession.OnRegistered(ServiceStack.Web.IRequest,ServiceStack.Auth.IAuthSession,ServiceStack.IServiceBase)">
            <summary>
            Called when the user is registered or on the first OAuth login 
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.IAuthSession.OnAuthenticated(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession,ServiceStack.Auth.IAuthTokens,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Called after the user has successfully authenticated 
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.IAuthSession.OnLogout(ServiceStack.IServiceBase)">
            <summary>
            Fired before the session is removed after the /auth/logout Service is called
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.IAuthSession.OnCreated(ServiceStack.Web.IRequest)">
            <summary>
            Fired when a new Session is created
            </summary>
            <param name="httpReq"></param>
        </member>
        <member name="M:ServiceStack.Auth.IAuthSessionExtended.OnLoad(ServiceStack.Web.IRequest)">
            <summary>
            Fired before Session is resolved
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.IAuthSessionExtended.Validate(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession,ServiceStack.Auth.IAuthTokens,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Override with Custom Validation logic to Assert if User is allowed to Authenticate. 
            Returning a non-null response invalidates Authentication with IHttpResult response returned to client.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.InMemoryAuthRepository">
            <summary>
            Thread-safe In memory UserAuth data store so it can be used without a dependency on Redis.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.JwtAuthProvider">
            <summary>
            Used to Issue and process JWT Tokens and registers ConvertSessionToToken Service to convert Sessions to JWT Tokens
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProvider.SetBearerTokenOnAuthenticateResponse">
            <summary>
            Whether to populate the Bearer Token in the AuthenticateResponse
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.JwtAuthProviderReader">
            <summary>
            Enable access to protected Services using JWT Tokens
            </summary>
        </member>
        <member name="F:ServiceStack.Auth.JwtAuthProviderReader.HmacAlgorithms">
            <summary>
            Different HMAC Algorithms supported
            </summary>
        </member>
        <member name="F:ServiceStack.Auth.JwtAuthProviderReader.RsaSignAlgorithms">
            <summary>
            Different RSA Signing Algorithms supported
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.RequireSecureConnection">
            <summary>
            Whether to only allow access via API Key from a secure connection. (default true)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.CreateHeaderFilter">
            <summary>
            Run custom filter after JWT Header is created
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.CreatePayloadFilter">
            <summary>
            Run custom filter after JWT Payload is created
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.PopulateSessionFilter">
            <summary>
            Run custom filter after session is restored from a JWT Token
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.EncryptPayload">
            <summary>
            Whether to encrypt JWE Payload (default false). 
            Uses RSA-OAEP for Key Encryption and AES/128/CBC HMAC SHA256 for Content Encryption
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.HashAlgorithm">
            <summary>
            Which Hash Algorithm should be used to sign the JWT Token. (default HS256)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.RequireHashAlgorithm">
            <summary>
            Whether to only allow processing of JWT Tokens using the configured HashAlgorithm. (default true)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.Issuer">
            <summary>
            The Issuer to embed in the token. (default ssjwt)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.Audience">
            <summary>
            The Audience to embed in the token. (default null)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.Audiences">
            <summary>
            Embed Multiple Audiences in the token. (default none)
            A JWT is valid if it contains ANY audience in this List
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.KeyId">
            <summary>
            What Id to use to identify the Key used to sign the token. (default First 3 chars of Base64 Key)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.AuthKey">
            <summary>
            The AuthKey used to sign the JWT Token
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.FallbackAuthKeys">
            <summary>
            Allow verification using multiple Auth keys
            </summary>
        </member>
        <member name="F:ServiceStack.Auth.JwtAuthProviderReader._privateKey">
            <summary>
            The RSA Private Key used to Sign the JWT Token when RSA is used
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.PrivateKeyXml">
            <summary>
            Convenient overload to initialize the Private Key via exported XML
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.PublicKey">
            <summary>
            The RSA Public Key used to Verify the JWT Token when RSA is used
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.PublicKeyXml">
            <summary>
            Convenient overload to initialize the Public Key via exported XML
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.FallbackPublicKeys">
            <summary>
            Allow verification using multiple public keys
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.ExpireTokensIn">
            <summary>
            How long should JWT Tokens be valid for. (default 14 days)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.ExpireRefreshTokensIn">
            <summary>
            How long should JWT Refresh Tokens be valid for. (default 365 days)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.ExpireTokensInDays">
            <summary>
            Convenient overload to initialize ExpireTokensIn with an Integer
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.ValidateToken">
            <summary>
            Allow custom logic to invalidate JWT Tokens
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.ValidateRefreshToken">
            <summary>
            Allow custom logic to invalidate Refresh Tokens
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.InvalidateTokensIssuedBefore">
            <summary>
            Whether to invalidate all JWT Tokens issued before a specified date.
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.ServiceRoutes">
            <summary>
            Modify the registration of ConvertSessionToToken Service
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.AllowInQueryString">
            <summary>
            Allow JWT in ?ss-tok=jwt QueryString. (default false)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.AllowInFormData">
            <summary>
            Allow JWT in ss-tok=jwt HTML POST FormData. (default false)
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.RemoveInvalidTokenCookie">
            <summary>
            Whether to automatically remove expired or invalid cookies
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.JwtAuthProviderReader.IncludeJwtInConvertSessionToTokenResponse">
            <summary>
            Whether to also Include Token in ConvertSessionToTokenResponse   
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.JwtAuthProviderReader.GetValidJwtPayload(ServiceStack.Web.IRequest,System.String)">
            <summary>
            Return token payload which is both verified and still valid
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.JwtAuthProviderReader.GetVerifiedJwtPayload(ServiceStack.Web.IRequest,System.String[])">
            <summary>
            Return token payload which has been verified to be created using the configured encryption key.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.OAuthProvider.Authenticate(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession,ServiceStack.Authenticate)">
            <summary>
            The entry point for all AuthProvider providers. Runs inside the AuthService so exceptions are treated normally.
            Overridable so you can provide your own Auth implementation.
            </summary>
            <param name="authService"></param>
            <param name="session"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Auth.OAuthProvider.Init(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession@,ServiceStack.Authenticate)">
            <summary>
            Sets the CallbackUrl and session.ReferrerUrl if not set and initializes the session tokens for this AuthProvider
            </summary>
            <param name="authService"></param>
            <param name="session"></param>
            <param name="request"> </param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Auth.OdnoklassnikiAuthProvider">
            <summary>
              Create Odnoklassniki App at: http://www.odnoklassniki.ru/devaccess
              The Callback URL for your app should match the CallbackUrl provided.
              
              NB: They claim they use OAuth 2.0, but they in fact don't. 
              http://apiok.ru/wiki/display/api/Authorization+OAuth+2.0
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.Pbkdf2Provider">
            <summary>
            Allow utilizing an alternative PBKDF2 implementation.
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.Pbkdf2Provider.DeriveKey">
            <summary>
            The PBKDF2 strategy PasswordHasher implementation that's used for hashing PBKDF2 passwords.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.PasswordHasher">
            <summary>
            The Password Hasher provider used to hash users passwords which uses the same algorithm used by ASP.NET Identity v3:
            PBKDF2 with HMAC-SHA256, 128-bit salt, 256-bit subkey, 10000 iterations.
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.PasswordHasher.IterationCount">
            <summary>
            Gets the number of iterations used when hashing passwords using PBKDF2. Default is 10,000.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.PasswordHasher.#ctor(System.Int32)">
            <summary>
            The number of iterations used when hashing passwords using PBKDF2. Default is 10,000.
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.PasswordHasher.Version">
            <summary>
            The Format Version specifier for this PasswordHasher embedded as the first byte in password hashes.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.PasswordHasher.HashPassword(System.String)">
            <summary>
            Returns a hashed representation of the supplied <paramref name="password"/> for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose password is to be hashed.</param>
            <param name="password">The password to hash.</param>
            <returns>A hashed representation of the supplied <paramref name="password"/> for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="T:ServiceStack.Auth.KeyDerivationPrf">
            <summary>
            Specifies the PRF which should be used for the key derivation algorithm.
            </summary>
        </member>
        <member name="F:ServiceStack.Auth.KeyDerivationPrf.HMACSHA1">
            <summary>
            The HMAC algorithm (RFC 2104) using the SHA-1 hash function (FIPS 180-4).
            </summary>
        </member>
        <member name="F:ServiceStack.Auth.KeyDerivationPrf.HMACSHA256">
            <summary>
            The HMAC algorithm (RFC 2104) using the SHA-256 hash function (FIPS 180-4).
            </summary>
        </member>
        <member name="F:ServiceStack.Auth.KeyDerivationPrf.HMACSHA512">
            <summary>
            The HMAC algorithm (RFC 2104) using the SHA-512 hash function (FIPS 180-4).
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.KeyDerivation">
            <summary>
            Provides algorithms for performing key derivation.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.KeyDerivation.Pbkdf2(System.String,System.Byte[],ServiceStack.Auth.KeyDerivationPrf,System.Int32,System.Int32)">
            <summary>
            Performs key derivation using the PBKDF2 algorithm.
            </summary>
            <param name="password">The password from which to derive the key.</param>
            <param name="salt">The salt to be used during the key derivation process.</param>
            <param name="prf">The pseudo-random function to be used in the key derivation process.</param>
            <param name="iterationCount">The number of iterations of the pseudo-random function to apply
            during the key derivation process.</param>
            <param name="numBytesRequested">The desired length (in bytes) of the derived key.</param>
            <returns>The derived key.</returns>
            <remarks>
            The PBKDF2 algorithm is specified in RFC 2898.
            </remarks>
        </member>
        <member name="T:ServiceStack.Auth.IPbkdf2Provider">
            <summary>
            Internal interface used for abstracting away the PBKDF2 implementation since the implementation is OS-specific.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.ManagedPbkdf2Provider">
            <summary>
            A PBKDF2 provider which utilizes the managed hash algorithm classes as PRFs.
            This isn't the preferred provider since the implementation is slow, but it is provided as a fallback.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.RegisterService.Put(ServiceStack.Register)">
            <summary>
            Update an existing registraiton
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.RegisterService.Post(ServiceStack.Register)">
            <summary>
                Create new Registration
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.RegisterService.UpdateUserAuth(ServiceStack.Register)">
            <summary>
            Logic to update UserAuth from Registration info, not enabled on PUT because of security.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.SaltedHash">
            <summary>
            Thank you Martijn
            http://www.dijksterhuis.org/creating-salted-hash-values-in-c/
            
            Stronger/Slower Alternative: 
            https://github.com/defuse/password-hashing/blob/master/PasswordStorage.cs
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.TwitterAuthProvider">
            <summary>
            Create an app at https://dev.twitter.com/apps to get your ConsumerKey and ConsumerSecret for your app.
            The Callback URL for your app should match the CallbackUrl provided.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.UserAuthRepositoryExtensions.AssignRoles(ServiceStack.Auth.IAuthRepository,ServiceStack.Auth.IUserAuth,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Creates the required missing tables or DB schema 
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.VkAuthProvider">
            <summary>
              Create VK App at: http://vk.com/editapp?act=create
              The Callback URL for your app should match the CallbackUrl provided.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.VkAuthProvider.EnsureLatestCode(System.String)">
            <summary>
            If previous attemts failes, the subsequential calls 
            build up code value like "code1,code2,code3"
            so we need the last one only
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Auth.YammerAuthProvider">
            <summary>
            The ServiceStack Yammer OAuth provider.
            </summary>
            <remarks>
            <para>
            This provider is loosely based on the existing ServiceStack's Facebook OAuth provider.
            </para>
            <para>
            For the full info on Yammer's OAuth2 authentication flow, refer to:
            https://developer.yammer.com/authentication/#a-oauth2
            </para>
            <para>
            Note: Add these to your application / web config settings under appSettings and replace
            values as appropriate.
            <![CDATA[
                <!-- ServiceStack Yammer OAuth config -->
                <add key="oauth.yammer.ClientId" value=""/>
                <add key="oauth.yammer.ClientSecret" value=""/>
                <add key="oauth.yammer.AccessTokenUrl" value="https://www.yammer.com/oauth2/access_token.json"/>
                <add key="oauth.yammer.CallbackUrl" value="~/"/>
                <add key="oauth.yammer.PreAuthUrl" value="https://www.yammer.com/dialog/oauth"/>
                <add key="oauth.yammer.Realm" value="https://www.yammer.com"/>
                <add key="oauth.yammer.RedirectUrl" value="~/auth/yammer"/>
            ]]>
            </para>
            </remarks>
        </member>
        <member name="F:ServiceStack.Auth.YammerAuthProvider.Name">
            <summary>
            The OAuth provider name / identifier.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.YammerAuthProvider.#ctor(ServiceStack.Configuration.IAppSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Auth.YammerAuthProvider"/> class.
            </summary>
            <param name="appSettings">
            The application settings (in web.config).
            </param>
        </member>
        <member name="P:ServiceStack.Auth.YammerAuthProvider.ClientId">
            <summary>
            Gets or sets the Yammer OAuth client id.
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.YammerAuthProvider.ClientSecret">
            <summary>
            Gets or sets the Yammer OAuth client secret.
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.YammerAuthProvider.PreAuthUrl">
            <summary>
            Gets or sets the Yammer OAuth pre-auth url.
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.YammerAuthProvider.Authenticate(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession,ServiceStack.Authenticate)">
            <summary>
            Authenticate against Yammer OAuth endpoint.
            </summary>
            <param name="authService">
            The auth service.
            </param>
            <param name="session">
            The session.
            </param>
            <param name="request">
            The request.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ServiceStack.Auth.YammerAuthProvider.LoadUserAuthInfo(ServiceStack.AuthUserSession,ServiceStack.Auth.IAuthTokens,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Load the UserAuth info into the session.
            </summary>
            <param name="userSession">
            The User session.
            </param>
            <param name="tokens">
            The OAuth tokens.
            </param>
            <param name="authInfo">
            The auth info.
            </param>
        </member>
        <member name="M:ServiceStack.Auth.YammerAuthProvider.LoadUserOAuthProvider(ServiceStack.Auth.IAuthSession,ServiceStack.Auth.IAuthTokens)">
            <summary>
            Load the UserOAuth info into the session.
            </summary>
            <param name="authSession">
            The auth session.
            </param>
            <param name="tokens">
            The OAuth tokens.
            </param>
        </member>
        <member name="T:ServiceStack.Auth.EmailAddresses">
            <summary>
            The Yammer User's email addresses.
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.EmailAddresses.Type">
            <summary>
            Gets or sets the email address type (e.g. primary).
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.EmailAddresses.Address">
            <summary>
            Gets or sets the email address.
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.YandexAuthProvider">
            <summary>
              Create Yandex App at: https://oauth.yandex.ru/client/new
              The Callback URL for your app should match the CallbackUrl provided.
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.ServiceBaseUrl">
            <summary>
            The BaseUrl of the ServiceStack instance (inferred)
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.ServiceName">
            <summary>
            Name of the ServiceStack Instance (inferred)
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.ServiceDescription">
            <summary>
            Textual description of the AutoQuery Services (shown in Home Services list)
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.ServiceIconUrl">
            <summary>
            Icon for this ServiceStack Instance (shown in Home Services list)
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.Formats">
            <summary>
            The different Content Type formats to display
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.MaxLimit">
            <summary>
            The configured MaxLimit for AutoQuery
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.IsPublic">
            <summary>
            Whether to publish this Service to the public Services registry
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.OnlyShowAnnotatedServices">
            <summary>
            Only show AutoQuery Services attributed with [AutoQueryViewer]
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.ImplicitConventions">
            <summary>
            List of different Search Filters available
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.DefaultSearchField">
            <summary>
            The Column which should be selected by default
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.DefaultSearchType">
            <summary>
            The Query Type filter which should be selected by default
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.DefaultSearchText">
            <summary>
            The search text which should be populated by default
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.BrandUrl">
            <summary>
            Link to your website users can click to find out more about you
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.BrandImageUrl">
            <summary>
            A custom logo or image that users can click on to visit your site
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.TextColor">
            <summary>
            The default color of text
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.LinkColor">
            <summary>
            The default color of links
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.BackgroundColor">
            <summary>
            The default background color of each screen
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.BackgroundImageUrl">
            <summary>
            The default background image of each screen anchored to the bottom left
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerConfig.IconUrl">
            <summary>
            The default icon for each of your AutoQuery Services
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerUserInfo.IsAuthenticated">
            <summary>
            Returns true if the User Is Authenticated
            </summary>
        </member>
        <member name="P:ServiceStack.AutoQueryViewerUserInfo.QueryCount">
            <summary>
            How many queries are available to this user
            </summary>
        </member>
        <member name="M:ServiceStack.CacheClientExtensions.RemoveByPattern(ServiceStack.Caching.ICacheClient,System.String)">
            <summary>
            Removes items from cache that have keys matching the specified wildcard pattern
            </summary>
            <param name="cacheClient">Cache client</param>
            <param name="pattern">The wildcard, where "*" means any sequence of characters and "?" means any single character.</param>
        </member>
        <member name="M:ServiceStack.CacheClientExtensions.RemoveByRegex(ServiceStack.Caching.ICacheClient,System.String)">
            <summary>
            Removes items from the cache based on the specified regular expression pattern
            </summary>
            <param name="cacheClient">Cache client</param>
            <param name="regex">Regular expression pattern to search cache keys</param>
        </member>
        <member name="P:ServiceStack.CacheInfo.CacheKey">
            <summary>
            The CacheKey to be use store the response against
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.KeyBase">
            <summary>
            The base Cache Key used to cache the Service response
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.KeyModifiers">
            <summary>
            Additional CacheKey Modifiers used to cache different outputs for a single Service Response
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.ExpiresIn">
            <summary>
            How long to cache the resource for. Fallsback to HttpCacheFeature.DefaultExpiresIn
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.ETag">
            <summary>
            The unique ETag returned for this resource clients can use to determine whether their local version has changed
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.Age">
            <summary>
            The Age for this resource returned to clients
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.MaxAge">
            <summary>
            The MaxAge returned to clients to indicate how long they can use their local cache before re-validating
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.LastModified">
            <summary>
            The LastModified date to use for the Cache and HTTP Header 
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.CacheControl">
            <summary>
            Cache-Control HTTP Headers
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.VaryByUser">
            <summary>
            Create unique cache per user
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.LocalCache">
            <summary>
            Use HostContext.LocalCache or HostContext.Cache
            </summary>
        </member>
        <member name="P:ServiceStack.CacheInfo.NoCompression">
            <summary>
            Skip compression for this Cache Result
            </summary>
        </member>
        <member name="T:ServiceStack.CacheResponseAttribute">
            <summary>
            Cache the Response of a Service
            </summary>
        </member>
        <member name="P:ServiceStack.CacheResponseAttribute.Duration">
            <summary>
            Cache expiry in seconds
            </summary>
        </member>
        <member name="P:ServiceStack.CacheResponseAttribute.MaxAge">
            <summary>
            MaxAge in seconds
            </summary>
        </member>
        <member name="P:ServiceStack.CacheResponseAttribute.CacheControl">
            <summary>
            Cache-Control HTTP Headers
            </summary>
        </member>
        <member name="P:ServiceStack.CacheResponseAttribute.VaryByUser">
            <summary>
            Vary cache per user
            </summary>
        </member>
        <member name="P:ServiceStack.CacheResponseAttribute.VaryByRoles">
            <summary>
            Vary cache for users in these roles
            </summary>
        </member>
        <member name="P:ServiceStack.CacheResponseAttribute.VaryByHeaders">
            <summary>
            Vary cache for different HTTP Headers
            </summary>
        </member>
        <member name="P:ServiceStack.CacheResponseAttribute.LocalCache">
            <summary>
            Use HostContext.LocalCache or HostContext.Cache
            </summary>
        </member>
        <member name="P:ServiceStack.CacheResponseAttribute.NoCompression">
            <summary>
            Skip compression for this Cache Result
            </summary>
        </member>
        <member name="T:ServiceStack.Caching.CacheClientWithPrefix">
            <summary>
            Decorates the ICacheClient (and its sibblings) prefixing every key with the given prefix
            
            Usefull for multi-tenant environments
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.CacheClientWithPrefixExtensions.WithPrefix(ServiceStack.Caching.ICacheClient,System.String)">
            <summary>
            Decorates the ICacheClient (and its sibblings) prefixing every key with the given prefix
            
            Usefull for multi-tenant environments
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.CacheEntry.#ctor(System.Object,System.Nullable{System.DateTime})">
            <summary>
            Create new instance of CacheEntry.
            </summary>
        </member>
        <member name="P:ServiceStack.Caching.MemoryCacheClient.CacheEntry.ExpiresAt">
            <summary>UTC time at which CacheEntry expires.</summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.CacheAdd(System.String,System.Object,System.Nullable{System.DateTime})">
            <summary>
            Stores The value with key only if such key doesn't exist at the server yet. 
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.CacheSet(System.String,System.Object,System.DateTime)">
            <summary>
            Adds or replaces the value with key.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.CacheSet(System.String,System.Object,System.Nullable{System.DateTime},System.Nullable{System.Int64})">
            <summary>
            Adds or replaces the value with key. 
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.CacheReplace(System.String,System.Object,System.Nullable{System.DateTime})">
            <summary>
            Replace the value with specified key if it exists.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Add``1(System.String,``0)">
            <summary>
            Add the value with key to the cache, set to never expire.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Set``1(System.String,``0)">
            <summary>
            Add or replace the value with key to the cache, set to never expire.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Replace``1(System.String,``0)">
            <summary>
            Replace the value with key in the cache, set to never expire.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Add``1(System.String,``0,System.DateTime)">
            <summary>
            Add the value with key to the cache, set to expire at specified DateTime.
            </summary>
            <remarks>This method examines the DateTimeKind of expiresAt to determine if conversion to
            universal time is needed. The version of Add that takes a TimeSpan expiration is faster 
            than using this method with a DateTime of Kind other than Utc, and is not affected by 
            ambiguous local time during daylight savings/standard time transition.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Set``1(System.String,``0,System.DateTime)">
            <summary>
            Add or replace the value with key to the cache, set to expire at specified DateTime.
            </summary>
            <remarks>This method examines the DateTimeKind of expiresAt to determine if conversion to
            universal time is needed. The version of Set that takes a TimeSpan expiration is faster 
            than using this method with a DateTime of Kind other than Utc, and is not affected by 
            ambiguous local time during daylight savings/standard time transition.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Replace``1(System.String,``0,System.DateTime)">
            <summary>
            Replace the value with key in the cache, set to expire at specified DateTime.
            </summary>
            <remarks>This method examines the DateTimeKind of expiresAt to determine if conversion to
            universal time is needed. The version of Replace that takes a TimeSpan expiration is faster 
            than using this method with a DateTime of Kind other than Utc, and is not affected by 
            ambiguous local time during daylight savings/standard time transition.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Add``1(System.String,``0,System.TimeSpan)">
            <summary>
            Add the value with key to the cache, set to expire after specified TimeSpan.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Add or replace the value with key to the cache, set to expire after specified TimeSpan.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.MemoryCacheClient.Replace``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replace the value with key in the cache, set to expire after specified TimeSpan.
            </summary>
        </member>
        <member name="T:ServiceStack.Configuration.AppSettings">
            <summary>
            More familiar name for the new crowd.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.AppSettings.#ctor(System.String)">
            <summary>
            The tier lets you specify a retrieving a setting with the tier prefix first before falling back to the original key. 
            E.g a tier of 'Live' looks for 'Live.{Key}' or if not found falls back to '{Key}'.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.AppSettings.GetString(System.String)">
            <summary>
            Returns string if exists, otherwise null
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:ServiceStack.Configuration.Config.DefaultNamespace">
            <summary>
            Would've preferred to use [assembly: ContractNamespace] attribute but it is not supported in Mono
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetNullableAppSetting(System.String)">
            <summary>
            Gets the nullable app setting.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetAppSetting(System.String)">
            <summary>
            Gets the app setting.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetAppSetting(System.String,System.String)">
            <summary>
            Returns AppSetting[key] if exists otherwise defaultValue
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetAppSetting``1(System.String,``0)">
            <summary>
            Returns AppSetting[key] if exists otherwise defaultValue, for non-string values
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetConnectionString(System.String)">
            <summary>
            Gets the connection string.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetListFromAppSetting(System.String)">
            <summary>
            Gets the list from app setting.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ConfigUtils.GetDictionaryFromAppSetting(System.String)">
            <summary>
            Gets the dictionary from app setting.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.ISettings.Get(System.String)">
            <summary>
            Provides a common interface for Settings providers such as
            ConfigurationManager or Azure's RoleEnvironment. The only
            requirement is that if the implementation cannot find the
            specified key, the return value must be null
            </summary>
            <param name="key">The key for the setting</param>
            <returns>The string value of the specified key, or null if the key
            was invalid</returns>
        </member>
        <member name="M:ServiceStack.Configuration.ISettings.GetAllKeys">
            <summary>
            Return all keys in this configuration source.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Configuration.MultiAppSettingsBuilder">
            <summary>
            Represents a builder for the <see cref="T:ServiceStack.Configuration.MultiAppSettings"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.MultiAppSettingsBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Configuration.MultiAppSettingsBuilder"/> class with a specified <paramref name="tier"/>.
            </summary>
            <param name="tier">The <paramref name="tier"/> of the <see cref="T:ServiceStack.Configuration.MultiAppSettingsBuilder"/>.</param>
        </member>
        <member name="M:ServiceStack.Configuration.MultiAppSettingsBuilder.AddAppSettings">
            <summary>
            Adds an <see cref="T:ServiceStack.Configuration.AppSettings"/> that reads configuration values from the Web.config file.
            </summary>
            <returns>The <see cref="T:ServiceStack.Configuration.MultiAppSettingsBuilder"/>.</returns>
        </member>
        <member name="M:ServiceStack.Configuration.MultiAppSettingsBuilder.AddAppSettings(System.String)">
            <summary>
            Adds an <see cref="T:ServiceStack.Configuration.AppSettings"/> that reads configuration values from the Web.config file.
            </summary>
            <param name="tier">The tier of the <see cref="T:ServiceStack.Configuration.AppSettings"/>.</param>
            <returns>The <see cref="T:ServiceStack.Configuration.MultiAppSettingsBuilder"/>.</returns>
        </member>
        <member name="M:ServiceStack.Configuration.MultiAppSettingsBuilder.AddDictionarySettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds a <see cref="T:ServiceStack.Configuration.DictionarySettings"/> that reads configuration values from a dictionary.
            </summary>
            <param name="map">The dictionary of settings to add.</param>
            <returns>The <see cref="T:ServiceStack.Configuration.MultiAppSettingsBuilder"/>.</returns>
        </member>
        <member name="M:ServiceStack.Configuration.MultiAppSettingsBuilder.AddEnvironmentalVariables">
            <summary>
            Adds an <see cref="T:ServiceStack.Configuration.EnvironmentVariableSettings"/> that reads configuration values from environmental variables.
            </summary>
            <returns>The <see cref="T:ServiceStack.Configuration.MultiAppSettingsBuilder"/>.</returns>
        </member>
        <member name="M:ServiceStack.Configuration.MultiAppSettingsBuilder.AddEnvironmentalVariables(System.String)">
            <summary>
            Adds an <see cref="T:ServiceStack.Configuration.EnvironmentVariableSettings"/> that reads configuration values from environmental variables.
            </summary>
            <param name="tier">The tier of the <see cref="T:ServiceStack.Configuration.AppSettings"/>.</param>
            <returns>The <see cref="T:ServiceStack.Configuration.MultiAppSettingsBuilder"/>.</returns>
        </member>
        <member name="M:ServiceStack.Configuration.MultiAppSettingsBuilder.AddTextFile(System.String)">
            <summary>
            Adds an <see cref="T:ServiceStack.Configuration.TextFileSettings"/> that reads configuration values from a text file at <paramref name="path"/>.
            </summary>
            <param name="path">The path of the text file.</param>
            <returns>The <see cref="T:ServiceStack.Configuration.MultiAppSettingsBuilder"/>.</returns>
        </member>
        <member name="M:ServiceStack.Configuration.MultiAppSettingsBuilder.AddTextFile(System.String,System.String)">
            <summary>
            Adds an <see cref="T:ServiceStack.Configuration.TextFileSettings"/> that reads configuration values from a text file at <paramref name="path"/> with a specified <paramref name="delimeter"/>.
            </summary>
            <param name="path">The path of the text file.</param>
            <param name="delimeter">The delimeter fo the text file.</param>
            <returns>The <see cref="T:ServiceStack.Configuration.MultiAppSettingsBuilder"/>.</returns>
        </member>
        <member name="M:ServiceStack.Configuration.MultiAppSettingsBuilder.AddTextFile(System.String,System.String,System.String)">
            <summary>
            Adds an <see cref="T:ServiceStack.Configuration.TextFileSettings"/> that reads configuration values from a text file at <paramref name="path"/> with a specified <paramref name="delimeter"/>.
            </summary>
            <param name="path">The path of the text file.</param>
            <param name="delimeter">The delimeter fo the text file.</param>
            <param name="tier">The tier of the <see cref="T:ServiceStack.Configuration.TextFileSettings"/>.</param>
            <returns>The <see cref="T:ServiceStack.Configuration.MultiAppSettingsBuilder"/>.</returns>
        </member>
        <member name="M:ServiceStack.Configuration.MultiAppSettingsBuilder.Build">
            <summary>
            Builds an <see cref="T:ServiceStack.Configuration.IAppSettings"/>.
            </summary>
            <returns>An <see cref="T:ServiceStack.Configuration.IAppSettings"/>.</returns>
        </member>
        <member name="T:ServiceStack.ContainerNetCoreExtensions">
            <summary>
            Wrappers for improving consistency with .NET Core Conventions
            </summary>
        </member>
        <member name="M:ServiceStack.ContainerTypeExtensions.RegisterAutoWiredType(Funq.Container,System.Type,System.Type,Funq.ReuseScope)">
            <summary>
            Registers the type in the IoC container and
            adds auto-wiring to the specified type.
            </summary>
            <param name="serviceType"></param>
            <param name="inFunqAsType"></param>
        </member>
        <member name="M:ServiceStack.ContainerTypeExtensions.RegisterAutoWiredType(Funq.Container,System.String,System.Type,System.Type,Funq.ReuseScope)">
            <summary>
            Registers a named instance of type in the IoC container and
            adds auto-wiring to the specified type.
            </summary>
            <param name="serviceType"></param>
            <param name="inFunqAsType"></param>
        </member>
        <member name="M:ServiceStack.ContainerTypeExtensions.RegisterAutoWiredType(Funq.Container,System.Type,Funq.ReuseScope)">
            <summary>
            Registers the type in the IoC container and
            adds auto-wiring to the specified type.
            The reuse scope is set to none (transient).
            </summary>
            <param name="serviceTypes"></param>
        </member>
        <member name="M:ServiceStack.ContainerTypeExtensions.RegisterAutoWiredType(Funq.Container,System.String,System.Type,Funq.ReuseScope)">
            <summary>
            Registers the type in the IoC container and
            adds auto-wiring to the specified type.
            The reuse scope is set to none (transient).
            </summary>
            <param name="serviceTypes"></param>
        </member>
        <member name="M:ServiceStack.ContainerTypeExtensions.RegisterAutoWiredTypes(Funq.Container,System.Collections.Generic.IEnumerable{System.Type},Funq.ReuseScope)">
            <summary>
            Registers the types in the IoC container and
            adds auto-wiring to the specified types.
            The reuse scope is set to none (transient).
            </summary>
            <param name="serviceTypes"></param>
        </member>
        <member name="M:ServiceStack.ContainerTypeExtensions.Register(Funq.Container,System.Object,System.Type)">
            <summary>
            Register a singleton instance as a runtime type
            </summary>
        </member>
        <member name="T:ServiceStack.CorsFeature">
            <summary>
            Plugin adds support for Cross-origin resource sharing (CORS, see http://www.w3.org/TR/access-control/). 
            CORS allows to access resources from different domain which usually forbidden by origin policy. 
            </summary>
        </member>
        <member name="M:ServiceStack.CorsFeature.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.Nullable{System.Int32})">
            <summary>
            Represents a default constructor with Allow Origin equals to "*", Allowed GET, POST, PUT, DELETE, OPTIONS request and allowed "Content-Type" header.
            </summary>
        </member>
        <member name="T:ServiceStack.DefaultRequestAttribute">
            <summary>
            Lets you Register new Services and the optional restPaths will be registered against 
            this default Request Type
            </summary>
        </member>
        <member name="T:ServiceStack.DefaultViewAttribute">
            <summary>
            Change the default HTML view or template used for the HTML response of this service
            </summary>
        </member>
        <member name="T:ServiceStack.DisposableTracker">
            <summary>
            Tracks created <see cref="T:System.IDisposable"></see> objects.
            Used by <see cref="T:ServiceStack.RequestContext"></see> to track <see cref="T:Funq.Container"></see> created IDisposable instances.
            These instances are tracked and disposed at the end of a request.
            </summary>
        </member>
        <member name="M:ServiceStack.DisposableTracker.Add(System.IDisposable)">
            <summary>
            Adds disposable to the tracker
            </summary>
        </member>
        <member name="M:ServiceStack.DisposableTracker.Dispose">
            <summary>
            Dispose all disposables in the tracker.
            If disposable is still alive alose <see cref="T:ServiceStack.HostContext"></see>.Release() is called to release the object.
            </summary>
        </member>
        <member name="F:ServiceStack.DtoUtils.ResponseStatusPropertyName">
            <summary>
            Naming convention for the ResponseStatus property name on the response DTO
            </summary>
        </member>
        <member name="M:ServiceStack.DtoUtils.CreateResponseDto(System.Object,ServiceStack.ResponseStatus)">
            <summary>
            Create an instance of the service response dto type and inject it with the supplied responseStatus
            </summary>
            <param name="request"></param>
            <param name="responseStatus"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.DtoUtils.CreateErrorResponse(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="iocResolver"></param>
            <param name="request"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.DtoUtils.GetRequestErrorBody(System.Object)">
            <summary>
            Override to provide additional/less context about the Service Exception. 
            By default the request is serialized and appended to the ResponseStatus StackTrace.
            </summary>
        </member>
        <member name="T:ServiceStack.EnableCorsAttribute">
            <summary>
            Attribute marks that specific response class has support for Cross-origin resource sharing (CORS, see http://www.w3.org/TR/access-control/). CORS allows to access resources from different domain which usually forbidden by origin policy. 
            </summary>
        </member>
        <member name="M:ServiceStack.EnableCorsAttribute.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Represents a default constructor with Allow Origin equals to "*", Allowed GET, POST, PUT, DELETE, OPTIONS request and allowed "Content-Type" header.
            </summary>
        </member>
        <member name="T:ServiceStack.EnsureHttpsAttribute">
            <summary>
            Redirect to the https:// version of this url if not already.
            </summary>
        </member>
        <member name="P:ServiceStack.EnsureHttpsAttribute.SkipIfDebugMode">
            <summary>
            Don't redirect when in DebugMode
            </summary>
        </member>
        <member name="P:ServiceStack.EnsureHttpsAttribute.SkipIfXForwardedFor">
            <summary>
            Don't redirect if the request was a forwarded request, e.g. from a Load Balancer
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.AbstractValidator`1">
            <summary>
            Base class for entity validator classes.
            </summary>
            <typeparam name="T">The type of the object being validated</typeparam>
            <summary>
            Base class for entity validator classes.
            </summary>
            <typeparam name="T">The type of the object being validated</typeparam>
        </member>
        <member name="P:ServiceStack.FluentValidation.AbstractValidator`1.CascadeMode">
            <summary>
            Sets the cascade mode for all rules within this validator.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.Validate(`0)">
            <summary>
            Validates the specified instance
            </summary>
            <param name="instance">The object to validate</param>
            <returns>A ValidationResult object containing any validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the specified instance asynchronously
            </summary>
            <param name="instance">The object to validate</param>
            <param name="cancellation">Cancellation token</param>
            <returns>A ValidationResult object containing any validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.Validate(ServiceStack.FluentValidation.ValidationContext{`0})">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="context">Validation Context</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.ValidateAsync(ServiceStack.FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)">
            <summary>
            Validates the specified instance asynchronously.
            </summary>
            <param name="context">Validation Context</param>
            <param name="cancellation">Cancellation token</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.AddRule(ServiceStack.FluentValidation.IValidationRule)">
            <summary>
            Adds a rule to the current validator.
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.CreateDescriptor">
            <summary>
            Creates a <see cref="T:ServiceStack.FluentValidation.IValidatorDescriptor" /> that can be used to obtain metadata about the current validator.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Defines a validation rule for a specify property.
            </summary>
            <example>
            RuleFor(x => x.Surname)...
            </example>
            <typeparam name="TProperty">The type of property being validated</typeparam>
            <param name="expression">The expression representing the property to validate</param>
            <returns>an IRuleBuilder instance on which validators can be defined</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
            Invokes a rule for each item in the collection
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="expression">Expression representing the collection to validate</param>
            <returns>An IRuleBuilder instance on which validators can be defined</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.Custom(System.Func{`0,ServiceStack.FluentValidation.Results.ValidationFailure})">
            <summary>
            Defines a custom validation rule using a lambda expression.
            If the validation rule fails, it should return a instance of a <see cref="T:ServiceStack.FluentValidation.Results.ValidationFailure">ValidationFailure</see>
            If the validation rule succeeds, it should return null.
            </summary>
            <param name="customValidator">A lambda that executes custom validation rules.</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.Custom(System.Func{`0,ServiceStack.FluentValidation.ValidationContext{`0},ServiceStack.FluentValidation.Results.ValidationFailure})">
            <summary>
            Defines a custom validation rule using a lambda expression.
            If the validation rule fails, it should return an instance of <see cref="T:ServiceStack.FluentValidation.Results.ValidationFailure">ValidationFailure</see>
            If the validation rule succeeds, it should return null.
            </summary>
            <param name="customValidator">A lambda that executes custom validation rules</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.CustomAsync(System.Func{`0,System.Threading.Tasks.Task{ServiceStack.FluentValidation.Results.ValidationFailure}})">
            <summary>
            Defines a custom asynchronous validation rule using a lambda expression.
            If the validation rule fails, it should asynchronously return a instance of a <see cref="T:ServiceStack.FluentValidation.Results.ValidationFailure">ValidationFailure</see>
            If the validation rule succeeds, it should return null.
            </summary>
            <param name="customValidator">A lambda that executes custom validation rules.</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.CustomAsync(System.Func{`0,ServiceStack.FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{ServiceStack.FluentValidation.Results.ValidationFailure}})">
            <summary>
            Defines a custom asynchronous validation rule using a lambda expression.
            If the validation rule fails, it should asynchronously return an instance of <see cref="T:ServiceStack.FluentValidation.Results.ValidationFailure">ValidationFailure</see>
            If the validation rule succeeds, it should return null.
            </summary>
            <param name="customValidator">A lambda that executes custom validation rules</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.RuleSet(System.String,System.Action)">
            <summary>
            Defines a RuleSet that can be used to group together several validators.
            </summary>
            <param name="ruleSetName">The name of the ruleset.</param>
            <param name="action">Action that encapsulates the rules in the ruleset.</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.When(System.Func{`0,System.Boolean},System.Action)">
            <summary>
            Defines a condition that applies to several rules
            </summary>
            <param name="predicate">The condition that should apply to multiple rules</param>
            <param name="action">Action that encapsulates the rules.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.Unless(System.Func{`0,System.Boolean},System.Action)">
            <summary>
            Defines an inverse condition that applies to several rules
            </summary>
            <param name="predicate">The condition that should be applied to multiple rules</param>
            <param name="action">Action that encapsulates the rules</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.WhenAsync(System.Func{`0,System.Threading.Tasks.Task{System.Boolean}},System.Action)">
            <summary>
            Defines an asynchronous condition that applies to several rules
            </summary>
            <param name="predicate">The asynchronous condition that should apply to multiple rules</param>
            <param name="action">Action that encapsulates the rules.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.UnlessAsync(System.Func{`0,System.Threading.Tasks.Task{System.Boolean}},System.Action)">
            <summary>
            Defines an inverse asynchronous condition that applies to several rules
            </summary>
            <param name="predicate">The asynchronous condition that should be applied to multiple rules</param>
            <param name="action">Action that encapsulates the rules</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.Include(ServiceStack.FluentValidation.IValidator{`0})">
            <summary>
            Includes the rules from the specified validator
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of validation rules.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.EnsureInstanceNotNull(System.Object)">
            <summary>
            Throws an exception if the instance being validated is null.
            </summary>
            <param name="instanceToValidate"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.AbstractValidator`1.RuleSet(ServiceStack.ApplyTo,System.Action)">
            <summary>
            Defines a RuleSet that can be used to provide specific validation rules for specific HTTP methods (GET, POST...)
            </summary>
            <param name="appliesTo">The HTTP methods where this rule set should be used.</param>
            <param name="action">Action that encapuslates the rules in the ruleset.</param>
        </member>
        <member name="T:ServiceStack.FluentValidation.DependentRules`1">
            <summary>
            Container class for dependent rule definitions
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.FluentValidation.AssemblyScanner">
            <summary>
            Class that can be used to find all the validators from a collection of types.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AssemblyScanner.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a scanner that works on a sequence of types.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AssemblyScanner.FindValidatorsInAssembly(System.Reflection.Assembly)">
            <summary>
            Finds all the validators in the specified assembly.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AssemblyScanner.FindValidatorsInAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Finds all the validators in the specified assemblies
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AssemblyScanner.FindValidatorsInAssemblyContaining``1">
            <summary>
            Finds all the validators in the assembly containing the specified type.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AssemblyScanner.ForEach(System.Action{ServiceStack.FluentValidation.AssemblyScanner.AssemblyScanResult})">
            <summary>
            Performs the specified action to all of the assembly scan results.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AssemblyScanner.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:ServiceStack.FluentValidation.AssemblyScanner.AssemblyScanResult">
            <summary>
            Result of performing a scan.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.AssemblyScanner.AssemblyScanResult.#ctor(System.Type,System.Type)">
            <summary>
            Creates an instance of an AssemblyScanResult.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.AssemblyScanner.AssemblyScanResult.InterfaceType">
            <summary>
            Validator interface type, eg IValidator&lt;Foo&gt;
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.AssemblyScanner.AssemblyScanResult.ValidatorType">
            <summary>
            Concrete type that implements the InterfaceType, eg FooValidator.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Attributes.AttributedValidatorFactory">
            <summary>
            Implementation of <see cref="T:ServiceStack.FluentValidation.IValidatorFactory"/> and <see cref="T:ServiceStack.FluentValidation.IParameterValidatorFactory"/> that looks for
            the <see cref="T:ServiceStack.FluentValidation.Attributes.ValidatorAttribute"/> instance on the specified <see cref="T:System.Type"/> or
            <see cref="T:System.Reflection.ParameterInfo"/> in order to provide the validator instance.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Attributes.AttributedValidatorFactory.#ctor">
            <summary>
            Creates an instance of <see cref="T:ServiceStack.FluentValidation.Attributes.AttributedValidatorFactory"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Attributes.AttributedValidatorFactory.#ctor(System.Func{System.Type,ServiceStack.FluentValidation.IValidator})">
            <summary>
            Creates an instance of <see cref="T:ServiceStack.FluentValidation.Attributes.AttributedValidatorFactory"/> with the supplied instance factory delegate
            used for creation of <see cref="T:ServiceStack.FluentValidation.IValidator"/> instances.
            </summary>
            <param name="instanceFactory">The <see cref="T:ServiceStack.FluentValidation.IValidator"/> instance factory delegate.</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Attributes.AttributedValidatorFactory.GetValidator``1">
            <summary>
            Gets a validator for the appropriate type.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Attributes.AttributedValidatorFactory.GetValidator(System.Type)">
            <summary>
            Gets a validator for the appropriate type.
            </summary>
            <returns>Created <see cref="T:ServiceStack.FluentValidation.IValidator"/> instance; <see langword="null"/> if a validator cannot be
            created.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Attributes.AttributedValidatorFactory.GetValidator(System.Reflection.ParameterInfo)">
            <summary>
            Gets a validator for <paramref name="parameterInfo"/>.
            </summary>
            <param name="parameterInfo">The <see cref="T:System.Reflection.ParameterInfo"/> instance to get a validator for.</param>
            <returns>Created <see cref="T:ServiceStack.FluentValidation.IValidator"/> instance; <see langword="null"/> if a validator cannot be
            created.</returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Attributes.ValidatorAttribute">
            <summary>
            Validator attribute to define the class that will describe the Validation rules.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Attributes.ValidatorAttribute.ValidatorType">
            <summary>
            The type of the validator used to validate the current type or parameter.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Attributes.ValidatorAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of <see cref="T:ServiceStack.FluentValidation.Attributes.ValidatorAttribute"/> allowing a validator type to be specified.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.BackwardsCompatibilityExtensions.WithPropertyName``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.String)">
            <summary>
            Overrides the name of the property associated with this rule.
            NOTE: This is a considered to be an advanced feature. 99% of the time that you use this, you actually meant to use WithName.
            </summary>
            <param name="rule">The current rule</param>
            <param name="propertyName">The property name to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.BackwardsCompatibilityExtensions.WithLocalizedName``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Linq.Expressions.Expression{System.Func{System.String}},ServiceStack.FluentValidation.Resources.IResourceAccessorBuilder)">
            <summary>
            Specifies a localized name for the error message. 
            </summary>
            <param name="rule">The current rule</param>
            <param name="resourceSelector">The resource to use as an expression, eg () => Messages.MyResource</param>
            <param name="resourceAccessorBuilder">Resource accessor builder to use</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.BackwardsCompatibilityExtensions.WithLocalizedMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Linq.Expressions.Expression{System.Func{System.String}})">
            <summary>
            Specifies a custom error message resource to use when validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="resourceSelector">The resource to use as an expression, eg () => Messages.MyResource</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.BackwardsCompatibilityExtensions.WithLocalizedMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Linq.Expressions.Expression{System.Func{System.String}},System.Object[])">
            <summary>
            Specifies a custom error message resource to use when validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="resourceSelector">The resource to use as an expression, eg () => Messages.MyResource</param>
            <param name="formatArgs">Custom message format args</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.BackwardsCompatibilityExtensions.WithLocalizedMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Linq.Expressions.Expression{System.Func{System.String}},ServiceStack.FluentValidation.Resources.IResourceAccessorBuilder)">
            <summary>
            Specifies a custom error message resource to use when validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="resourceSelector">The resource to use as an expression, eg () => Messages.MyResource</param>
            <param name="resourceAccessorBuilder">The resource accessor builder to use. </param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.BackwardsCompatibilityExtensions.WithLocalizedMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Linq.Expressions.Expression{System.Func{System.String}},System.Func{``0,System.Object}[])">
            <summary>
            Specifies a custom error message resource to use when validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="resourceSelector">The resource to use as an expression, eg () => Messages.MyResource</param>
            <param name="formatArgs">Custom message format args</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.BackwardsCompatibilityExtensions.WithLocalizedName``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Type,System.String)">
            <summary>
            Specifies a localized name for the error message. 
            </summary>
            <param name="rule">The current rule</param>
            <param name="resourceType">The type of the generated resource file</param>
            <param name="resourceName">The name of the resource to use</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.BackwardsCompatibilityExtensions.WithMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.String,System.Object[])">
            <summary>
            Specifies a custom error message to use if validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="errorMessage">The error message to use</param>
            <param name="formatArgs">Additional arguments to be specified when formatting the custom error message.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.BackwardsCompatibilityExtensions.WithMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.String,System.Func{``0,System.Object}[])">
            <summary>
            Specifies a custom error message to use if validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="errorMessage">The error message to use</param>
            <param name="funcs">Additional property values to be included when formatting the custom error message.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.BackwardsCompatibilityExtensions.WithMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.String,System.Func{``0,``1,System.Object}[])">
            <summary>
            Specifies a custom error message to use if validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="errorMessage">The error message to use</param>
            <param name="funcs">Additional property values to use when formatting the custom error message.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.BackwardsCompatibilityExtensions.WithLocalizedMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Type,System.String,System.Object[])">
            <summary>
            Specifies a custom error message resource to use when validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="resourceName">Name of resource</param>
            <param name="formatArgs">Custom message format args</param>
            <param name="resourceType">Type of resource representing a resx file</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.BackwardsCompatibilityExtensions.WithLocalizedMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Type,System.String,System.Func{``0,System.Object}[])">
            <summary>
            Specifies a custom error message resource to use when validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="resourceName">Resource name</param>
            <param name="formatArgs">Custom message format args</param>
            <param name="resourceType">Resource type representing a resx file</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.BackwardsCompatibilityExtensions.ReplaceRule``1(ServiceStack.FluentValidation.IValidator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},ServiceStack.FluentValidation.Validators.IPropertyValidator)">
            <summary>
            Replace the first validator of this type and remove all the others.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.BackwardsCompatibilityExtensions.RemoveRule``1(ServiceStack.FluentValidation.IValidator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Type)">
            <summary>
            Remove all validators of the specified type.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.BackwardsCompatibilityExtensions.ClearRules``1(ServiceStack.FluentValidation.IValidator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Remove all validators for the given property.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.IResourceAccessorBuilder">
            <summary>
            Builds a delegate for retrieving a localised resource from a resource type and property name.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.IResourceAccessorBuilder.GetResourceAccessor(System.Type,System.String)">
            <summary>
            Gets a function that can be used to retrieve a message from a resource type and resource name.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.ILanguageManager">
            <summary>
            Allows the default error message translations to be managed. 
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.ILanguageManager.Enabled">
            <summary>
            Whether localization is enabled.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.ILanguageManager.Culture">
            <summary>
            Default culture to use for all requests to the LanguageManager. If not specified, uses the current UI culture. 
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.ILanguageManager.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets a translated string based on its key. If the culture is specific and it isn't registered, we try the neutral culture instead.
            If no matching culture is found  to be registered we use English.
            </summary>
            <param name="key">The key</param>
            <param name="culture">The culture to translate into</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.IStringSource">
            <summary>
            Provides error message templates
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.IStringSource.GetString(System.Object)">
            <summary>
            Construct the error message template
            </summary>
            <returns>Error message template</returns>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.IStringSource.ResourceName">
            <summary>
            The name of the resource if localized.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.IStringSource.ResourceType">
            <summary>
            The type of the resource provider if localized.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.IContextAwareStringSource">
            <summary>
            Marker interface that indicates a PropertyValidatorContext should be passed to GetString
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.Language">
            <summary>
            Base class for lanaguages
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.Language.Name">
            <summary>
            Name of language (culture code)
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.Language.Translate(System.String,System.String)">
            <summary>
            Adds a translation
            </summary>
            <param name="key"></param>
            <param name="message"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.Language.Translate``1(System.String)">
            <summary>
            Adds a translation for a type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.Language.GetTranslation(System.String)">
            <summary>
            Gets the localized version of a string with a specific key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.LanguageManager">
            <summary>
            Allows the default error message translations to be managed.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.LanguageManager.#ctor">
            <summary>
            Creates a new instance of the LanguageManager class.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.LanguageManager.Enabled">
            <summary>
            Whether localization is enabled.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.LanguageManager.Culture">
            <summary>
            Default culture to use for all requests to the LanguageManager. If not specified, uses the current UI culture.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.LanguageManager.GetSupportedLanguages">
            <summary>
            Provides a collection of all supported languages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.LanguageManager.Clear">
            <summary>
            Removes all languages except the default.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.LanguageManager.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets a translated string based on its key. If the culture is specific and it isn't registered, we try the neutral culture instead.
            If no matching culture is found  to be registered we use English.
            </summary>
            <param name="key">The key</param>
            <param name="culture">The culture to translate into</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.LanguageStringSource">
            <summary>
            IStringSource implementation that uses the default language manager.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.LazyStringSource">
            <summary>
            Lazily loads the string
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.LazyStringSource.#ctor(System.Func{System.Object,System.String})">
            <summary>
            Creates a LazyStringSource
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.LazyStringSource.GetString(System.Object)">
            <summary>
            Gets the value
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.LazyStringSource.ResourceName">
            <summary>
            Resource type
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.LazyStringSource.ResourceType">
            <summary>
            Resource name
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.ContextAwareLazyStringSource.#ctor(System.Func{ServiceStack.FluentValidation.Validators.PropertyValidatorContext,System.String})">
            <summary>
            Creates a LazyStringSource
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.ContextAwareLazyStringSource.GetString(System.Object)">
            <summary>
            Gets the value
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.ContextAwareLazyStringSource.ResourceName">
            <summary>
            Resource type
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.ContextAwareLazyStringSource.ResourceType">
            <summary>
            Resource name
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.LocalizedStringSource">
            <summary>
            Represents a localized string.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.LocalizedStringSource.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of the LocalizedErrorMessageSource class using the specified resource name and resource type.
            </summary>
            <param name="resourceType">The resource type</param>
            <param name="resourceName">The resource name</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.LocalizedStringSource.#ctor(System.Type,System.String,ServiceStack.FluentValidation.Resources.IResourceAccessorBuilder)">
            <summary>
            Creates a new instance of the LocalizedErrorMessageSource class using the specified resource name and resource type.
            </summary>
            <param name="resourceType">The resource type</param>
            <param name="resourceName">The resource name</param>
            <param name="resourceAccessorBuilder">Strategy used to construct the resource accessor</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.LocalizedStringSource.CreateFromExpression(System.Linq.Expressions.Expression{System.Func{System.String}},ServiceStack.FluentValidation.Resources.IResourceAccessorBuilder)">
            <summary>
            Creates a LocalizedStringSource from an expression: () => MyResources.SomeResourceName
            </summary>
            <param name="expression">The expression </param>
            <param name="resourceProviderSelectionStrategy">Strategy used to construct the resource accessor</param>
            <returns>Error message source</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.LocalizedStringSource.GetString(System.Object)">
            <summary>
            Construct the error message template
            </summary>
            <returns>Error message template</returns>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.LocalizedStringSource.ResourceName">
            <summary>
            The name of the resource if localized.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.LocalizedStringSource.ResourceType">
            <summary>
            The type of the resource provider if localized.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.LocalizedStringSource.GetResourceProperty(System.Type@,System.String@)">
            <summary>
            Gets the PropertyInfo for a resource.
            ResourceType and ResourceName are ref parameters to allow derived types
            to replace the type/name of the resource before the delegate is constructed.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.OverridableLocalizedStringSource">
            <summary>
            Version of LocalizedStringSource that allows the specified ResourceType to be replaced by the default resource type specified in ValidatorOptions.ResourceProviderType.
            This is typically only used by the default validator types built into FV, or if you're building a library of validators. Don't use it in rule definitions. 
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.OverridableLocalizedStringSource.GetResourceProperty(System.Type@,System.String@)">
            <summary>
            Gets the PropertyInfo for a resource.
            ResourceType and ResourceName are ref parameters to allow derived types
            to replace the type/name of the resource before the delegate is constructed.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.OverridableLocalizedStringSource.CreateFromExpression(System.Linq.Expressions.Expression{System.Func{System.String}})">
            <summary>
            Creates a OverridableLocalizedStringSource from an expression: () => MyResources.SomeResourceName
            </summary>
            <param name="expression">The expression </param>
            <returns>Error message source</returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.ResourceAccessor">
            <summary>
            Defines an accessor for localization resources
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.ResourceAccessor.Accessor">
            <summary>
            Function that can be used to retrieve the resource
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.ResourceAccessor.ResourceType">
            <summary>
            Resource type
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.ResourceAccessor.ResourceName">
            <summary>
            Resource name
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Resources.StaticStringSource">
            <summary>
            Represents a static string.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.StaticStringSource.#ctor(System.String)">
            <summary>
            Creates a new StringErrorMessageSource using the specified error message as the error template.
            </summary>
            <param name="message">The error message template.</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Resources.StaticStringSource.GetString(System.Object)">
            <summary>
            Construct the error message template
            </summary>
            <returns>Error message template</returns>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.StaticStringSource.ResourceName">
            <summary>
            The name of the resource if localized.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Resources.StaticStringSource.ResourceType">
            <summary>
            The type of the resource provider if localized.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.CollectionValidatorExtensions">
            <summary>
            Extension methods for collection validation rules 
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.CollectionValidatorExtensions.SetCollectionValidator``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Collections.Generic.IEnumerable{``1}},ServiceStack.FluentValidation.IValidator{``1})">
            <summary>
            Associates an instance of IValidator with the current property rule and is used to validate each item within the collection.
            </summary>
            <param name="ruleBuilder">Rule builder</param>
            <param name="validator">The validator to use</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.CollectionValidatorExtensions.SetCollectionValidator``3(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``2})">
            <summary>
            Uses a provider to instantiate a validator instance to be associated with a collection
            </summary>
            <param name="ruleBuilder"></param>
            <param name="validator"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TCollectionElement"></typeparam>
            <typeparam name="TValidator"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.CollectionValidatorExtensions.ICollectionValidatorRuleBuilder`2">
            <summary>
            Collection rule builder syntax
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TCollectionElement"></typeparam>
        </member>
        <member name="M:ServiceStack.FluentValidation.CollectionValidatorExtensions.ICollectionValidatorRuleBuilder`2.Where(System.Func{`1,System.Boolean})">
            <summary>
            Defines a condition to be used to determine if validation should run
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.DefaultValidatorExtensions">
            <summary>
            Extension methods that provide the default set of validators.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.NotNull``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1})">
            <summary>
            Defines a 'not null' validator on the current rule builder. 
            Validation will fail if the property is null.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Null``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1})">
            <summary>
            Defines a 'null' validator on the current rule builder. 
            Validation will fail if the property is not null.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.NotEmpty``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1})">
            <summary>
            Defines a 'not empty' validator on the current rule builder.
            Validation will fail if the property is null, an empty or the default value for the type (for example, 0 for integers)
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Empty``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1})">
            <summary>
            Defines a 'empty' validator on the current rule builder.
            Validation will fail if the property is not null, an empty or the default value for the type (for example, 0 for integers)
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Length``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String},System.Int32,System.Int32)">
            <summary>
            Defines a length validator on the current rule builder, but only for string properties.
            Validation will fail if the length of the string is outside of the specified range. The range is inclusive.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Length``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String},System.Func{``0,System.Int32},System.Func{``0,System.Int32})">
            <summary>
            Defines a length validator on the current rule builder, but only for string properties.
            Validation will fail if the length of the string is outside of the specified range. The range is inclusive.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Length``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String},System.Int32)">
            <summary>
            Defines a length validator on the current rule builder, but only for string properties.
            Validation will fail if the length of the string is not equal to the length specified.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="exactLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Length``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String},System.Func{``0,System.Int32})">
            <summary>
            Defines a length validator on the current rule builder, but only for string properties.
            Validation will fail if the length of the string is not equal to the length specified.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="exactLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Matches``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String},System.String)">
            <summary>
            Defines a regular expression validator on the current rule builder, but only for string properties.
            Validation will fail if the value returned by the lambda does not match the regular expression.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The regular expression to check the value against.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.MaximumLength``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String},System.Int32)">
            <summary>
            Defines a length validator on the current rule builder, but only for string properties.
            Validation will fail if the length of the string is larger than the length specified.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="maximumLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.MinimumLength``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String},System.Int32)">
            <summary>
            Defines a length validator on the current rule builder, but only for string properties.
            Validation will fail if the length of the string is less than the length specified.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="minimumLength"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Matches``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String},System.Func{``0,System.String})">
            <summary>
            Defines a regular expression validator on the current rule builder, but only for string properties.
            Validation will fail if the value returned by the lambda does not match the regular expression.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The regular expression to check the value against.</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Matches``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String},System.Text.RegularExpressions.Regex)">
            <summary>
            Defines a regular expression validator on the current rule builder, but only for string properties.
            Validation will fail if the value returned by the lambda does not match the regular expression.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="regex">The regular expression to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Matches``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String},System.Func{``0,System.Text.RegularExpressions.Regex})">
            <summary>
            Defines a regular expression validator on the current rule builder, but only for string properties.
            Validation will fail if the value returned by the lambda does not match the regular expression.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="regex">The regular expression to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Matches``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String},System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Defines a regular expression validator on the current rule builder, but only for string properties.
            Validation will fail if the value returned by the lambda does not match the regular expression.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The regular expression to check the value against.</param>
            <param name="options">Regex options</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Matches``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String},System.Func{``0,System.String},System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Defines a regular expression validator on the current rule builder, but only for string properties.
            Validation will fail if the value returned by the lambda does not match the regular expression.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The regular expression to check the value against.</param>
            <param name="options">Regex options</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.EmailAddress``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String})">
            <summary>
            Defines a regular expression validator on the current rule builder, but only for string properties.
            Validation will fail if the value returned by the lambda is not a valid email address.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.NotEqual``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1,System.Collections.IEqualityComparer)">
            <summary>
            Defines a 'not equal' validator on the current rule builder.
            Validation will fail if the specified value is equal to the value of the property.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="toCompare">The value to compare</param>
            <param name="comparer">Equality comparer to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.NotEqual``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.IEqualityComparer)">
            <summary>
            Defines a 'not equal' validator on the current rule builder using a lambda to specify the value.
            Validation will fail if the value returned by the lambda is equal to the value of the property.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">A lambda expression to provide the comparison value</param>
            <param name="comparer">Equality Comparer to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Equal``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1,System.Collections.IEqualityComparer)">
            <summary>
            Defines an 'equals' validator on the current rule builder. 
            Validation will fail if the specified value is not equal to the value of the property.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="toCompare">The value to compare</param>
            <param name="comparer">Equality Comparer to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Equal``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.IEqualityComparer)">
            <summary>
            Defines an 'equals' validator on the current rule builder using a lambda to specify the comparison value.
            Validation will fail if the value returned by the lambda is not equal to the value of the property.
            </summary>
            <typeparam name="T">The type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">A lambda expression to provide the comparison value</param>
            <param name="comparer">Equality comparer to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Must``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Defines a predicate validator on the current rule builder using a lambda expression to specify the predicate.
            Validation will fail if the specified lambda returns false.
            Validation will succeed if the specified lambda returns true.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="predicate">A lambda expression specifying the predicate</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Must``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Defines a predicate validator on the current rule builder using a lambda expression to specify the predicate.
            Validation will fail if the specified lambda returns false.
            Validation will succeed if the specified lambda returns true.
            This overload accepts the object being validated in addition to the property being validated.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="predicate">A lambda expression specifying the predicate</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Must``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Func{``0,``1,ServiceStack.FluentValidation.Validators.PropertyValidatorContext,System.Boolean})">
            <summary>
            Defines a predicate validator on the current rule builder using a lambda expression to specify the predicate.
            Validation will fail if the specified lambda returns false.
            Validation will succeed if the specified lambda returns true.
            This overload accepts the object being validated in addition to the property being validated.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="predicate">A lambda expression specifying the predicate</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.MustAsync``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Func{``1,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Defines an asynchronous predicate validator on the current rule builder using a lambda expression to specify the predicate.
            Validation will fail if the specified lambda returns false.
            Validation will succeed if the specified lambda returns true.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="predicate">A lambda expression specifying the predicate</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.MustAsync``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Defines an asynchronous predicate validator on the current rule builder using a lambda expression to specify the predicate.
            Validation will fail if the specified lambda returns false.
            Validation will succeed if the specified lambda returns true.
            This overload accepts the object being validated in addition to the property being validated.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="predicate">A lambda expression specifying the predicate</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.MustAsync``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Func{``0,``1,ServiceStack.FluentValidation.Validators.PropertyValidatorContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Defines an asynchronous predicate validator on the current rule builder using a lambda expression to specify the predicate.
            Validation will fail if the specified lambda returns false.
            Validation will succeed if the specified lambda returns true.
            This overload accepts the object being validated in addition to the property being validated.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="predicate">A lambda expression specifying the predicate</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1)">
            <summary>
            Defines a 'less than' validator on the current rule builder. 
            The validation will succeed if the property value is less than the specified value.
            The validation will fail if the property value is greater than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>
            Defines a 'less than' validator on the current rule builder. 
            The validation will succeed if the property value is less than the specified value.
            The validation will fail if the property value is greater than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1)">
            <summary>
            Defines a 'less than or equal' validator on the current rule builder. 
            The validation will succeed if the property value is less than or equal to the specified value.
            The validation will fail if the property value is greater than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>
            Defines a 'less than or equal' validator on the current rule builder. 
            The validation will succeed if the property value is less than or equal to the specified value.
            The validation will fail if the property value is greater than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1)">
            <summary>
            Defines a 'greater than' validator on the current rule builder. 
            The validation will succeed if the property value is greater than the specified value.
            The validation will fail if the property value is less than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>
            Defines a 'greater than' validator on the current rule builder. 
            The validation will succeed if the property value is greater than the specified value.
            The validation will fail if the property value is less than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1)">
            <summary>
            Defines a 'greater than or equal' validator on the current rule builder. 
            The validation will succeed if the property value is greater than or equal the specified value.
            The validation will fail if the property value is less than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>
            Defines a 'greater than or equal' validator on the current rule builder. 
            The validation will succeed if the property value is greater than or equal the specified value.
            The validation will fail if the property value is less than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'less than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is less than the specified value.
            The validation will fail if the property value is greater than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">A lambda that should return the value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            Defines a 'less than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is less than the specified value.
            The validation will fail if the property value is greater than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">A lambda that should return the value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'less than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is less than the specified value.
            The validation will fail if the property value is greater than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">A lambda that should return the value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            Defines a 'less than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is less than the specified value.
            The validation will fail if the property value is greater than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">A lambda that should return the value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'less than or equal' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is less than or equal to the specified value.
            The validation will fail if the property value is greater than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            Defines a 'less than or equal' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is less than or equal to the specified value.
            The validation will fail if the property value is greater than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'less than or equal' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is less than or equal to the specified value.
            The validation will fail if the property value is greater than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.LessThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            Defines a 'less than or equal' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is less than or equal to the specified value.
            The validation will fail if the property value is greater than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'less than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is greater than the specified value.
            The validation will fail if the property value is less than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            Defines a 'less than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is greater than the specified value.
            The validation will fail if the property value is less than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'less than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is greater than the specified value.
            The validation will fail if the property value is less than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThan``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            Defines a 'less than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is greater than the specified value.
            The validation will fail if the property value is less than or equal to the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="expression">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'greater than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is greater than or equal the specified value.
            The validation will fail if the property value is less than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            Defines a 'greater than' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is greater than or equal the specified value.
            The validation will fail if the property value is less than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            Defines a 'greater than or equal to' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is greater than or equal the specified value.
            The validation will fail if the property value is less than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Defines a 'greater than or equal to' validator on the current rule builder using a lambda expression. 
            The validation will succeed if the property value is greater than or equal the specified value.
            The validation will fail if the property value is less than the specified value.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Validate``1(ServiceStack.FluentValidation.IValidator{``0},``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Validates certain properties of the specified instance.
            </summary>
            <param name="validator">The current validator</param>
            <param name="instance">The object to validate</param>
            <param name="propertyExpressions">Expressions to specify the properties to validate</param>
            <returns>A ValidationResult object containing any validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Validate``1(ServiceStack.FluentValidation.IValidator{``0},``0,System.String[])">
            <summary>
            Validates certain properties of the specified instance.
            </summary>
            <param name="validator"></param>
            <param name="instance">The object to validate</param>
            <param name="properties">The names of the properties to validate.</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Validate``1(ServiceStack.FluentValidation.IValidator{``0},``0,ServiceStack.FluentValidation.Internal.IValidatorSelector,System.String)">
            <summary>
            Validates an object using either a custom validator selector or a ruleset.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="validator"></param>
            <param name="instance"></param>
            <param name="selector"></param>
            <param name="ruleSet"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.ValidateAsync``1(ServiceStack.FluentValidation.IValidator{``0},``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Validates certain properties of the specified instance asynchronously.
            </summary>
            <param name="validator">The current validator</param>
            <param name="instance">The object to validate</param>
            <param name="propertyExpressions">Expressions to specify the properties to validate</param>
            <returns>A ValidationResult object containing any validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.ValidateAsync``1(ServiceStack.FluentValidation.IValidator{``0},``0,System.String[])">
            <summary>
            Validates certain properties of the specified instance asynchronously.
            </summary>
            <param name="validator"></param>
            <param name="instance">The object to validate</param>
            <param name="properties">The names of the properties to validate.</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.ValidateAsync``1(ServiceStack.FluentValidation.IValidator{``0},``0,ServiceStack.FluentValidation.Internal.IValidatorSelector,System.String)">
            <summary>
            Validates an object asynchronously using a custom valdiator selector or a ruleset
            </summary>
            <typeparam name="T"></typeparam>
            <param name="validator"></param>
            <param name="instance"></param>
            <param name="selector"></param>
            <param name="ruleSet"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.ValidateAndThrow``1(ServiceStack.FluentValidation.IValidator{``0},``0,System.String)">
            <summary>
            Performs validation and then throws an exception if validation fails.
            </summary>
            <param name="validator">The validator this method is extending.</param>
            <param name="instance">The instance of the type we are validating.</param>
            <param name="ruleSet">Optional: a ruleset when need to validate against.</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.ValidateAndThrowAsync``1(ServiceStack.FluentValidation.IValidator{``0},``0,System.String)">
            <summary>
            Performs validation asynchronously and then throws an exception if validation fails.
            </summary>
            <param name="validator">The validator this method is extending.</param>
            <param name="instance">The instance of the type we are validating.</param>
            <param name="ruleSet">Optional: a ruleset when need to validate against.</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.InclusiveBetween``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1,``1)">
            <summary>
            Defines an 'inclusive between' validator on the current rule builder, but only for properties of types that implement IComparable.
            Validation will fail if the value of the property is outside of the specifed range. The range is inclusive.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="from">The lowest allowed value</param>
            <param name="to">The highest allowed value</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.InclusiveBetween``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1,``1)">
            <summary>
            Defines an 'inclusive between' validator on the current rule builder, but only for properties of types that implement IComparable.
            Validation will fail if the value of the property is outside of the specifed range. The range is inclusive.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="from">The lowest allowed value</param>
            <param name="to">The highest allowed value</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.ExclusiveBetween``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},``1,``1)">
            <summary>
            Defines an 'exclusive between' validator on the current rule builder, but only for properties of types that implement IComparable.
            Validation will fail if the value of the property is outside of the specifed range. The range is exclusive.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="from">The lowest allowed value</param>
            <param name="to">The highest allowed value</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.ExclusiveBetween``2(ServiceStack.FluentValidation.IRuleBuilder{``0,System.Nullable{``1}},``1,``1)">
            <summary>
            Defines an 'exclusive between' validator on the current rule builder, but only for properties of types that implement IComparable.
            Validation will fail if the value of the property is outside of the specifed range. The range is exclusive.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <param name="from">The lowest allowed value</param>
            <param name="to">The highest allowed value</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.CreditCard``1(ServiceStack.FluentValidation.IRuleBuilder{``0,System.String})">
            <summary>
            Defines a credit card validator for the current rule builder that ensures that the specified string is a valid credit card number.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.IsInEnum``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1})">
            <summary>
            Defines a enum value validator on the current rule builder that ensures that the specific value is a valid enum value.
            </summary>
            <typeparam name="T">Type of Enum being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.Custom``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Action{``1,ServiceStack.FluentValidation.Validators.CustomContext})">
            <summary>
            Defines a custom validation rule
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensions.CustomAsync``2(ServiceStack.FluentValidation.IRuleBuilder{``0,``1},System.Func{``1,ServiceStack.FluentValidation.Validators.CustomContext,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Defines a custom validation rule
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensionsServiceStack.ValidateAndThrow``1(ServiceStack.FluentValidation.IValidator{``0},``0,ServiceStack.ApplyTo)">
            <summary>
            Performs validation and then throws an exception if validation fails.
            </summary>
            <param name="validator">The validator this method is extending.</param>
            <param name="instance">The instance of the type we are validating.</param>
            <param name="ruleSet">The ruleset to validate against.</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorExtensionsServiceStack.ValidateAndThrowAsync``1(ServiceStack.FluentValidation.IValidator{``0},``0,ServiceStack.ApplyTo)">
            <summary>
            Performs validation asynchronously and then throws an exception if validation fails.
            </summary>
            <param name="validator">The validator this method is extending.</param>
            <param name="instance">The instance of the type we are validating.</param>
            <param name="ruleSet">Optional: a ruleset when need to validate against.</param>
        </member>
        <member name="T:ServiceStack.FluentValidation.DefaultValidatorOptions">
            <summary>
            Default options that can be used to configure a validator.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.Cascade``2(ServiceStack.FluentValidation.IRuleBuilderInitial{``0,``1},ServiceStack.FluentValidation.CascadeMode)">
            <summary>
            Specifies the cascade mode for failures. 
            If set to 'Stop' then execution of the rule will stop once the first validator in the chain fails.
            If set to 'Continue' then all validators in the chain will execute regardless of failures.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.OnAnyFailure``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Action{``0})">
            <summary>
            Specifies a custom action to be invoked when the validator fails. 
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="rule"></param>
            <param name="onFailure"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.String)">
            <summary>
            Specifies a custom error message to use if validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="errorMessage">The error message to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Func{``0,System.String})">
            <summary>
            Specifies a custom error message to use when validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="messageProvider">Delegate that will be invoked to retrieve the localized message. </param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Func{``0,``1,System.String})">
            <summary>
            Specifies a custom error message to use when validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="messageProvider">Delegate that will be invoked to retrieve the localized message. </param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithErrorCode``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.String)">
            <summary>
            Specifies a custom error code to use if validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="errorCode">The error code to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithLocalizedMessage``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Type,System.String)">
            <summary>
            Specifies a custom error message resource to use when validation fails.
            </summary>
            <param name="rule">The current rule</param>
            <param name="resourceType">Resource type representing a resx file</param>
            <param name="resourceName">Name of resource</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.When``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Func{``0,System.Boolean},ServiceStack.FluentValidation.ApplyConditionTo)">
            <summary>
            Specifies a condition limiting when the validator should run. 
            The validator will only be executed if the result of the lambda returns true.
            </summary>
            <param name="rule">The current rule</param>
            <param name="predicate">A lambda expression that specifies a condition for when the validator should run</param>
            <param name="applyConditionTo">Whether the condition should be applied to the current rule or all rules in the chain</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.Unless``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Func{``0,System.Boolean},ServiceStack.FluentValidation.ApplyConditionTo)">
            <summary>
            Specifies a condition limiting when the validator should not run. 
            The validator will only be executed if the result of the lambda returns false.
            </summary>
            <param name="rule">The current rule</param>
            <param name="predicate">A lambda expression that specifies a condition for when the validator should not run</param>
            <param name="applyConditionTo">Whether the condition should be applied to the current rule or all rules in the chain</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WhenAsync``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},ServiceStack.FluentValidation.ApplyConditionTo)">
            <summary>
            Specifies an asynchronous condition limiting when the validator should run. 
            The validator will only be executed if the result of the lambda returns true.
            </summary>
            <param name="rule">The current rule</param>
            <param name="predicate">A lambda expression that specifies a condition for when the validator should run</param>
            <param name="applyConditionTo">Whether the condition should be applied to the current rule or all rules in the chain</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.UnlessAsync``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},ServiceStack.FluentValidation.ApplyConditionTo)">
            <summary>
            Specifies an asynchronous condition limiting when the validator should not run. 
            The validator will only be executed if the result of the lambda returns false.
            </summary>
            <param name="rule">The current rule</param>
            <param name="predicate">A lambda expression that specifies a condition for when the validator should not run</param>
            <param name="applyConditionTo">Whether the condition should be applied to the current rule or all rules in the chain</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.DependentRules``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Action{ServiceStack.FluentValidation.DependentRules{``0}})">
            <summary>
            Triggers an action when the rule passes. Typically used to configure dependent rules. This applies to all preceding rules in the chain. 
            </summary>
            <param name="rule">The current rule</param>
            <param name="action">An action to be invoked if the rule is valid</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithName``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.String)">
            <summary>
            Specifies a custom property name to use within the error message.
            </summary>
            <param name="rule">The current rule</param>
            <param name="overridePropertyName">The property name to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithName``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Func{``0,System.String})">
            <summary>
            Specifies a custom property name to use within the error message.
            </summary>
            <param name="rule">The current rule</param>
            <param name="nameProvider">Func used to retrieve the property's display name</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.OverridePropertyName``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.String)">
            <summary>
            Overrides the name of the property associated with this rule.
            NOTE: This is a considered to be an advanced feature. 99% of the time that you use this, you actually meant to use WithName.
            </summary>
            <param name="rule">The current rule</param>
            <param name="propertyName">The property name to use</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithState``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Func{``0,System.Object})">
            <summary>
            Specifies custom state that should be stored alongside the validation message when validation fails for this rule.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="rule"></param>
            <param name="stateProvider"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithState``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},System.Func{``0,``1,System.Object})">
            <summary>
            Specifies custom state that should be stored alongside the validation message when validation fails for this rule.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="rule"></param>
            <param name="stateProvider"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.WithSeverity``2(ServiceStack.FluentValidation.IRuleBuilderOptions{``0,``1},ServiceStack.FluentValidation.Severity)">
            <summary>
             Specifies custom severity that should be stored alongside the validation message when validation fails for this rule.
             </summary>
             <typeparam name="T"></typeparam>
             <typeparam name="TProperty"></typeparam>
             <param name="rule"></param>
             <param name="severity"></param>
             <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.DefaultValidatorOptions.GetStringForValidator``1(ServiceStack.FluentValidation.Resources.ILanguageManager)">
            <summary>
            Gets the default message for a property validato
            </summary>
            <typeparam name="T">The validator type</typeparam>
            <returns>The translated string</returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.CascadeMode">
            <summary>
            Specifies how rules should cascade when one fails.
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.CascadeMode.Continue">
            <summary>
            When a rule fails, execution continues to the next rule.
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.CascadeMode.StopOnFirstFailure">
            <summary>
            When a rule fails, validation is stopped and all other rules in the chain will not be executed.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.ApplyConditionTo">
            <summary>
            Specifies where a When/Unless condition should be applied
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.ApplyConditionTo.AllValidators">
            <summary>
            Applies the condition to all validators declared so far in the chain.
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.ApplyConditionTo.CurrentValidator">
            <summary>
            Applies the condition to the current validator only.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Severity">
            <summary>
            Specifies the severity of a rule. 
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.Severity.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.Severity.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.Severity.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.InlineValidator`1">
            <summary>
            Validator implementation that allows rules to be defined without inheriting from AbstractValidator.
            </summary>
            <example>
            <code>
            public class Customer {
              public int Id { get; set; }
              public string Name { get; set; }
            
              public static readonly InlineValidator&lt;Customer&gt; Validator = new InlineValidator&lt;Customer&gt; {
                v =&gt; v.RuleFor(x =&gt; x.Name).NotNull(),
                v =&gt; v.RuleFor(x =&gt; x.Id).NotEqual(0),
              }
            }
            </code>
            </example>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.FluentValidation.InlineValidator`1.InlineRuleCreator`1">
            <summary>
            Delegate that specifies configuring an InlineValidator.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.InlineValidator`1.Add``1(ServiceStack.FluentValidation.InlineValidator{`0}.InlineRuleCreator{``0})">
            <summary>
            Allows configuration of the validator.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.CollectionPropertyRule`1">
            <summary>
            Rule definition for collection properties
            </summary>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.CollectionPropertyRule`1.#ctor(System.Reflection.MemberInfo,System.Func{System.Object,System.Object},System.Linq.Expressions.LambdaExpression,System.Func{ServiceStack.FluentValidation.CascadeMode},System.Type,System.Type)">
            <summary>
            Initializes new instance of the CollectionPropertyRule class
            </summary>
            <param name="member"></param>
            <param name="propertyFunc"></param>
            <param name="expression"></param>
            <param name="cascadeModeThunk"></param>
            <param name="typeToValidate"></param>
            <param name="containerType"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.CollectionPropertyRule`1.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{`0}}},System.Func{ServiceStack.FluentValidation.CascadeMode})">
            <summary>
            Creates a new property rule from a lambda expression.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.CollectionPropertyRule`1.InvokePropertyValidatorAsync(ServiceStack.FluentValidation.ValidationContext,ServiceStack.FluentValidation.Validators.IPropertyValidator,System.String,System.Threading.CancellationToken)">
            <summary>
            Invokes the validator asynchronously
            </summary>
            <param name="context"></param>
            <param name="validator"></param>
            <param name="propertyName"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.CollectionPropertyRule`1.InvokePropertyValidator(ServiceStack.FluentValidation.ValidationContext,ServiceStack.FluentValidation.Validators.IPropertyValidator,System.String)">
            <summary>
            Invokes the validator
            </summary>
            <param name="context"></param>
            <param name="validator"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.Comparer">
            <summary>
            Custom logic for performing comparisons
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.Comparer.TryCompare(System.IComparable,System.IComparable,System.Int32@)">
            <summary>
            Tries to compare the two objects.
            </summary>
            <param name="valueToCompare"></param>
            <param name="result">The resulting comparison value.</param>
            <param name="value"></param>
            <returns>True if all went well, otherwise False.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.Comparer.Compare(System.IComparable,System.IComparable,System.Int32@)">
            <summary>
            Tries to do a proper comparison but may fail.
            First it tries the default comparison, if this fails, it will see 
            if the values are fractions. If they are, then it does a double 
            comparison, otherwise it does a long comparison.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.Comparer.GetComparisonResult(System.IComparable,System.IComparable)">
            <summary>
            Tries to compare the two objects, but will throw an exception if it fails.
            </summary>
            <returns>True on success, otherwise False.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.Comparer.GetEqualsResult(System.IComparable,System.IComparable)">
            <summary>
            Tries to compare the two objects, but will throw an exception if it fails.
            </summary>
            <returns>True on success, otherwise False.</returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.DefaultValidatorSelector">
            <summary>
            Default validator selector that will execute all rules that do not belong to a RuleSet.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DefaultValidatorSelector.CanExecute(ServiceStack.FluentValidation.IValidationRule,System.String,ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
            <param name="rule">The rule</param>
            <param name="propertyPath">Property path (eg Customer.Address.Line1)</param>
            <param name="context">Contextual information</param>
            <returns>Whether or not the validator can execute.</returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.DelegateValidator`1">
            <summary>
            Custom IValidationRule for performing custom logic.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.DelegateValidator`1.RuleSet">
            <summary>
            Rule set to which this rule belongs.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DelegateValidator`1.#ctor(System.Func{`0,ServiceStack.FluentValidation.ValidationContext{`0},System.Collections.Generic.IEnumerable{ServiceStack.FluentValidation.Results.ValidationFailure}})">
            <summary>
            Creates a new DelegateValidator using the specified function to perform validation.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DelegateValidator`1.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{ServiceStack.FluentValidation.Results.ValidationFailure}})">
            <summary>
            Creates a new DelegateValidator using the specified function to perform validation.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DelegateValidator`1.#ctor(System.Func{`0,ServiceStack.FluentValidation.ValidationContext{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{ServiceStack.FluentValidation.Results.ValidationFailure}}})">
            <summary>
            Creates a new DelegateValidator using the specified async function to perform validation.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DelegateValidator`1.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{ServiceStack.FluentValidation.Results.ValidationFailure}}})">
            <summary>
            Creates a new DelegateValidator using the specified async function to perform validation.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DelegateValidator`1.Validate(ServiceStack.FluentValidation.ValidationContext{`0})">
            <summary>
            Performs validation using a validation context and returns a collection of Validation Failures.
            </summary>
            <param name="context">Validation Context</param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DelegateValidator`1.ValidateAsync(ServiceStack.FluentValidation.ValidationContext{`0},System.Threading.CancellationToken)">
            <summary>
            Performs validation asynchronously using a validation context and returns a collection of Validation Failures.
            </summary>
            <param name="context">Validation Context</param>
            <param name="cancellation"></param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.DelegateValidator`1.Validators">
            <summary>
            The validators that are grouped under this rule.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DelegateValidator`1.Validate(ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Performs validation using a validation context and returns a collection of Validation Failures.
            </summary>
            <param name="context">Validation Context</param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DelegateValidator`1.ValidateAsync(ServiceStack.FluentValidation.ValidationContext,System.Threading.CancellationToken)">
            <summary>
            When overloaded performs validation asynchronously using a validation context and returns a collection of Validation Failures.
            </summary>
            <param name="context">Validation Context</param>
            <param name="cancellation"></param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DelegateValidator`1.ApplyCondition(System.Func{System.Object,System.Boolean},ServiceStack.FluentValidation.ApplyConditionTo)">
            <summary>
            Applies a condition to the validator.
            </summary>
            <param name="predicate"></param>
            <param name="applyConditionTo"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.DelegateValidator`1.ApplyAsyncCondition(System.Func{System.Object,System.Threading.Tasks.Task{System.Boolean}},ServiceStack.FluentValidation.ApplyConditionTo)">
            <summary>
            Applies a condition asynchronously to the validator
            </summary>
            <param name="predicate"></param>
            <param name="applyConditionTo"></param>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.Extensions">
            <summary>
            Useful extensions
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.Extensions.IsParameterExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Checks if the expression is a parameter expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.Extensions.GetMember(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets a MemberInfo from a member expression.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.Extensions.GetMember``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a MemberInfo from a member expression.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.Extensions.SplitPascalCase(System.String)">
            <summary>
            Splits pascal case, so "FooBar" would become "Foo Bar"
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.Extensions.GetConstantExpresionFromConstant``2(``1)">
            <summary>
            Helper method to construct a constant expression from a constant.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.IConfigurable`2">
            <summary>
            Represents an object that is configurable.
            </summary>
            <typeparam name="TConfiguration">Type of object being configured</typeparam>
            <typeparam name="TNext">Return type</typeparam>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.IConfigurable`2.Configure(System.Action{`0})">
            <summary>
            Configures the current object.
            </summary>
            <param name="configurator">Action to configure the object.</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.InstanceCache">
            <summary>
            Instancace cache.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.InstanceCache.GetOrCreateInstance(System.Type)">
            <summary>
            Gets or creates an instance using Activator.CreateInstance
            </summary>
            <param name="type">The type to instantiate</param>
            <returns>The instantiated object</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.InstanceCache.GetOrCreateInstance(System.Type,System.Func{System.Type,System.Object})">
            <summary>
            Gets or creates an instance using a custom factory
            </summary>
            <param name="type">The type to instantiate</param>
            <param name="factory">The custom factory</param>
            <returns>The instantiated object</returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.AccessorCache`1">
            <summary>
            Member accessor cache.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.AccessorCache`1.GetCachedAccessor``1(System.Reflection.MemberInfo,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets an accessor func based on an expression
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="member">The member represented by the expression</param>
            <param name="expression"></param>
            <returns>Accessor func</returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.IValidatorSelector">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.IValidatorSelector.CanExecute(ServiceStack.FluentValidation.IValidationRule,System.String,ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
            <param name="rule">The rule</param>
            <param name="propertyPath">Property path (eg Customer.Address.Line1)</param>
            <param name="context">Contextual information</param>
            <returns>Whether or not the validator can execute.</returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.MemberNameValidatorSelector">
            <summary>
            Selects validators that are associated with a particular property.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MemberNameValidatorSelector.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of MemberNameValidatorSelector.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.MemberNameValidatorSelector.MemberNames">
            <summary>
            Member names that are validated.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MemberNameValidatorSelector.CanExecute(ServiceStack.FluentValidation.IValidationRule,System.String,ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
            <param name="rule">The rule</param>
            <param name="propertyPath">Property path (eg Customer.Address.Line1)</param>
            <param name="context">Contextual information</param>
            <returns>Whether or not the validator can execute.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MemberNameValidatorSelector.FromExpressions``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
             Creates a MemberNameValidatorSelector from a collection of expressions.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MemberNameValidatorSelector.MemberNamesFromExpressions``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Gets member names from expressions
            </summary>
            <param name="propertyExpressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.MessageFormatter">
            <summary>
            Assists in the construction of validation messages.
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.Internal.MessageFormatter.PropertyName">
            <summary>
            Default Property Name placeholder.
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.Internal.MessageFormatter.PropertyValue">
            <summary>
            Default Property Value placeholder.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MessageFormatter.AppendArgument(System.String,System.Object)">
            <summary>
            Adds a value for a validation message placeholder.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MessageFormatter.AppendPropertyName(System.String)">
            <summary>
            Appends a property name to the message.
            </summary>
            <param name="name">The name of the property</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MessageFormatter.AppendPropertyValue(System.Object)">
            <summary>
            Appends a property value to the message.
            </summary>
            <param name="value">The value of the property</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MessageFormatter.AppendAdditionalArguments(System.Object[])">
            <summary>
            Adds additional arguments to the message for use with standard string placeholders.
            </summary>
            <param name="additionalArgs">Additional arguments</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.MessageFormatter.BuildMessage(System.String)">
            <summary>
            Constructs the final message from the specified template. 
            </summary>
            <param name="messageTemplate">Message template</param>
            <returns>The message with placeholders replaced with their appropriate values</returns>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.MessageFormatter.AdditionalArguments">
            <summary>
            Additional arguments to use
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.MessageFormatter.PlaceholderValues">
            <summary>
            Additional placeholder values
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.PropertyChain">
            <summary>
            Represents a chain of properties
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.#ctor">
            <summary>
            Creates a new PropertyChain.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.#ctor(ServiceStack.FluentValidation.Internal.PropertyChain)">
            <summary>
            Creates a new PropertyChain based on another.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new PropertyChain
            </summary>
            <param name="memberNames"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.FromExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Creates a PropertyChain from a lambda expresion
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.Add(System.Reflection.MemberInfo)">
            <summary>
            Adds a MemberInfo instance to the chain
            </summary>
            <param name="member">Member to add</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.Add(System.String)">
            <summary>
            Adds a property name to the chain
            </summary>
            <param name="propertyName">Name of the property to add</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.AddIndexer(System.Object)">
            <summary>
            Adds an indexer to the property chain. For example, if the following chain has been constructed: 
            Parent.Child
            then calling AddIndexer(0) would convert this to:
            Parent.Child[0]
            </summary>
            <param name="indexer"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.ToString">
            <summary>
            Creates a string representation of a property chain.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.IsChildChainOf(ServiceStack.FluentValidation.Internal.PropertyChain)">
            <summary>
            Checks if the current chain is the child of another chain.
            For example, if chain1 were for "Parent.Child" and chain2 were for "Parent.Child.GrandChild" then
            chain2.IsChildChainOf(chain1) would be true.
            </summary>
            <param name="parentChain">The parent chain to compare</param>
            <returns>True if the current chain is the child of the other chain, otherwise false</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyChain.BuildPropertyName(System.String)">
            <summary>
            Builds a property path.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyChain.Count">
            <summary>
            Number of member names in the chain
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.PropertyRule">
            <summary>
            Defines a rule associated with a property.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.Member">
            <summary>
            Property associated with this rule.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.PropertyFunc">
            <summary>
            Function that can be invoked to retrieve the value of the property.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.Expression">
            <summary>
            Expression that was used to create the rule.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.DisplayName">
            <summary>
            String source that can be used to retrieve the display name (if null, falls back to the property name)
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.RuleSet">
            <summary>
            Rule set that this rule belongs to (if specified)
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.OnFailure">
            <summary>
            Function that will be invoked if any of the validators associated with this rule fail.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.CurrentValidator">
            <summary>
            The current validator being configured by this rule.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.TypeToValidate">
            <summary>
            Type of the property being validated
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.CascadeMode">
            <summary>
            Cascade mode for this rule.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.Validators">
            <summary>
            Validators associated with this rule.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.#ctor(System.Reflection.MemberInfo,System.Func{System.Object,System.Object},System.Linq.Expressions.LambdaExpression,System.Func{ServiceStack.FluentValidation.CascadeMode},System.Type,System.Type)">
            <summary>
            Creates a new property rule.
            </summary>
            <param name="member">Property</param>
            <param name="propertyFunc">Function to get the property value</param>
            <param name="expression">Lambda expression used to create the rule</param>
            <param name="cascadeModeThunk">Function to get the cascade mode.</param>
            <param name="typeToValidate">Type to validate</param>
            <param name="containerType">Container type that owns the property</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.Create``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a new property rule from a lambda expression.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.Create``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{ServiceStack.FluentValidation.CascadeMode})">
            <summary>
            Creates a new property rule from a lambda expression.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.AddValidator(ServiceStack.FluentValidation.Validators.IPropertyValidator)">
            <summary>
            Adds a validator to the rule.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.ReplaceValidator(ServiceStack.FluentValidation.Validators.IPropertyValidator,ServiceStack.FluentValidation.Validators.IPropertyValidator)">
            <summary>
            Replaces a validator in this rule. Used to wrap validators.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.RemoveValidator(ServiceStack.FluentValidation.Validators.IPropertyValidator)">
            <summary>
            Remove a validator in this rule.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.ClearValidators">
            <summary>
            Clear all validators from this rule.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.PropertyName">
            <summary>
            Returns the property name for the property being validated.
            Returns null if it is not a property being validated (eg a method call)
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.MessageBuilder">
            <summary>
            Allows custom creation of an error message
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.PropertyRule.DependentRules">
            <summary>
            Dependent rules
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.GetDisplayName">
            <summary>
            Display name for the property. 
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.GetDisplayName(System.Object)">
            <summary>
            Display name for the property. 
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.Validate(ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Performs validation using a validation context and returns a collection of Validation Failures.
            </summary>
            <param name="context">Validation Context</param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.ValidateAsync(ServiceStack.FluentValidation.ValidationContext,System.Threading.CancellationToken)">
            <summary>
            Performs asynchronous validation using a validation context and returns a collection of Validation Failures.
            </summary>
            <param name="context">Validation Context</param>
            <param name="cancellation"></param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.InvokePropertyValidatorAsync(ServiceStack.FluentValidation.ValidationContext,ServiceStack.FluentValidation.Validators.IPropertyValidator,System.String,System.Threading.CancellationToken)">
            <summary>
            Invokes the validator asynchronously 
            </summary>
            <param name="context"></param>
            <param name="validator"></param>
            <param name="propertyName"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.InvokePropertyValidator(ServiceStack.FluentValidation.ValidationContext,ServiceStack.FluentValidation.Validators.IPropertyValidator,System.String)">
            <summary>
            Invokes a property validator using the specified validation context.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.ApplyCondition(System.Func{System.Object,System.Boolean},ServiceStack.FluentValidation.ApplyConditionTo)">
            <summary>
            Applies a condition to the rule
            </summary>
            <param name="predicate"></param>
            <param name="applyConditionTo"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.PropertyRule.ApplyAsyncCondition(System.Func{System.Object,System.Threading.Tasks.Task{System.Boolean}},ServiceStack.FluentValidation.ApplyConditionTo)">
            <summary>
            Applies the condition to the rule asynchronously
            </summary>
            <param name="predicate"></param>
            <param name="applyConditionTo"></param>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.IncludeRule">
            <summary>
            Include rule
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.IncludeRule.#ctor(ServiceStack.FluentValidation.IValidator,System.Func{ServiceStack.FluentValidation.CascadeMode},System.Type,System.Type)">
            <summary>
            Creates a new IncludeRule
            </summary>
            <param name="validator"></param>
            <param name="cascadeModeThunk"></param>
            <param name="typeToValidate"></param>
            <param name="containerType"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.IncludeRule.Create``1(ServiceStack.FluentValidation.IValidator,System.Func{ServiceStack.FluentValidation.CascadeMode})">
            <summary>
            Creates a new include rule from an existing validator
            </summary>
            <param name="validator"></param>
            <param name="cascadeModeThunk"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.RuleBuilder`2">
            <summary>
            Builds a validation rule and constructs a validator.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.RuleBuilder`2.Rule">
            <summary>
            The rule being created by this RuleBuilder.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.RuleBuilder`2.#ctor(ServiceStack.FluentValidation.Internal.PropertyRule)">
            <summary>
            Creates a new instance of the <see cref="T:ServiceStack.FluentValidation.Internal.RuleBuilder`2">RuleBuilder</see> class.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.RuleBuilder`2.SetValidator(ServiceStack.FluentValidation.Validators.IPropertyValidator)">
            <summary>
            Sets the validator associated with the rule.
            </summary>
            <param name="validator">The validator to set</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.RuleBuilder`2.SetValidator(ServiceStack.FluentValidation.IValidator{`1})">
            <summary>
            Sets the validator associated with the rule. Use with complex properties where an IValidator instance is already declared for the property type.
            </summary>
            <param name="validator">The validator to set</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.RuleBuilder`2.SetValidator``1(System.Func{`0,``0})">
            <summary>
            Sets the validator associated with the rule. Use with complex properties where an IValidator instance is already declared for the property type.
            </summary>
            <param name="validatorProvider">The validator provider to set</param>
        </member>
        <member name="T:ServiceStack.FluentValidation.Internal.RulesetValidatorSelector">
            <summary>
            Selects validators that belong to the specified rulesets.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Internal.RulesetValidatorSelector.RuleSets">
            <summary>
            Rule sets
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.RulesetValidatorSelector.#ctor(System.String[])">
            <summary>
            Creates a new instance of the RulesetValidatorSelector.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.RulesetValidatorSelector.CanExecute(ServiceStack.FluentValidation.IValidationRule,System.String,ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
            <param name="rule">The rule</param>
            <param name="propertyPath">Property path (eg Customer.Address.Line1)</param>
            <param name="context">Contextual information</param>
            <returns>Whether or not the validator can execute.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Internal.RulesetValidatorSelector.IsIncludeRule(ServiceStack.FluentValidation.IValidationRule)">
            <summary>
            Checks if the rule is an IncludeRule
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.IParameterValidatorFactory">
            <summary>
            Gets validators for method parameters.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IParameterValidatorFactory.GetValidator(System.Reflection.ParameterInfo)">
            <summary>
            Gets a validator for <paramref name="parameterInfo"/>.
            </summary>
            <param name="parameterInfo">The <see cref="T:System.Reflection.ParameterInfo"/> instance to get a validator for.</param>
            <returns>Created <see cref="T:ServiceStack.FluentValidation.IValidator"/> instance; <see langword="null"/> if a validator cannot be
            created.</returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.IValidationRule">
            <summary>
            Defines a rule associated with a property which can have multiple validators.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.IValidationRule.Validators">
            <summary>
            The validators that are grouped under this rule.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.IValidationRule.RuleSet">
            <summary>
            Name of the rule-set to which this rule belongs.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidationRule.Validate(ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Performs validation using a validation context and returns a collection of Validation Failures.
            </summary>
            <param name="context">Validation Context</param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidationRule.ValidateAsync(ServiceStack.FluentValidation.ValidationContext,System.Threading.CancellationToken)">
            <summary>
            Performs validation using a validation context and returns a collection of Validation Failures asynchronoulsy.
            </summary>
            <param name="context">Validation Context</param>
            <param name="cancellation">Cancellation token</param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidationRule.ApplyCondition(System.Func{System.Object,System.Boolean},ServiceStack.FluentValidation.ApplyConditionTo)">
            <summary>
            Applies a condition to the rule
            </summary>
            <param name="predicate"></param>
            <param name="applyConditionTo"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidationRule.ApplyAsyncCondition(System.Func{System.Object,System.Threading.Tasks.Task{System.Boolean}},ServiceStack.FluentValidation.ApplyConditionTo)">
            <summary>
            Applies a condition to the rule asynchronously
            </summary>
            <param name="predicate"></param>
            <param name="applyConditionTo"></param>
        </member>
        <member name="T:ServiceStack.FluentValidation.IValidator`1">
            <summary>
            Defines a validator for a particular type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidator`1.Validate(`0)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance to validate</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validate the specified instance asynchronously
            </summary>
            <param name="instance">The instance to validate</param>
            <param name="cancellation"></param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="P:ServiceStack.FluentValidation.IValidator`1.CascadeMode">
            <summary>
            Sets the cascade mode for all rules within this validator.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.IValidator">
            <summary>
            Defines a validator for a particular type.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidator.Validate(System.Object)">
            <summary>
            Validates the specified instance
            </summary>
            <param name="instance"></param>
            <returns>A ValidationResult containing any validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidator.ValidateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Validates the specified instance asynchronously
            </summary>
            <param name="instance"></param>
            <param name="cancellation">Cancellation token</param>
            <returns>A ValidationResult containing any validation failures</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidator.Validate(ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="context">A ValidationContext</param>
            <returns>A ValidationResult object containy any validation failures.</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidator.ValidateAsync(ServiceStack.FluentValidation.ValidationContext,System.Threading.CancellationToken)">
            <summary>
            Validates the specified instance asynchronously.
            </summary>
            <param name="context">A ValidationContext</param>
            <param name="cancellation">Cancellation token</param>
            <returns>A ValidationResult object containy any validation failures.</returns>		
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidator.CreateDescriptor">
            <summary>
            Creates a hook to access various meta data properties
            </summary>
            <returns>A IValidatorDescriptor object which contains methods to access metadata</returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidator.CanValidateInstancesOfType(System.Type)">
            <summary>
            Checks to see whether the validator can validate objects of the specified type
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.IValidatorDescriptor">
            <summary>
            Provides metadata about a validator.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidatorDescriptor.GetName(System.String)">
            <summary>
            Gets the name display name for a property. 
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidatorDescriptor.GetMembersWithValidators">
            <summary>
            Gets a collection of validators grouped by property.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidatorDescriptor.GetValidatorsForMember(System.String)">
            <summary>
            Gets validators for a particular property.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidatorDescriptor.GetRulesForMember(System.String)">
            <summary>
            Gets rules for a property.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.IValidatorFactory">
            <summary>
            Gets validators for a particular type.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidatorFactory.GetValidator``1">
            <summary>
            Gets the validator for the specified type.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.IValidatorFactory.GetValidator(System.Type)">
            <summary>
            Gets the validator for the specified type.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Results.ValidationFailure">
            <summary>
            Defines a validation failure
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Results.ValidationFailure.#ctor(System.String,System.String)">
            <summary>
            Creates a new validation failure.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Results.ValidationFailure.#ctor(System.String,System.String,System.Object)">
            <summary>
            Creates a new ValidationFailure.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationFailure.PropertyName">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationFailure.ErrorMessage">
            <summary>
            The error message
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationFailure.AttemptedValue">
            <summary>
            The property value that caused the failure.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationFailure.CustomState">
            <summary>
            Custom state associated with the failure.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationFailure.Severity">
            <summary>
            Custom severity level associated with the failure.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationFailure.FormattedMessageArguments">
            <summary>
            Gets or sets the formatted message arguments.
            These are values for custom formatted message in validator resource files
            Same formatted message can be reused in UI and with same number of format placeholders
            Like "Value {0} that you entered should be {1}"
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationFailure.FormattedMessagePlaceholderValues">
            <summary>
            Gets or sets the formatted message placeholder values.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationFailure.ResourceName">
            <summary>
            The resource name used for building the message
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Results.ValidationFailure.ToString">
            <summary>
            Creates a textual representation of the failure.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Results.ValidationFailure.#ctor(System.String,System.String,System.Object,System.String)">
            <summary>
            Creates a new ValidationFailure with ErrorCode.
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.Results.ValidationFailure.errorCode">
            <summary>
            Gets or sets the error code.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Results.ValidationResult">
            <summary>
            The result of running a validator
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationResult.IsValid">
            <summary>
            Whether validation succeeded
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Results.ValidationResult.Errors">
            <summary>
            A collection of errors
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Results.ValidationResult.#ctor">
            <summary>
            Creates a new validationResult
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Results.ValidationResult.#ctor(System.Collections.Generic.IEnumerable{ServiceStack.FluentValidation.Results.ValidationFailure})">
            <summary>
            Creates a new ValidationResult from a collection of failures
            </summary>
            <param name="failures">List of <see cref="T:ServiceStack.FluentValidation.Results.ValidationFailure"/> which is later available through <see cref="P:ServiceStack.FluentValidation.Results.ValidationResult.Errors"/>. This list get's copied.</param>
            <remarks>
            Every caller is responsible for not adding <c>null</c> to the list.
            </remarks>
        </member>
        <member name="T:ServiceStack.FluentValidation.IRuleBuilderInitial`2">
            <summary>
            Rule builder that starts the chain
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:ServiceStack.FluentValidation.IRuleBuilder`2">
            <summary>
            Rule builder 
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:ServiceStack.FluentValidation.IRuleBuilder`2.SetValidator(ServiceStack.FluentValidation.Validators.IPropertyValidator)">
            <summary>
            Associates a validator with this the property for this rule builder.
            </summary>
            <param name="validator">The validator to set</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.IRuleBuilder`2.SetValidator(ServiceStack.FluentValidation.IValidator{`1})">
            <summary>
            Associates an instance of IValidator with the current property rule.
            </summary>
            <param name="validator">The validator to use</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.IRuleBuilder`2.SetValidator``1(System.Func{`0,``0})">
            <summary>
            Associates a validator provider with the current property rule.
            </summary>
            <param name="validatorProvider">The validator provider to use</param>
        </member>
        <member name="T:ServiceStack.FluentValidation.IRuleBuilderOptions`2">
            <summary>
            Rule builder
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:ServiceStack.FluentValidation.ValidationContext`1">
            <summary>
            Validation context
            </summary>
            <typeparam name="T"></typeparam>
            <summary>
            Validation context
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidationContext`1.#ctor(`0)">
            <summary>
            Creates a new validation context
            </summary>
            <param name="instanceToValidate"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidationContext`1.#ctor(`0,ServiceStack.FluentValidation.Internal.PropertyChain,ServiceStack.FluentValidation.Internal.IValidatorSelector)">
            <summary>
            Creates a new validation context with a custom property chain and selector
            </summary>
            <param name="instanceToValidate"></param>
            <param name="propertyChain"></param>
            <param name="validatorSelector"></param>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidationContext`1.InstanceToValidate">
            <summary>
            The object to validate
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.ValidationContext">
            <summary>
            Validation context
            </summary>
            <summary>
            Validation context
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidationContext.#ctor(System.Object)">
            <summary>
            Creates a new validation context
            </summary>
            <param name="instanceToValidate"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidationContext.#ctor(System.Object,ServiceStack.FluentValidation.Internal.PropertyChain,ServiceStack.FluentValidation.Internal.IValidatorSelector)">
            <summary>
            Creates a new validation context with a property chain and validation selector
            </summary>
            <param name="instanceToValidate"></param>
            <param name="propertyChain"></param>
            <param name="validatorSelector"></param>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidationContext.PropertyChain">
            <summary>
            Property chain
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidationContext.InstanceToValidate">
            <summary>
            Object being validated
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidationContext.Selector">
            <summary>
            Selector
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidationContext.IsChildContext">
            <summary>
            Whether this is a child context
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidationContext.IsChildCollectionContext">
            <summary>
            Whether this is a child collection context.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidationContext.Clone(ServiceStack.FluentValidation.Internal.PropertyChain,System.Object,ServiceStack.FluentValidation.Internal.IValidatorSelector)">
            <summary>
            Creates a new ValidationContext based on this one
            </summary>
            <param name="chain"></param>
            <param name="instanceToValidate"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidationContext.CloneForChildValidator(System.Object)">
            <summary>
            Creates a new validation context for use with a child validator
            </summary>
            <param name="instanceToValidate"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidationContext.CloneForChildCollectionValidator(System.Object)">
            <summary>
            Creates a new validation context for use with a child collection validator
            </summary>
            <param name="instanceToValidate"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.ValidationException">
            <summary>
            An exception that represents failed validation
            </summary>
            <summary>
            An exception that represents failed validation
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidationException.Errors">
            <summary>
            Validation errors
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidationException.#ctor(System.String)">
            <summary>
            Creates a new ValidationException
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{ServiceStack.FluentValidation.Results.ValidationFailure})">
            <summary>
            Creates a new ValidationException
            </summary>
            <param name="message"></param>
            <param name="errors"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidationException.#ctor(System.Collections.Generic.IEnumerable{ServiceStack.FluentValidation.Results.ValidationFailure})">
            <summary>
            Creates a new ValidationException
            </summary>
            <param name="errors"></param>
        </member>
        <member name="T:ServiceStack.FluentValidation.ValidatorDescriptor`1">
            <summary>
            Used for providing metadata about a validator.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidatorDescriptor`1.Rules">
            <summary>
            Rules associated with the validator
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidatorDescriptor`1.#ctor(System.Collections.Generic.IEnumerable{ServiceStack.FluentValidation.IValidationRule})">
            <summary>
            Creates a ValidatorDescriptor
            </summary>
            <param name="ruleBuilders"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidatorDescriptor`1.GetName(System.String)">
            <summary>
            Gets the display name or a property property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidatorDescriptor`1.GetMembersWithValidators">
            <summary>
            Gets all members with their associated validators
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidatorDescriptor`1.GetValidatorsForMember(System.String)">
            <summary>
            Gets validators for a specific member
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidatorDescriptor`1.GetRulesForMember(System.String)">
            <summary>
            Gets rules for a specific member
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidatorDescriptor`1.GetName(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the member name from an expression
            </summary>
            <param name="propertyExpression"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidatorDescriptor`1.GetValidatorsForMember``1(ServiceStack.FluentValidation.Internal.MemberAccessor{`0,``0})">
            <summary>
            Gets validators for a member
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="accessor"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidatorDescriptor`1.GetRulesByRuleset">
            <summary>
            Gets rules grouped by ruleset
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.ValidatorDescriptor`1.RulesetMetadata">
            <summary>
            Information about reulesets
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidatorDescriptor`1.RulesetMetadata.#ctor(System.String,System.Collections.Generic.IEnumerable{ServiceStack.FluentValidation.Internal.PropertyRule})">
            <summary>
            Creates a new RulesetMetadata
            </summary>
            <param name="name"></param>
            <param name="rules"></param>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidatorDescriptor`1.RulesetMetadata.Name">
            <summary>
            Rulset name
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidatorDescriptor`1.RulesetMetadata.Rules">
            <summary>
            Rules in the ruleset
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.ValidatorFactoryBase">
            <summary>
            Factory for creating validators
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidatorFactoryBase.GetValidator``1">
            <summary>
            Gets a validator for a type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidatorFactoryBase.GetValidator(System.Type)">
            <summary>
            Gets a validator for a type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.ValidatorFactoryBase.CreateInstance(System.Type)">
            <summary>
            Instantiates the validator
            </summary>
            <param name="validatorType"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.ValidatorOptions">
            <summary>
            Validator runtime options
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.ValidatorOptions.CascadeMode">
            <summary>
            Default cascade mode
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.ValidatorOptions.PropertyChainSeparator">
            <summary>
            Default property chain separator
            </summary>
        </member>
        <member name="F:ServiceStack.FluentValidation.ValidatorOptions.ResourceProviderType">
            <summary>
            Default resource provider
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidatorOptions.LanguageManager">
            <summary>
            Default language manager 
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidatorOptions.ValidatorSelectors">
            <summary>
            Customizations of validator selector
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidatorOptions.MessageFormatterFactory">
            <summary>
            Specifies a factory for creating MessageFormatter instances.
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidatorOptions.PropertyNameResolver">
            <summary>
            Pluggable logic for resolving property names
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidatorOptions.DisplayNameResolver">
            <summary>
            Pluggable logic for resolving display names
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidatorOptions.DisableAccessorCache">
            <summary>
            Disables the expression accessor cache. Not recommended.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.ValidatorSelectorOptions">
            <summary>
            ValidatorSelector options
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidatorSelectorOptions.DefaultValidatorSelectorFactory">
            <summary>
            Factory func for creating the default validator selector
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidatorSelectorOptions.MemberNameValidatorSelectorFactory">
            <summary>
            Factory func for creating the member validator selector
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.ValidatorSelectorOptions.RulesetValidatorSelectorFactory">
            <summary>
            Factory func for creating the ruleset validator selector
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Validators.AbstractComparisonValidator">
            <summary>
            Base class for all comparison validators
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Validators.AbstractComparisonValidator.#ctor(System.IComparable,ServiceStack.FluentValidation.Resources.IStringSource)">
            <summary>
            </summary>
            <param name="value"></param>
            <param name="errorSource"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Validators.AbstractComparisonValidator.#ctor(System.Func{System.Object,System.Object},System.Reflection.MemberInfo,ServiceStack.FluentValidation.Resources.IStringSource)">
            <summary>
            </summary>
            <param name="valueToCompareFunc"></param>
            <param name="member"></param>
            <param name="errorSource"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Validators.AbstractComparisonValidator.IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext)">
            <summary>
            Performs the comparison
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.FluentValidation.Validators.AbstractComparisonValidator.IsValid(System.IComparable,System.IComparable)">
            <summary>
            Override to perform the comparison
            </summary>
            <param name="value"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.FluentValidation.Validators.AbstractComparisonValidator.Comparison">
            <summary>
            Metadata- the comparison type
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Validators.AbstractComparisonValidator.MemberToCompare">
            <summary>
            Metadata- the member being compared
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Validators.AbstractComparisonValidator.ValueToCompare">
            <summary>
            Metadata- the value being compared
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Validators.IComparisonValidator">
            <summary>
            Defines a comparison validator
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Validators.IComparisonValidator.Comparison">
            <summary>
            Metadata- the comparison type
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Validators.IComparisonValidator.MemberToCompare">
            <summary>
            Metadata- the member being compared
            </summary>
        </member>
        <member name="P:ServiceStack.FluentValidation.Validators.IComparisonValidator.ValueToCompare">
            <summary>
            Metadata- the value being compared
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Validators.AsyncPredicateValidator">
            <summary>
            Asynchronous custom validator
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Validators.AsyncPredicateValidator.#ctor(System.Func{System.Object,System.Object,ServiceStack.FluentValidation.Validators.PropertyValidatorContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Creates a new ASyncPredicateValidator
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Validators.AsyncPredicateValidator.IsValidAsync(ServiceStack.FluentValidation.Validators.PropertyValidatorContext,System.Threading.CancellationToken)">
            <summary>
            Runs the validation check
            </summary>
            <param name="context"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Validators.CreditCardValidator">
            <summary>
            Ensures that the property value is a valid credit card number.
            </summary>
        </member>
        <member name="T:ServiceStack.FluentValidation.Validators.CustomValidator`1">
            <summary>
            Custom validator that allows for manual/direct creation of ValidationFailure instances. 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.FluentValidation.Validators.CustomValidator`1.#ctor(System.Action{`0,ServiceStack.FluentValidation.Validators.CustomContext})">
            <summary>
            Creates a new instance of the CustomValidator
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Validators.CustomValidator`1.#ctor(System.Func{`0,ServiceStack.FluentValidation.Validators.CustomContext,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Creates a new isntance of the CutomValidator.
            </summary>
            <param name="asyncAction"></param>
        </member>
        <member name="T:ServiceStack.FluentValidation.Validators.CustomContext">
            <summary>
            Custom validation context
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Validators.CustomContext.#ctor(ServiceStack.FluentValidation.Validators.PropertyValidatorContext)">
            <summary>
            Creates a new CustomContext
            </summary>
            <param name="context">The parent PropertyValidatorContext that represents this execution</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Validators.CustomContext.AddFailure(System.String,System.String)">
            <summary>
            Adds a new validation failure. 
            </summary>
            <param name="propertyName">The property name</param>
            <param name="errorMessage">The error mesage</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Validators.CustomContext.AddFailure(System.String)">
            <summary>
            Adds a new validation failure (the property name is inferred) 
            </summary>
            <param name="errorMessage">The error message</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Validators.CustomContext.AddFailure(ServiceStack.FluentValidation.Results.ValidationFailure)">
            <summary>
            Adss a new validation failure
            </summary>
            <param name="failure">The failure to add</param>
        </member>
        <member name="T:ServiceStack.FluentValidation.Validators.IPropertyValidator">
            <summary>
            A custom property validator.
            This interface should not be implemented directly in your code as it is subject to change.
            Please inherit from <see cref="T:ServiceStack.FluentValidation.Validators.PropertyValidator">PropertyValidator</see> instead.
            </summary>
        </member>
        <member name="M:ServiceStack.FluentValidation.Validators.PropertyValidator.PrepareMessageFormatterForValidationError(ServiceStack.FluentValidation.Validators.PropertyValidatorContext)">
            <summary>
            Prepares the <see cref="T:ServiceStack.FluentValidation.Internal.MessageFormatter"/> of <paramref name="context"/> for an upcoming <see cref="T:ServiceStack.FluentValidation.Results.ValidationFailure"/>.
            </summary>
            <param name="context">The validator context</param>
        </member>
        <member name="M:ServiceStack.FluentValidation.Validators.PropertyValidator.CreateValidationError(ServiceStack.FluentValidation.Validators.PropertyValidatorContext)">
            <summary>
            Creates an error validation result for this validator.
            </summary>
            <param name="context">The validator context</param>
            <returns>Returns an error validation result.</returns>
        </member>
        <member name="T:ServiceStack.FluentValidation.Validators.ScalePrecisionValidator">
            <summary>
            Allows a decimal to be validated for scale and precision.  
            Scale would be the number of digits to the right of the decimal point.  
            Precision would be the number of digits.  
            
            It can be configured to use the effective scale and precision 
            (i.e. ignore trailing zeros) if required.
            
            123.4500 has an scale of 4 and a precision of 7, but an effective scale
            and precision of 2 and 5 respectively.
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceStackHost.StartedAt">
            <summary>
            When the AppHost was instantiated.
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceStackHost.AfterInitAt">
            <summary>
            When the Init function was done.
            Called at begin of <see cref="M:ServiceStack.ServiceStackHost.OnAfterInit"/>
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceStackHost.ReadyAt">
            <summary>
            When all configuration was completed.
            Called at the end of <see cref="M:ServiceStack.ServiceStackHost.OnAfterInit"/>
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceStackHost.TestMode">
            <summary>
            If app currently runs for unit tests.
            Used for overwritting AuthSession.
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceStackHost.ServiceAssemblies">
            <summary>
            The assemblies reflected to find api services.
            These can be provided in the constructor call.
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceStackHost.HasStarted">
            <summary>
            Wether AppHost configuration is done.
            Note: It doesn't mean the start function was called.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.IsReady">
            <summary>
            Wether AppHost is ready configured and either ready to run or already running.
            Equals <see cref="P:ServiceStack.ServiceStackHost.HasStarted"/>
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.SetConfig(ServiceStack.HostConfig)">
            <summary>
            Set the host config of the AppHost.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.Init">
            <summary>
            Initializes the AppHost.
            Calls the <see cref="M:ServiceStack.ServiceStackHost.Configure(Funq.Container)"/> method.
            Should be called before start.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.GetWebRootPath">
            <summary>
            Gets Full Directory Path of where the app is running
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.Start(System.String)">
            <summary>
            Starts the AppHost.
            this methods needs to be overwritten in subclass to provider a listener to start handling requests.
            </summary>
            <param name="urlBase">Url to listen to</param>
        </member>
        <member name="P:ServiceStack.ServiceStackHost.Container">
            <summary>
            The AppHost.Container. Note: it is not thread safe to register dependencies after AppStart.
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceStackHost.PreRequestFilters">
            <summary>
            Collection of PreRequest filters.
            They are called before each request is handled by a service, but after an HttpHandler is by the <see cref="T:ServiceStack.HttpHandlerFactory"/> chosen.
            called in <see cref="M:ServiceStack.ServiceStackHost.ApplyPreRequestFilters(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse)"/>.
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceStackHost.RequestConverters">
            <summary>
            Collection of RequestConverters.
            Can be used to convert/change Input Dto
            Called after routing and model binding, but before request filters.
            All request converters are called unless <see cref="P:ServiceStack.Web.IResponse.IsClosed"></see>
            Converter can return null, orginal model will be used.
            
            Note one converter could influence the input for the next converter!
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceStackHost.ResponseConverters">
            <summary>
            Collection of ResponseConverters.
            Can be used to convert/change Output Dto
            
            Called directly after response is handled, even before <see cref="M:ServiceStack.ServiceStackHost.ApplyResponseFiltersAsync(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)"></see>!
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceStackHost.ViewEngines">
            <summary>
            Lists of view engines for this app.
            If view is needed list is looped until view is found.
            </summary>
        </member>
        <member name="P:ServiceStack.ServiceStackHost.Plugins">
            <summary>
            Collection of added plugins.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.OnPreExecuteServiceFilter(ServiceStack.IService,System.Object,ServiceStack.Web.IRequest,ServiceStack.Web.IResponse)">
            <summary>
            Executed immediately before a Service is executed. Use return to change the request DTO used, must be of the same type.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.OnPostExecuteServiceFilter(ServiceStack.IService,System.Object,ServiceStack.Web.IRequest,ServiceStack.Web.IResponse)">
            <summary>
            Executed immediately after a service is executed. Use return to change response used.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.OnServiceException(ServiceStack.Web.IRequest,System.Object,System.Exception)">
            <summary>
            Occurs when the Service throws an Exception.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.OnUncaughtException(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.String,System.Exception)">
            <summary>
            Occurs when an exception is thrown whilst processing a request.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.Register``1(``0)">
            <summary>
            Register singleton in the Ioc Container of the AppHost.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.RegisterAs``2">
            <summary>
            Registers type to be automatically wired by the Ioc container of the AppHost.
            </summary>
            <typeparam name="T">Concrete type</typeparam>
            <typeparam name="TAs">Abstract type</typeparam>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.TryResolve``1">
            <summary>
            Tries to resolve type through the ioc container of the AppHost. 
            Can return null.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.Resolve``1">
            <summary>
            Resolves Type through the Ioc container of the AppHost.
            </summary>
            <exception cref="T:Funq.ResolutionException">If type is not registered</exception>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.GetPlugin``1">
            <summary>
            Looks for first plugin of this type in Plugins.
            Reflection performance penalty.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.ApplyCustomHandlerRequestFilters(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse)">
            <summary>
            Apply PreRequest Filters for participating Custom Handlers, e.g. RazorFormat, MarkdownFormat, etc
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.ApplyPreAuthenticateFilters(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse)">
            <summary>
            Apply PreAuthenticate Filters from IAuthWithRequest AuthProviders
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.ApplyPreRequestFilters(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse)">
            <summary>
            Applies the raw request filters. Returns whether or not the request has been handled 
            and no more processing should be done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.ApplyRequestFiltersAsync(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            Applies the request filters. Returns whether or not the request has been handled 
            and no more processing should be done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.ApplyResponseFiltersAsync(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            Applies the response filters. Returns whether or not the request has been handled 
            and no more processing should be done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.OnSessionFilter(ServiceStack.Web.IRequest,ServiceStack.Auth.IAuthSession,System.String)">
            <summary>
            Inspect or modify ever new UserSession created or resolved from cache. 
            return null if Session is invalid to create new Session.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.SetCookieFilter(ServiceStack.Web.IRequest,System.Net.Cookie)">
            <summary>
            Override built-in Cookies, return false to prevent the Cookie from being set.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.GetDbConnection(ServiceStack.Web.IRequest)">
            <summary>
            Gets IDbConnection Checks if DbInfo is seat in RequestContext.
            See multitenancy: https://docs.servicestack.net/multitenancy
            Called by itself, <see cref="T:ServiceStack.Service"></see> and <see cref="!:ServiceStack.Razor.ViewPageBase"></see>
            </summary>
            <param name="req">Provided by services and pageView, can be helpfull when overriding this method</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.GetRedisClient(ServiceStack.Web.IRequest)">
            <summary>
            Resolves <see cref="T:ServiceStack.Redis.IRedisClient"></see> based on <see cref="T:ServiceStack.Redis.IRedisClientsManager"></see>.GetClient();
            Called by itself, <see cref="T:ServiceStack.Service"></see> and <see cref="!:ServiceStack.Razor.ViewPageBase"></see>
            </summary>
            <param name="req">Provided by services and pageView, can be helpfull when overriding this method</param>
            <returns></returns>
        </member>
        <member name="F:ServiceStack.ServiceStackHost.DefaultCache">
            <summary>
            If they don't have an ICacheClient configured use an In Memory one.
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.GetCacheClient(ServiceStack.Web.IRequest)">
            <summary>
            Tries to resolve <see cref="T:ServiceStack.Redis.IRedisClient"></see> through Ioc container.
            If not registered, it falls back to <see cref="T:ServiceStack.Redis.IRedisClientsManager"></see>.GetClient();
            Called by itself, <see cref="T:ServiceStack.Service"></see> and <see cref="!:ServiceStack.Razor.ViewPageBase"></see>
            </summary>
            <param name="req">Provided by services and pageView, can be helpfull when overriding this method</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.GetMemoryCacheClient(ServiceStack.Web.IRequest)">
            <summary>
            Returns <see cref="T:ServiceStack.Caching.MemoryCacheClient"></see>. cache is only persisted for this running app instance.
            Called by <see cref="T:ServiceStack.Service"></see>.MemoryCacheClient
            </summary>
            <param name="req">Provided by services and pageView, can be helpfull when overriding this method</param>
            <returns>Nullable MemoryCacheClient</returns>
        </member>
        <member name="M:ServiceStack.ServiceStackHost.GetMessageProducer(ServiceStack.Web.IRequest)">
            <summary>
            Returns <see cref="T:ServiceStack.Messaging.IMessageProducer"></see> from the IOC container.
            Called by itself, <see cref="T:ServiceStack.Service"></see> and <see cref="!:ServiceStack.Razor.ViewPageBase"></see>
            </summary>
            <param name="req">Provided by services and PageViewBase, can be helpfull when overriding this method</param>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.HostConfig.UseSaltedHash">
            <summary>
            If enabled reverts to persist password hashes using the original SHA256 SaltedHash implementation. 
            By default ServiceStack uses the more secure ASP.NET Identity v3 PBKDF2 with HMAC-SHA256 implementation.
            
            New Users will have their passwords persisted with the specified implementation, likewise existing users will have their passwords re-hased
            to use the current registered IPasswordHasher.
            </summary>
        </member>
        <member name="P:ServiceStack.HostConfig.FallbackPasswordHashers">
            <summary>
            Older Password Hashers that were previously used to hash passwords. Failed password matches check to see if the password was hashed with 
            any of the registered FallbackPasswordHashers, if true the password attempt will succeed and password will get re-hashed with 
            the current registered IPasswordHasher.
            </summary>
        </member>
        <member name="P:ServiceStack.HostContext.VirtualFiles">
            <summary>
            Read/Write Virtual FileSystem. Defaults to FileSystemVirtualPathProvider
            </summary>
        </member>
        <member name="P:ServiceStack.HostContext.VirtualFileSources">
            <summary>
            Cascading collection of virtual file sources, inc. Embedded Resources, File System, In Memory, S3
            </summary>
        </member>
        <member name="M:ServiceStack.HostContext.CompleteRequest(ServiceStack.Web.IRequest)">
            <summary>
            Call to signal the completion of a ServiceStack-handled Request
            </summary>
        </member>
        <member name="M:ServiceStack.HostContext.ResolveService``1(System.Web.HttpContextBase)">
            <summary>
            Resolves and auto-wires a ServiceStack Service from a ASP.NET HttpContext.
            </summary>
        </member>
        <member name="M:ServiceStack.HostContext.ResolveService``1(System.Net.HttpListenerContext)">
            <summary>
            Resolves and auto-wires a ServiceStack Service from a HttpListenerContext.
            </summary>
        </member>
        <member name="M:ServiceStack.HostContext.ResolveService``1(ServiceStack.Web.IRequest)">
            <summary>
            Resolves and auto-wires a ServiceStack Service.
            </summary>
        </member>
        <member name="T:ServiceStack.Host.ActionContext">
            <summary>
            Context to capture IService action
            </summary>
        </member>
        <member name="P:ServiceStack.Host.AspNet.AspNetResponse.HasStarted">
            <summary>
            Can ignore as doesn't throw if HTTP Headers already written
            </summary>
        </member>
        <member name="M:ServiceStack.Host.ContainerResolveCache.CreateInstance(ServiceStack.Configuration.IResolver,System.Type)">
            <summary>
            Creates instance using straight Resolve approach.
            This will throw an exception if resolution fails
            </summary>
        </member>
        <member name="M:ServiceStack.Host.ContainerResolveCache.CreateInstance(ServiceStack.Configuration.IResolver,System.Type,System.Boolean)">
            <summary>
            Creates instance using the TryResolve approach if tryResolve = true.
            Otherwise uses Resolve approach, which will throw an exception if resolution fails
            </summary>
        </member>
        <member name="M:ServiceStack.Host.Cookies.AddPermanentCookie(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Sets a persistent cookie which never expires
            </summary>
        </member>
        <member name="M:ServiceStack.Host.Cookies.AddSessionCookie(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Sets a session cookie which expires after the browser session closes
            </summary>
        </member>
        <member name="M:ServiceStack.Host.Cookies.DeleteCookie(System.String)">
            <summary>
            Deletes a specified cookie by setting its value to empty and expiration to -1 days
            </summary>
        </member>
        <member name="M:ServiceStack.Host.Handlers.StaticFileHandler.#ctor(System.String)">
            <summary>
            Return File at specified virtualPath from AppHost.VirtualFiles ContentRootPath
            </summary>
        </member>
        <member name="M:ServiceStack.Host.Handlers.StaticFileHandler.SetDefaultFile(System.String,System.Byte[],System.DateTime)">
            <summary>
            Keep default file contents in-memory
            </summary>
            <param name="defaultFilePath"></param>
        </member>
        <member name="T:ServiceStack.Host.HttpListener.HttpListenerBase">
            <summary>
            Wrapper class for the HTTPListener to allow easier access to the
            server, for start and stop management and event routing of the actual
            inbound requests.
            </summary>
        </member>
        <member name="M:ServiceStack.Host.HttpListener.HttpListenerBase.Start(System.String,System.Threading.WaitCallback)">
            <summary>
            Starts the Web Service
            </summary>
            <param name="urlBase">
            A Uri that acts as the base that the server is listening on.
            Format should be: http://127.0.0.1:8080/ or http://127.0.0.1:8080/somevirtual/
            Note: the trailing slash is required! For more info see the
            HttpListener.Prefixes property on MSDN.
            </param>
        </member>
        <member name="M:ServiceStack.Host.HttpListener.HttpListenerBase.Stop">
            <summary>
            Shut down the Web Service
            </summary>
        </member>
        <member name="M:ServiceStack.Host.HttpListener.HttpListenerBase.ProcessRequestAsync(System.Net.HttpListenerContext)">
            <summary>
            Overridable method that can be used to implement a custom hnandler
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ServiceStack.Host.HttpListener.HttpListenerBase.AddUrlReservationToAcl(System.String)">
            <summary>
            Reserves the specified URL for non-administrator users and accounts. 
            http://msdn.microsoft.com/en-us/library/windows/desktop/cc307223(v=vs.85).aspx
            </summary>
            <returns>Reserved Url if the process completes successfully</returns>
        </member>
        <member name="P:ServiceStack.Host.HttpListener.ListenerResponse.HasStarted">
            <summary>
            Can ignore as doesn't throw if HTTP Headers already written
            </summary>
        </member>
        <member name="M:ServiceStack.Host.RestHandler.CreateRequestAsync(ServiceStack.Web.IRequest,System.String)">
            <summary>
            Used in Unit tests
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Host.RestPath.PathComponentsCount">
            <summary>
            The number of segments separated by '/' determinable by path.Split('/').Length
            e.g. /path/to/here.ext == 3
            </summary>
        </member>
        <member name="P:ServiceStack.Host.RestPath.TotalComponentsCount">
            <summary>
            The total number of segments after subparts have been exploded ('.') 
            e.g. /path/to/here.ext == 4
            </summary>
        </member>
        <member name="P:ServiceStack.Host.RestPath.FirstMatchHashKey">
            <summary>
            Provide for quick lookups based on hashes that can be determined from a request url
            </summary>
        </member>
        <member name="M:ServiceStack.Host.RestPath.IsMatch(ServiceStack.Web.IHttpRequest)">
            <summary>
            For performance withPathInfoParts should already be a lower case string
            to minimize redundant matching operations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Host.RestPath.IsMatch(System.String,System.String[],System.Int32@)">
            <summary>
            For performance withPathInfoParts should already be a lower case string
            to minimize redundant matching operations.
            </summary>
            <param name="httpMethod"></param>
            <param name="withPathInfoParts"></param>
            <param name="wildcardMatchCount"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Host.ServiceController.GetRestPathForRequest(System.String,System.String,ServiceStack.Web.IHttpRequest)">
            <summary>
            Get Best Matching Route. 
            </summary>
            <param name="httpMethod"></param>
            <param name="pathInfo"></param>
            <param name="httpReq">If not null, ensures any Route matches any [Route(Matches)]</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Host.ServiceController.ExecuteMessage(ServiceStack.Messaging.IMessage)">
            <summary>
            Execute MQ
            </summary>
        </member>
        <member name="M:ServiceStack.Host.ServiceController.ExecuteMessage(ServiceStack.Messaging.IMessage,ServiceStack.Web.IRequest)">
            <summary>
            Execute MQ with requestContext
            </summary>
        </member>
        <member name="M:ServiceStack.Host.ServiceController.Execute(System.Object)">
            <summary>
            Execute using empty RequestContext
            </summary>
        </member>
        <member name="M:ServiceStack.Host.ServiceController.Execute(System.Object,ServiceStack.Web.IRequest)">
            <summary>
            Execute a Service with a Request DTO. See ExecuteAsync for a non-blocking alternative.
            </summary>
        </member>
        <member name="M:ServiceStack.Host.ServiceController.ExecuteAsync(System.Object,ServiceStack.Web.IRequest)">
            <summary>
            Execute a Service with a Request DTO.
            </summary>
        </member>
        <member name="M:ServiceStack.Host.XsdMetadata.GetBaseTypeWithTheSameName(System.Type)">
            <summary>
            Gets the name of the base most type in the heirachy tree with the same.
            
            We get an exception when trying to create a schema with multiple types of the same name
            like when inheriting from a DataContract with the same name.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.HotReloadFeature">
            <summary>
            Back-end Service used by /js/hot-fileloader.js to detect file changes in /wwwroot and auto reload page.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ServiceStack.Html.HtmlCompressor" -->
        <member name="F:ServiceStack.Html.HtmlCompressor.PHP_TAG_PATTERN">
            Predefined pattern that matches <code>&lt;?php ... ?></code> tags. 
            Could be passed inside a list to {@link #setPreservePatterns(List) setPreservePatterns} method.
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.SERVER_SCRIPT_TAG_PATTERN">
            Predefined pattern that matches <code>&lt;% ... %></code> tags. 
            Could be passed inside a list to {@link #setPreservePatterns(List) setPreservePatterns} method.
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.SERVER_SIDE_INCLUDE_PATTERN">
            Predefined pattern that matches <code>&lt;--# ... --></code> tags. 
            Could be passed inside a list to {@link #setPreservePatterns(List) setPreservePatterns} method.
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.BLOCK_TAGS_MIN">
            Predefined list of tags that are very likely to be block-level. 
            Could be passed to {@link #setRemoveSurroundingSpaces(string) setRemoveSurroundingSpaces} method.
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.BLOCK_TAGS_MAX">
            Predefined list of tags that are block-level by default, excluding <code>&lt;div></code> and <code>&lt;li></code> tags. 
            Table tags are also included.
            Could be passed to {@link #setRemoveSurroundingSpaces(string) setRemoveSurroundingSpaces} method.
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.ALL_TAGS">
            Could be passed to {@link #setRemoveSurroundingSpaces(string) setRemoveSurroundingSpaces} method 
            to remove all surrounding spaces (not recommended).
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.Enabled">
            If set to <code>false</code> all compression will be bypassed. Might be useful for testing purposes. 
            Default is <code>true</code>.
            
            @param enabled set <code>false</code> to bypass all compression
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.JavaScriptCompressor">
            Gets or Sets JavaScript compressor implementation that will be used 
            to compress inline JavaScript in HTML. 
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.CssCompressor">
            Returns CSS compressor implementation that will be used 
            to compress inline CSS in HTML.
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.RemoveComments">
            If set to <code>true</code> all HTML comments will be removed.   
            Default is <code>true</code>.
            
            @param removeComments set <code>true</code> to remove all HTML comments
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.RemoveMultiSpaces">
            If set to <code>true</code> all multiple whitespace characters will be replaced with single spaces.
            Default is <code>true</code>.
            
            @param removeMultiSpaces set <code>true</code> to replace all multiple whitespace characters 
            will single spaces.
        </member>
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Html.HtmlCompressor.RemoveIntertagSpaces" -->
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Html.HtmlCompressor.RemoveQuotes" -->
        <member name="F:ServiceStack.Html.HtmlCompressor.CompressJavaScript">
            Enables JavaScript compression within &lt;script> tags 
            if set to <code>true</code>. Default is <code>false</code> for performance reasons.
             
            <p><b>Note:</b> Compressing JavaScript is not recommended if pages are 
            compressed dynamically on-the-fly because of performance impact. 
            You should consider putting JavaScript into a separate file and
            compressing it using standalone YUICompressor for example.</p>
            
            @param compressJavaScript set <code>true</code> to enable JavaScript compression. 
            Default is <code>false</code>
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.CompressCss">
            Enables CSS compression within &lt;style> tags using 
            <a href="http://developer.yahoo.com/yui/compressor/">Yahoo YUI ICompressor</a> 
            if set to <code>true</code>. Default is <code>false</code> for performance reasons.
             
            <p><b>Note:</b> Compressing CSS is not recommended if pages are 
            compressed dynamically on-the-fly because of performance impact. 
            You should consider putting CSS into a separate file and
            compressing it using standalone YUICompressor for example.</p>
            
            @param compressCss set <code>true</code> to enable CSS compression. 
            Default is <code>false</code>
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.SimpleDoctype">
            If set to <code>true</code>, existing DOCTYPE declaration will be replaced with simple <code>&lt;!DOCTYPE html></code> declaration.
            Default is <code>false</code>.
            
            @param simpleDoctype set <code>true</code> to replace existing DOCTYPE declaration with <code>&lt;!DOCTYPE html></code>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Html.HtmlCompressor.RemoveScriptAttributes" -->
        <member name="F:ServiceStack.Html.HtmlCompressor.RemoveStyleAttributes">
            If set to <code>true</code>, <code>type="text/style"</code> attributes will be removed from <code>&lt;style></code> tags. Default is <code>false</code>.
            
            @param removeStyleAttributes set <code>true</code> to remove <code>type="text/style"</code> attributes from <code>&lt;style></code> tags
        </member>
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Html.HtmlCompressor.RemoveLinkAttributes" -->
        <member name="F:ServiceStack.Html.HtmlCompressor.RemoveFormAttributes">
            If set to <code>true</code>, <code>method="get"</code> attributes will be removed from <code>&lt;form></code> tags. Default is <code>false</code>.
            
            @param removeFormAttributes set <code>true</code> to remove <code>method="get"</code> attributes from <code>&lt;form></code> tags
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressor.RemoveInputAttributes">
            If set to <code>true</code>, <code>type="text"</code> attributes will be removed from <code>&lt;input></code> tags. Default is <code>false</code>.
            
            @param removeInputAttributes set <code>true</code> to remove <code>type="text"</code> attributes from <code>&lt;input></code> tags
        </member>
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Html.HtmlCompressor.SimpleBooleanAttributes" -->
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Html.HtmlCompressor.RemoveJavaScriptProtocol" -->
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Html.HtmlCompressor.RemoveHttpProtocol" -->
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Html.HtmlCompressor.RemoveHttpsProtocol" -->
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Html.HtmlCompressor.RemoveSurroundingSpaces" -->
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Html.HtmlCompressor.PreservePatterns" -->
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Html.HtmlCompressor.GenerateStatistics" -->
        <member name="F:ServiceStack.Html.HtmlCompressor.Statistics">
            Returns {@link HtmlCompressorStatistics} object containing statistics of the last HTML compression, if enabled. 
            Should be called after {@link #compress(string)}
            
            @return {@link HtmlCompressorStatistics} object containing last HTML compression statistics
            
            @see HtmlCompressorStatistics
            @see #setGenerateStatistics(bool)
        </member>
        <member name="M:ServiceStack.Html.HtmlCompressor.Compress(System.String)">
            The main method that compresses given HTML source and returns compressed
            result.
            
            @param html HTML content to compress
            @return compressed content.
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressorStatistics.OriginalMetrics">
            Returns metrics of an uncompressed document
            
            @return metrics of an uncompressed document
            @see HtmlMetrics
        </member>
        <member name="F:ServiceStack.Html.HtmlCompressorStatistics.CompressedMetrics">
            Returns metrics of a compressed document
            
            @return metrics of a compressed document
            @see HtmlMetrics
        </member>
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Html.HtmlCompressorStatistics.Time" -->
        <member name="F:ServiceStack.Html.HtmlCompressorStatistics.PreservedSize">
            Returns total size of blocks that were skipped by the compressor 
            (for example content inside <code>&lt;pre></code> tags or inside   
            <code>&lt;script></code> tags with disabled javascript compression)
            
            @return the total size of blocks that were skipped by the compressor, in bytes
        </member>
        <member name="F:ServiceStack.Html.HtmlMetrics.Filesize">
            Returns total filesize of a document
            
            @return total filesize of a document, in bytes
        </member>
        <member name="F:ServiceStack.Html.HtmlMetrics.EmptyChars">
            Returns number of empty characters (spaces, tabs, end of lines) in a document
            
            @return number of empty characters in a document
        </member>
        <member name="F:ServiceStack.Html.HtmlMetrics.InlineScriptSize">
            Returns total size of inline <code>&lt;script></code> tags
            
            @return total size of inline <code>&lt;script></code> tags, in bytes
        </member>
        <member name="F:ServiceStack.Html.HtmlMetrics.InlineStyleSize">
            Returns total size of inline <code>&lt;style></code> tags
            
            @return total size of inline <code>&lt;style></code> tags, in bytes
        </member>
        <member name="F:ServiceStack.Html.HtmlMetrics.InlineEventSize">
            Returns total size of inline event handlers (<code>onclick</code>, etc)
            
            @return total size of inline event handlers, in bytes
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndRequest(ServiceStack.Web.IResponse,System.Boolean)">
            <summary>
            End a ServiceStack Request
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndRequest(System.Web.HttpResponseBase,System.Boolean)">
            <summary>
            End a ServiceStack Request
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndHttpHandlerRequest(System.Web.HttpContextBase,System.Boolean,System.Boolean,System.Boolean,System.Action{System.Web.HttpResponseBase})">
            <summary>
            End a HttpHandler Request
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndHttpHandlerRequest(ServiceStack.Web.IResponse,System.Boolean,System.Boolean,System.Action{ServiceStack.Web.IResponse})">
            <summary>
            End a HttpHandler Request
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndMqRequest(ServiceStack.Web.IResponse,System.Boolean)">
            <summary>
            End an MQ Request
            </summary>
        </member>
        <member name="M:ServiceStack.HttpExtensions.EndRequestWithNoContent(ServiceStack.Web.IResponse)">
            <summary>
            End a ServiceStack Request with no content
            </summary>
        </member>
        <member name="M:ServiceStack.HttpRequestExtensions.GetItemOrCookie(ServiceStack.Web.IRequest,System.String)">
            <summary>
            Gets string value from Items[name] then Cookies[name] if exists.
            Useful when *first* setting the users response cookie in the request filter.
            To access the value for this initial request you need to set it in Items[].
            </summary>
            <returns>string value or null if it doesn't exist</returns>
        </member>
        <member name="M:ServiceStack.HttpRequestExtensions.GetParam(ServiceStack.Web.IRequest,System.String)">
            <summary>
            Gets request paramater string value by looking in the following order:
            - QueryString[name]
            - FormData[name]
            - Cookies[name]
            - Items[name]
            </summary>
            <returns>string value or null if it doesn't exist</returns>
        </member>
        <member name="F:ServiceStack.HttpRequestExtensions.Log">
                     * 
                         Input: http://localhost:96/Cambia3/Temp/Test.aspx/path/info?q=item#fragment
            
                        Some HttpRequest path and URL properties:
                        Request.ApplicationPath:	/Cambia3
                        Request.CurrentExecutionFilePath:	/Cambia3/Temp/Test.aspx
                        Request.FilePath:			/Cambia3/Temp/Test.aspx
                        Request.Path:				/Cambia3/Temp/Test.aspx/path/info
                        Request.PathInfo:			/path/info
                        Request.PhysicalApplicationPath:	D:\Inetpub\wwwroot\CambiaWeb\Cambia3\
                        Request.QueryString:		/Cambia3/Temp/Test.aspx/path/info?query=arg
                        Request.Url.AbsolutePath:	/Cambia3/Temp/Test.aspx/path/info
                        Request.Url.AbsoluteUri:	http://localhost:96/Cambia3/Temp/Test.aspx/path/info?query=arg
                        Request.Url.Fragment:	
                        Request.Url.Host:			localhost
                        Request.Url.LocalPath:		/Cambia3/Temp/Test.aspx/path/info
                        Request.Url.PathAndQuery:	/Cambia3/Temp/Test.aspx/path/info?query=arg
                        Request.Url.Port:			96
                        Request.Url.Query:			?query=arg
                        Request.Url.Scheme:			http
                        Request.Url.Segments:		/
                                                    Cambia3/
                                                    Temp/
                                                    Test.aspx/
                                                    path/
                                                    info
                     * 
        </member>
        <member name="M:ServiceStack.HttpRequestExtensions.GetRequestParams(ServiceStack.Web.IRequest)">
            <summary>
            Duplicate Params are given a unique key by appending a #1 suffix
            </summary>
        </member>
        <member name="M:ServiceStack.HttpRequestExtensions.GetFlattenedRequestParams(ServiceStack.Web.IRequest)">
            <summary>
            Duplicate params have their values joined together in a comma-delimited string
            </summary>
        </member>
        <member name="M:ServiceStack.HttpRequestExtensions.ResolveItem(ServiceStack.Web.IRequest,System.String,System.Func{ServiceStack.Web.IRequest,System.Object})">
            <summary>
            Use this to treat Request.Items[] as a cache by returning pre-computed items to save 
            calculating them multiple times.
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResponseExtensions.SetPermanentCookie(ServiceStack.Web.IResponse,System.String,System.String)">
            <summary>
            Sets a persistent cookie which never expires
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResponseExtensions.SetSessionCookie(ServiceStack.Web.IResponse,System.String,System.String)">
            <summary>
            Sets a session cookie which expires after the browser session closes
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResponseExtensions.SetCookie(ServiceStack.Web.IResponse,System.String,System.String,System.TimeSpan)">
            <summary>
            Sets a persistent cookie which expires after the given time
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResponseExtensions.SetCookie(ServiceStack.Web.IResponse,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Sets a persistent cookie with an expiresAt date
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResponseExtensions.DeleteCookie(ServiceStack.Web.IResponse,System.String)">
            <summary>
            Deletes a specified cookie by setting its value to empty and expiration to -1 days
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResponseExtensionsInternal.WriteToResponse(ServiceStack.Web.IResponse,System.Object,ServiceStack.Web.StreamSerializerDelegateAsync,ServiceStack.Web.IRequest,System.Byte[],System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Writes to response.
            Response headers are customizable by implementing IHasOptions an returning Dictionary of Http headers.
            </summary>
            <param name="response">The response.</param>
            <param name="result">Whether or not it was implicity handled by ServiceStack's built-in handlers.</param>
            <param name="defaultAction">The default action.</param>
            <param name="request">The serialization context.</param>
            <param name="bodyPrefix">Add prefix to response body if any</param>
            <param name="bodySuffix">Add suffix to response body if any</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.HttpResponseExtensionsInternal.WriteErrorBody(ServiceStack.Web.IResponse,System.Exception)">
            <summary>
            When HTTP Headers have already been written and only the Body can be written
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResult.SoftRedirect(System.String,System.Object)">
            <summary>
            Respond with a 'Soft redirect' so smart clients (e.g. ajax) have access to the response and 
            can decide whether or not they should redirect
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResult.TriggerEvent(System.Object,System.String,System.String)">
            <summary>
            Decorate the response with an additional client-side event to instruct participating 
            smart clients (e.g. ajax) with hints to transparently invoke client-side functionality
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.GetDto(System.Object)">
            <summary>
            Shortcut to get the ResponseDTO whether it's bare or inside a IHttpResult
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.GetResponseDto(System.Object)">
            <summary>
            Alias of AsDto
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.GetDto``1(System.Object)">
            <summary>
            Shortcut to get the ResponseDTO whether it's bare or inside a IHttpResult
            </summary>
            <param name="response"></param>
            <returns>TResponse if found; otherwise null</returns>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.GetResponseDto``1(System.Object)">
            <summary>
            Alias of AsDto
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.IsErrorResponse(System.Object)">
            <summary>
            Whether the response is an IHttpError or Exception
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.ExtractHttpRanges(System.String,System.Int64,System.Int64@,System.Int64@)">
            <summary>
            rangeHeader should be of the format "bytes=0-" or "bytes=0-12345" or "bytes=123-456"
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.AddHttpRangeResponseHeaders(ServiceStack.Web.IResponse,System.Int64,System.Int64,System.Int64)">
            <summary>
            Adds 206 PartialContent Status, Content-Range and Content-Length headers
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.WritePartialTo(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Writes partial range as specified by start-end, from fromStream to toStream.
            </summary>
        </member>
        <member name="M:ServiceStack.HttpResultUtils.WritePartialToAsync(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Writes partial range as specified by start-end, from fromStream to toStream.
            </summary>
        </member>
        <member name="T:ServiceStack.IAppHost">
            <summary>
            ASP.NET or HttpListener ServiceStack host
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.ServiceAssemblies">
            <summary>
            The assemblies reflected to find api services provided in the AppHost constructor
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.Register``1(``0)">
            <summary>
            Register dependency in AppHost IOC on Startup
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterAs``2">
            <summary>
            AutoWired Registration of an interface with a concrete type in AppHost IOC on Startup.
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.Release(System.Object)">
            <summary>
            Allows the clean up for executed autowired services and filters.
            Calls directly after services and filters are executed.
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.OnEndRequest(ServiceStack.Web.IRequest)">
            <summary>
            Called at the end of each request. Enables Request Scope.
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.OnEndRequestCallbacks">
            <summary>
            Register callbacks to be called at the end of each request.
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.Routes">
            <summary>
            Register user-defined custom routes.
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.Metadata">
            <summary>
            Inferred Metadata available from existing services 
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.ContentTypes">
            <summary>
            Register custom ContentType serializers
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.PreRequestFilters">
            <summary>
            Add Request Filters, to be applied before the dto is deserialized
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.RequestConverters">
            <summary>
            Add Request Converter to convert Request DTO's
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.ResponseConverters">
            <summary>
            Add Response Converter to convert Response DTO's
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.GlobalRequestFilters">
            <summary>
            Add Request Filters for HTTP Requests
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.GlobalRequestFiltersAsync">
            <summary>
            Add Async Request Filters for HTTP Requests
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.GlobalResponseFilters">
            <summary>
            Add Response Filters for HTTP Responses
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.GlobalResponseFiltersAsync">
            <summary>
            Add Async Response Filters for HTTP Responses
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.GlobalMessageRequestFilters">
            <summary>
            Add Request Filters for MQ/TCP Requests
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.GlobalMessageRequestFiltersAsync">
            <summary>
            Add Async Request Filters for MQ/TCP Requests
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.GlobalMessageResponseFilters">
            <summary>
            Add Response Filters for MQ/TCP Responses
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterTypedRequestFilter``1(System.Action{ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,``0})">
            <summary>
            Add Request Filter for a specific Request DTO Type
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterTypedRequestFilter``1(System.Func{Funq.Container,ServiceStack.Host.ITypedFilter{``0}})">
            <summary>
            Add <seealso cref="T:ServiceStack.Host.ITypedFilter`1"/> as a Typed Request Filter for a specific Request DTO Type
            </summary>
            <typeparam name="T">The DTO Type.</typeparam>
            <param name="filter">The <seealso cref="T:Funq.Container"/> methods to resolve the <seealso cref="T:ServiceStack.Host.ITypedFilter`1"/>.</param>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterTypedResponseFilter``1(System.Action{ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,``0})">
            <summary>
            Add Request Filter for a specific Response DTO Type
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterTypedResponseFilter``1(System.Func{Funq.Container,ServiceStack.Host.ITypedFilter{``0}})">
            <summary>
            Add <seealso cref="T:ServiceStack.Host.ITypedFilter`1"/> as a Typed Request Filter for a specific Request DTO Type
            </summary>
            <typeparam name="T">The DTO Type.</typeparam>
            <param name="filter">The <seealso cref="T:Funq.Container"/> methods to resolve the <seealso cref="T:ServiceStack.Host.ITypedFilter`1"/>.</param>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterTypedMessageRequestFilter``1(System.Action{ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,``0})">
            <summary>
            Add Request Filter for a specific MQ Request DTO Type
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterTypedMessageResponseFilter``1(System.Action{ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,``0})">
            <summary>
            Add Request Filter for a specific MQ Response DTO Type
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.GatewayRequestFilters">
            <summary>
            Add Request Filter for Service Gateway Requests
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.GatewayResponseFilters">
            <summary>
            Add Response Filter for Service Gateway Responses
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.ViewEngines">
            <summary>
            Add alternative HTML View Engines
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.ServiceExceptionHandlers">
            <summary>
            Provide an exception handler for unhandled exceptions
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.ServiceExceptionHandlersAsync">
            <summary>
            Provide an exception handler for unhandled exceptions (Async)
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.UncaughtExceptionHandlers">
            <summary>
            Provide an exception handler for un-caught exceptions
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.UncaughtExceptionHandlersAsync">
            <summary>
            Provide an exception handler for un-caught exceptions (Async)
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.AfterInitCallbacks">
            <summary>
            Provide callbacks to be fired after the AppHost has finished initializing
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.OnDisposeCallbacks">
            <summary>
            Provide callbacks to be fired when AppHost is being disposed
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.RawHttpHandlers">
            <summary>
            Skip the ServiceStack Request Pipeline and process the returned IHttpHandler instead
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.CatchAllHandlers">
            <summary>
            Provide a catch-all handler that doesn't match any routes
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.FallbackHandlers">
            <summary>
            Provide a fallback handler for not found requests (last filter in Request Pipeline)
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.GlobalHtmlErrorHttpHandler">
            <summary>
            Use a fall-back Error Handler for handling global errors
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.CustomErrorHttpHandlers">
            <summary>
            Use a Custom Error Handler for handling specific error HttpStatusCodes
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.RequestBinders">
            <summary>
            Provide a custom model minder for a specific Request DTO
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.Config">
            <summary>
            The AppHost config
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.AppSettings">
            <summary>
            The AppHost AppSettings. Defaults to App or Web.config appSettings.
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.GetRuntimeConfig``1(ServiceStack.Web.IRequest,System.String,``0)">
            <summary>
            Allow specific configuration to be overridden at runtime in multi-tenancy Applications
            by overriding GetRuntimeConfig in your AppHost
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterService(System.Type,System.String[])">
            <summary>
            Register an Adhoc web service on Startup
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.RegisterServicesInAssembly(System.Reflection.Assembly)">
            <summary>
            Register all Services in Assembly
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.Plugins">
            <summary>
            List of pre-registered and user-defined plugins to be enabled in this AppHost
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.LoadPlugin(ServiceStack.IPlugin[])">
            <summary>
            Apply plugins to this AppHost
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.MapProjectPath(System.String)">
            <summary>
            Returns the Absolute File Path, relative from your AppHost's Project Path
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.VirtualFileSources">
            <summary>
            Cascading number of file sources, inc. Embedded Resources, File System, In Memory, S3
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.VirtualFiles">
            <summary>
            Read/Write Virtual FileSystem. Defaults to FileSystemVirtualPathProvider
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.AddVirtualFileSources">
            <summary>
            Register additional Virtual File Sources
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.CreateServiceRunner``1(ServiceStack.Host.ActionContext)">
            <summary>
            Create a service runner for IService actions
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.ResolveAbsoluteUrl(System.String,ServiceStack.Web.IRequest)">
            <summary>
            Resolve the absolute url for this request
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.ResolveLocalizedString(System.String,ServiceStack.Web.IRequest)">
            <summary>
            Resolve localized text, returns itself by default.
            The Request is provided when exists.
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.ExecuteMessage(ServiceStack.Messaging.IMessage)">
            <summary>
            Execute MQ Message in ServiceStack
            </summary>
        </member>
        <member name="P:ServiceStack.IAppHost.ServiceController">
            <summary>
            Access Service Controller for ServiceStack
            </summary>
        </member>
        <member name="M:ServiceStack.IAppHost.PublishMessage``1(ServiceStack.Messaging.IMessageProducer,``0)">
            <summary>
            Publish Message to be processed by AppHost
            </summary>
        </member>
        <member name="T:ServiceStack.IRepository">
            <summary>
            A convenient repository base class you can inherit from to reduce the boilerplate 
            with accessing a managed IDbConnection
            </summary>
        </member>
        <member name="T:ServiceStack.ILogic">
            <summary>
            A convenient base class for your injected service dependencies that reduces the boilerplate
            with managed access to ServiceStack's built-in providers
            </summary>
        </member>
        <member name="T:ServiceStack.IPlugin">
            <summary>
            Callback for Plugins to register necessary handlers with ServiceStack
            </summary>
        </member>
        <member name="T:ServiceStack.IPreInitPlugin">
            <summary>
            Callback to pre-configure any logic before IPlugin.Register() is fired
            </summary>
        </member>
        <member name="T:ServiceStack.IPostInitPlugin">
            <summary>
            Callback to post-configure any logic after IPlugin.Register() is fired
            </summary>
        </member>
        <member name="T:ServiceStack.IAuthPlugin">
            <summary>
            Callback for AuthProviders to register callbacks with AuthFeature
            </summary>
        </member>
        <member name="M:ServiceStack.IServiceBase.ResolveService``1">
            <summary>
            Resolve an alternate Web Service from ServiceStack's IOC container.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.TemplateMarkdownBlock">
             <summary>
             Converts markdown contents to HTML using the configured MarkdownConfig.Transformer.
             If a variable name is specified the HTML output is captured and saved instead. 
            
             Usages: {{#markdown}} ## The Heading {{/markdown}}
                     {{#markdown content}} ## The Heading {{/markdown}} HTML: {{content}}
             </summary>
        </member>
        <member name="P:ServiceStack.Messaging.BackgroundMqService.RetryCount">
            <summary>
            How many times to retry processing messages before moving them to the DLQ 
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.BackgroundMqService.RequestFilter">
            <summary>
            Execute global transformation or custom logic before a request is processed.
            Must be thread-safe.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.BackgroundMqService.ResponseFilter">
            <summary>
            Execute global transformation or custom logic on the response.
            Must be thread-safe.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.BackgroundMqService.PriortyQueuesWhitelist">
            <summary>
            If you only want to enable priority queue handlers (and threads) for specific msg types
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.BackgroundMqService.EnablePriortyQueues">
            <summary>
            Create workers for priority queues
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.BackgroundMqService.PublishResponsesWhitelist">
            <summary>
            Opt-in to only publish responses on this white list. 
            Publishes all responses by default.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.BackgroundMqService.OutHandlers">
            <summary>
            Subscribe to messages sent to .outq
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.BackgroundMqService.OutQMaxSize">
            <summary>
            The max size of the Out MQ Collection in each Type (default 100)
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.IMessageHandlerFactory">
            <summary>
            Encapsulates creating a new message handler
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.MessageHandler`1">
            <summary>
            Processes all messages in a Normal and Priority Queue.
            Expects to be called in 1 thread. i.e. Non Thread-Safe.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.Metadata.ServiceEndpointsMetadataConfig.Create(System.String)">
            <summary>
            Changes the links for the servicestack/metadata page
            </summary>
        </member>
        <member name="M:ServiceStack.Platform.GetParseMethod(System.Type)">
            <summary>
            Get the static Parse(string) method on the type supplied
            </summary>
        </member>
        <member name="M:ServiceStack.Platform.GetConstructorInfo(System.Type)">
            <summary>
            Gets the constructor info for T(string) if exists.
            </summary>
        </member>
        <member name="M:ServiceStack.Platform.ParseTextValue``1(System.String)">
            <summary>
            Returns the value returned by the 'T.Parse(string)' method if exists otherwise 'new T(string)'. 
            e.g. if T was a TimeSpan it will return TimeSpan.Parse(textValue).
            If there is no Parse Method it will attempt to create a new instance of the destined type
            </summary>
        </member>
        <member name="M:ServiceStack.Platforms.PlatformNet.ConfigSectionExists(System.String)">
            <summary>
            Determines wheter the Config section identified by the sectionName exists.
            </summary>
        </member>
        <member name="M:ServiceStack.Platforms.PlatformNet.GetConnectionStringSetting(System.String)">
            <summary>
            Gets the connection string setting.
            </summary>
        </member>
        <member name="P:ServiceStack.PostmanFeature.DefaultVerbsForAny">
            <summary>
            Only generate specified Verb entries for "ANY" routes
            </summary>
        </member>
        <member name="T:ServiceStack.ResourceDesigner.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ServiceStack.ResourceDesigner.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ServiceStack.ResourceDesigner.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ServiceStack.ResourceDesigner.Resources.Registration_CantRegisterContainer">
            <summary>
              Looks up a localized string similar to Container service is built-in and read-only..
            </summary>
        </member>
        <member name="P:ServiceStack.ResourceDesigner.Resources.Registration_IncompatibleAsType">
            <summary>
              Looks up a localized string similar to Service type {0} does not inherit or implement {1}..
            </summary>
        </member>
        <member name="P:ServiceStack.ResourceDesigner.Resources.ResolutionException_MissingNamedType">
            <summary>
              Looks up a localized string similar to Required dependency of type {0} named &apos;{1}&apos; could not be resolved..
            </summary>
        </member>
        <member name="P:ServiceStack.ResourceDesigner.Resources.ResolutionException_MissingType">
            <summary>
              Looks up a localized string similar to Required dependency of type {0} could not be resolved..
            </summary>
        </member>
        <member name="P:ServiceStack.ResourceDesigner.Resources.ResolutionException_UnknownScope">
            <summary>
              Looks up a localized string similar to Unknown scope..
            </summary>
        </member>
        <member name="T:ServiceStack.ProxyFeature">
            <summary>
            Transparently Proxy requests through to downstream HTTP Servers
            </summary>
        </member>
        <member name="P:ServiceStack.ProxyFeature.ProxyRequestFilter">
            <summary>
            Customize the HTTP Request Headers that are sent to downstream server
            </summary>
        </member>
        <member name="P:ServiceStack.ProxyFeature.ProxyResponseFilter">
            <summary>
            Customize the downstream HTTP Response Headers that are returned to client
            </summary>
        </member>
        <member name="P:ServiceStack.ProxyFeature.TransformRequest">
            <summary>
            Inspect or Transform the HTTP Request Body that's sent downstream
            </summary>
        </member>
        <member name="P:ServiceStack.ProxyFeature.TransformResponse">
            <summary>
            Inspect or Transform the downstream HTTP Response Body that's returned
            </summary>
        </member>
        <member name="M:ServiceStack.ProxyFeature.#ctor(System.Func{ServiceStack.Web.IHttpRequest,System.Boolean},System.Func{ServiceStack.Web.IHttpRequest,System.String})">
            <summary>
            Required filters to specify which requests to proxy and which url to use.
            </summary>
            <param name="matchingRequests">Specify which requests should be proxied</param>
            <param name="resolveUrl">Specify which downstream url to use</param>
        </member>
        <member name="F:ServiceStack.RedisErrorLoggerFeature.UrnServiceErrorType">
            <summary>
            Service error logs are kept in 'urn:ServiceErrors:{ServiceName}'
            </summary>
        </member>
        <member name="F:ServiceStack.RedisErrorLoggerFeature.CombinedServiceLogId">
            <summary>
            Combined service error logs are maintained in 'urn:ServiceErrors:All'
            </summary>
        </member>
        <member name="T:ServiceStack.RegistrationFeature">
            <summary>
            Enable the Registration feature and configure the RegistrationService.
            </summary>
        </member>
        <member name="T:ServiceStack.RequestContext">
            <summary>
            Abstraction to provide a context per request.
            in spnet.web its equivalent to <see cref="T:System.Web.HttpContext"></see>.Current.Items falls back to CallContext
            </summary>
        </member>
        <member name="F:ServiceStack.RequestContext.UseThreadStatic">
            <summary>
            Tell ServiceStack to use ThreadStatic Items Collection for RequestScoped items.
            Warning: ThreadStatic Items aren't pinned to the same request in async services which callback on different threads.
            </summary>
        </member>
        <member name="M:ServiceStack.RequestContext.StartRequestContext">
            <summary>
            Start a new Request context, everything deeper in Async pipeline will get this new RequestContext dictionary.
            </summary>
        </member>
        <member name="P:ServiceStack.RequestContext.Items">
            <summary>
            Gets a list of items for this request. 
            </summary>
            <remarks>This list will be cleared on every request and is specific to the original thread that is handling the request.
            If a handler uses additional threads, this data will not be available on those threads.
            </remarks>
        </member>
        <member name="M:ServiceStack.RequestContext.TrackDisposable(System.IDisposable)">
            <summary>
            Track any IDisposable's to dispose of at the end of the request in IAppHost.OnEndRequest()
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:ServiceStack.RequestContext.ReleaseDisposables">
            <summary>
            Release currently registered dependencies for this request
            </summary>
            <returns>true if any dependencies were released</returns>
        </member>
        <member name="M:ServiceStack.RequestExtensions.ToOptimizedResult(ServiceStack.Web.IRequest,System.Object)">
            <summary>
            Returns the optimized result for the IRequestContext. 
            Does not use or store results in any cache.
            </summary>
            <param name="request"></param>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.RequestExtensions.ToOptimizedResultAsync(ServiceStack.Web.IRequest,System.Object)">
            <summary>
            Returns the optimized result for the IRequestContext. 
            Does not use or store results in any cache.
            </summary>
        </member>
        <member name="M:ServiceStack.RequestExtensions.ToOptimizedResultUsingCache``1(ServiceStack.Web.IRequest,ServiceStack.Caching.ICacheClient,System.String,System.Func{``0})">
            <summary>
            Overload for the <see cref="!:ContentCacheManager.Resolve"/> method returning the most
            optimized result based on the MimeType and CompressionType from the IRequestContext.
            </summary>
        </member>
        <member name="M:ServiceStack.RequestExtensions.ToOptimizedResultUsingCache``1(ServiceStack.Web.IRequest,ServiceStack.Caching.ICacheClient,System.String,System.Nullable{System.TimeSpan},System.Func{``0})">
            <summary>
            Overload for the <see cref="!:ContentCacheManager.Resolve"/> method returning the most
            optimized result based on the MimeType and CompressionType from the IRequestContext.
            <param name="expireCacheIn">How long to cache for, null is no expiration</param>
            </summary>
        </member>
        <member name="M:ServiceStack.RequestExtensions.RemoveFromCache(ServiceStack.Web.IRequest,ServiceStack.Caching.ICacheClient,System.String[])">
            <summary>
            Clears all the serialized and compressed caches set 
            by the 'Resolve' method for the cacheKey provided
            </summary>
            <param name="requestContext"></param>
            <param name="cacheClient"></param>
            <param name="cacheKeys"></param>
        </member>
        <member name="M:ServiceStack.RequestExtensions.SetItem(ServiceStack.Web.IRequest,System.String,System.Object)">
            <summary>
            Store an entry in the IHttpRequest.Items Dictionary
            </summary>
        </member>
        <member name="M:ServiceStack.RequestExtensions.GetItem(ServiceStack.Web.IRequest,System.String)">
            <summary>
            Get an entry from the IHttpRequest.Items Dictionary
            </summary>
        </member>
        <member name="T:ServiceStack.RequestFilterAttribute">
            <summary>
            Base class to create request filter attributes only for specific HTTP methods (GET, POST...)
            </summary>
        </member>
        <member name="M:ServiceStack.RequestFilterAttribute.#ctor(ServiceStack.ApplyTo)">
            <summary>
            Creates a new <see cref="T:ServiceStack.RequestFilterAttribute"/>
            </summary>
            <param name="applyTo">Defines when the filter should be executed</param>
        </member>
        <member name="M:ServiceStack.RequestFilterAttribute.Execute(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            This method is only executed if the HTTP method matches the <see cref="P:ServiceStack.RequestFilterAttribute.ApplyTo"/> property.
            </summary>
            <param name="req">The http request wrapper</param>
            <param name="res">The http response wrapper</param>
            <param name="requestDto">The request DTO</param>
        </member>
        <member name="M:ServiceStack.RequestFilterAttribute.Copy">
            <summary>
            Create a ShallowCopy of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.RequestFilterAsyncAttribute">
            <summary>
            Base class to create request filter attributes only for specific HTTP methods (GET, POST...)
            </summary>
        </member>
        <member name="M:ServiceStack.RequestFilterAsyncAttribute.#ctor(ServiceStack.ApplyTo)">
            <summary>
            Creates a new <see cref="T:ServiceStack.RequestFilterAttribute"/>
            </summary>
            <param name="applyTo">Defines when the filter should be executed</param>
        </member>
        <member name="M:ServiceStack.RequestFilterAsyncAttribute.ExecuteAsync(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            This method is only executed if the HTTP method matches the <see cref="P:ServiceStack.RequestFilterAsyncAttribute.ApplyTo"/> property.
            </summary>
            <param name="req">The http request wrapper</param>
            <param name="res">The http response wrapper</param>
            <param name="requestDto">The request DTO</param>
        </member>
        <member name="M:ServiceStack.RequestFilterAsyncAttribute.Copy">
            <summary>
            Create a ShallowCopy of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.AtRestPath">
            <summary>
            RequestLogs service Route, default is /requestlogs
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.EnableSessionTracking">
            <summary>
            Turn On/Off Session Tracking
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.EnableRequestBodyTracking">
            <summary>
            Turn On/Off Logging of Raw Request Body, default is Off
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.EnableResponseTracking">
            <summary>
            Turn On/Off Tracking of Responses
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.EnableErrorTracking">
            <summary>
            Turn On/Off Tracking of Exceptions
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.SkipLogging">
            <summary>
            Don't log matching requests
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.Capacity">
            <summary>
            Size of InMemoryRollingRequestLogger circular buffer
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.RequiredRoles">
            <summary>
            Limit access to /requestlogs service to these roles
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.RequestLogger">
            <summary>
            Change the RequestLogger provider. Default is InMemoryRollingRequestLogger
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.ExcludeRequestDtoTypes">
            <summary>
            Don't log requests of these types. By default RequestLog's are excluded
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.HideRequestBodyForRequestDtoTypes">
            <summary>
            Don't log request bodys for services with sensitive information.
            By default Auth and Registration requests are hidden.
            </summary>
        </member>
        <member name="P:ServiceStack.RequestLogsFeature.LimitToServiceRequests">
            <summary>
            Limit logging to only Service Requests
            </summary>
        </member>
        <member name="T:ServiceStack.RequiredPermissionAttribute">
            <summary>
            Indicates that the request dto, which is associated with this attribute,
            can only execute, if the user has specific permissions.
            </summary>
        </member>
        <member name="T:ServiceStack.RequiredRoleAttribute">
            <summary>
            Indicates that the request dto, which is associated with this attribute,
            can only execute, if the user has specific roles.
            </summary>
        </member>
        <member name="M:ServiceStack.RequiredRoleAttribute.AssertRequiredRoles(ServiceStack.Web.IRequest,System.String[])">
            <summary>
            Check all session is in all supplied roles otherwise a 401 HttpError is thrown
            </summary>
            <param name="req"></param>
            <param name="requiredRoles"></param>
        </member>
        <member name="T:ServiceStack.RequiresAnyPermissionAttribute">
            <summary>
            Indicates that the request dto, which is associated with this attribute,
            can only execute, if the user has specific permissions.
            </summary>
        </member>
        <member name="T:ServiceStack.RequiresAnyRoleAttribute">
            <summary>
            Indicates that the request dto, which is associated with this attribute,
            can only execute, if the user has any of the specified roles.
            </summary>
        </member>
        <member name="M:ServiceStack.RequiresAnyRoleAttribute.AssertRequiredRoles(ServiceStack.Web.IRequest,System.String[])">
            <summary>
            Check all session is in any supplied roles otherwise a 401 HttpError is thrown
            </summary>
            <param name="request"></param>
            <param name="requiredRoles"></param>
        </member>
        <member name="T:ServiceStack.ResponseFilterAttribute">
            <summary>
            Base class to create response filter attributes only for specific HTTP methods (GET, POST...)
            </summary>
        </member>
        <member name="M:ServiceStack.ResponseFilterAttribute.#ctor(ServiceStack.ApplyTo)">
            <summary>
            Creates a new <see cref="T:ServiceStack.ResponseFilterAttribute"/>
            </summary>
            <param name="applyTo">Defines when the filter should be executed</param>
        </member>
        <member name="M:ServiceStack.ResponseFilterAttribute.Execute(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            This method is only executed if the HTTP method matches the <see cref="P:ServiceStack.ResponseFilterAttribute.ApplyTo"/> property.
            </summary>
            <param name="req">The http request wrapper</param>
            <param name="res">The http response wrapper</param>
            <param name="requestDto">The response DTO</param>
        </member>
        <member name="M:ServiceStack.ResponseFilterAttribute.Copy">
            <summary>
            Create a ShallowCopy of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.ResponseFilterAsyncAttribute">
            <summary>
            Base class to create response filter attributes only for specific HTTP methods (GET, POST...)
            </summary>
        </member>
        <member name="M:ServiceStack.ResponseFilterAsyncAttribute.#ctor(ServiceStack.ApplyTo)">
            <summary>
            Creates a new <see cref="T:ServiceStack.ResponseFilterAttribute"/>
            </summary>
            <param name="applyTo">Defines when the filter should be executed</param>
        </member>
        <member name="M:ServiceStack.ResponseFilterAsyncAttribute.ExecuteAsync(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            This method is only executed if the HTTP method matches the <see cref="P:ServiceStack.ResponseFilterAsyncAttribute.ApplyTo"/> property.
            </summary>
            <param name="req">The http request wrapper</param>
            <param name="res">The http response wrapper</param>
            <param name="requestDto">The response DTO</param>
        </member>
        <member name="M:ServiceStack.ResponseFilterAsyncAttribute.Copy">
            <summary>
            Create a ShallowCopy of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.ServerEventsHandler.RemoveExpiredSubscriptionsEvery">
            <summary>
            Call IServerEvents.RemoveExpiredSubscriptions() after every count
            </summary>
        </member>
        <member name="T:ServiceStack.Service">
            <summary>
            Generic + Useful IService base class
            </summary>
        </member>
        <member name="P:ServiceStack.Service.LocalCache">
            <summary>
            Returns <see cref="T:ServiceStack.Caching.MemoryCacheClient"></see>. cache is only persisted for this running app instance.
            </summary>
        </member>
        <member name="P:ServiceStack.Service.VirtualFileSources">
            <summary>
            Cascading collection of virtual file sources, inc. Embedded Resources, File System, In Memory, S3
            </summary>
        </member>
        <member name="P:ServiceStack.Service.VirtualFiles">
            <summary>
            Read/Write Virtual FileSystem. Defaults to FileSystemVirtualPathProvider
            </summary>
        </member>
        <member name="F:ServiceStack.Service.session">
            <summary>
            Dynamic Session Bag
            </summary>
        </member>
        <member name="M:ServiceStack.Service.SessionAs``1">
            <summary>
            Typed UserSession
            </summary>
        </member>
        <member name="P:ServiceStack.Service.IsAuthenticated">
            <summary>
            If user found in session for this request is authenticated.
            </summary>
        </member>
        <member name="M:ServiceStack.Service.PublishMessage``1(``0)">
            <summary>
            Publish a MQ message over the <see cref="T:ServiceStack.Messaging.IMessageProducer"></see> implementation.
            </summary>
        </member>
        <member name="M:ServiceStack.Service.Dispose">
            <summary>
            Disposes all created disposable properties of this service
            and executes disposing of all request <see cref="T:System.IDisposable"></see>s 
            (warning, manually triggering this might lead to unwanted disposing of all request related objects and services.)
            </summary>
        </member>
        <member name="M:ServiceStack.ServiceRoutesExtensions.AddFromAssembly(ServiceStack.Web.IServiceRoutes,System.Reflection.Assembly[])">
             <summary>
                 Scans the supplied Assemblies to infer REST paths and HTTP verbs.
             </summary>
            <param name="routes">The <see cref="T:ServiceStack.Web.IServiceRoutes"/> instance.</param>
            <param name="assembliesWithServices">
                 The assemblies with REST services.
             </param>
             <returns>The same <see cref="T:ServiceStack.Web.IServiceRoutes"/> instance;
            		never <see langword="null"/>.</returns>
        </member>
        <member name="M:ServiceStack.ServiceStackProvider.SessionAs``1">
            <summary>
            Typed UserSession
            </summary>
        </member>
        <member name="F:ServiceStack.ServiceStackProvider.session">
            <summary>
            Dynamic Session Bag
            </summary>
        </member>
        <member name="T:ServiceStack.SessionExtensions">
            <summary>
            Configure ServiceStack to have ISession support
            </summary>
        </member>
        <member name="M:ServiceStack.SessionExtensions.CreateSessionId(ServiceStack.Web.IResponse,ServiceStack.Web.IRequest)">
            <summary>
            Create the active Session or Permanent Session Id cookie.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.SessionExtensions.CreateSessionIds(ServiceStack.Web.IResponse,ServiceStack.Web.IRequest)">
            <summary>
            Create both Permanent and Session Id cookies and return the active sessionId
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Support.WebHost.GzipOptimizationTest">
            <summary>
            Optimized code to find if GZIP is supported from:
             - http://dotnetperls.com/gzip-request
            
            Other resources for GZip, deflate resources:
            - http://www.west-wind.com/Weblog/posts/10564.aspx
            	- http://www.west-wind.com/WebLog/posts/102969.aspx
            - ICSharpCode 
            </summary>
        </member>
        <member name="T:ServiceStack.SuppressFormsAuthenticationRedirectModule">
            <summary>
            This class interecepts 401 requests and changes them to 402 errors.   When this happens the FormAuthentication module
            will no longer hijack it and redirect back to login because it is a 402 error, not a 401.
            When the request ends, this class sets the status code back to 401 and everything works as it should.
            
            PathToSupress is the path inside your website where the above swap should happen.
            
            If you can build for .net 4.5, you do not have to do this swap. You can take advantage of a new flag (SuppressFormsAuthenticationRedirect)
            that tells the FormAuthenticationModule to not redirect, which also means you will not need the EndRequest code.
            </summary>
        </member>
        <member name="P:ServiceStack.TemplatePagesFeature.TemplatesAdminRole">
            <summary>
            Role Required to call Templates Admin Service (/templates/admin), Default is Admin.
            If null Templates Admin Service will not be registered.
            </summary>
        </member>
        <member name="P:ServiceStack.TemplatePagesFeature.MetadataDebugAdminRole">
            <summary>
            Role Required to call Metadata Debug Service (/metadata/debug).
            If null Metadata Debug Service will only be registered in DebugMode.
            </summary>
        </member>
        <member name="T:ServiceStack.Templates.HtmlTemplates">
            <summary>
            Load Embedded Resource Templates in ServiceStack.
            To get ServiceStack to use your own instead just add a copy of one or more of the following to your Web Root:
            ~/Templates/IndexOperations.html
            ~/Templates/OperationControl.html
            ~/Templates/HtmlFormat.html
            </summary>
        </member>
        <member name="M:ServiceStack.ValidationResultExtensions.ToErrorResult(ServiceStack.FluentValidation.Results.ValidationResult)">
            <summary>
            Converts the validation result to an error result which will be serialized by ServiceStack in a clean and human-readable way.
            </summary>
            <param name="result">The validation result</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.ValidationResultExtensions.ToException(ServiceStack.FluentValidation.Results.ValidationResult)">
            <summary>
            Converts the validation result to an error exception which will be serialized by ServiceStack in a clean and human-readable way
            if the returned exception is thrown.
            </summary>
            <param name="result">The validation result</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Validation.MultiRuleSetValidatorSelector.#ctor(System.String[])">
            <summary>
            Creates a new instance of the RulesetValidatorSelector.
            </summary>
        </member>
        <member name="M:ServiceStack.Validation.MultiRuleSetValidatorSelector.CanExecute(ServiceStack.FluentValidation.IValidationRule,System.String,ServiceStack.FluentValidation.ValidationContext)">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
            <param name="rule">The rule</param>
            <param name="propertyPath">Property path (eg Customer.Address.Line1)</param>
            <param name="context">Contextual information</param>
            <returns>Whether or not the validator can execute.</returns>
        </member>
        <member name="M:ServiceStack.Validation.ValidationFeature.Register(ServiceStack.IAppHost)">
            <summary>
            Activate the validation mechanism, so every request DTO with an existing validator
            will be validated.
            </summary>
            <param name="appHost">The app host</param>
        </member>
        <member name="M:ServiceStack.Validation.ValidationFeature.GetRequestErrorBody(System.Object)">
            <summary>
            Override to provide additional/less context about the Service Exception. 
            By default the request is serialized and appended to the ResponseStatus StackTrace.
            </summary>
        </member>
        <member name="M:ServiceStack.Validation.ValidationExtensions.RegisterValidators(Funq.Container,System.Reflection.Assembly[])">
            <summary>
            Auto-scans the provided assemblies for a <see cref="T:ServiceStack.FluentValidation.IValidator"/>
            and registers it in the provided IoC container.
            </summary>
            <param name="container">The IoC container</param>
            <param name="assemblies">The assemblies to scan for a validator</param>
        </member>
        <member name="T:Funq.Container">
            <summary>
			Main container class for components, supporting container hierarchies and
			lifetime management of <see cref="T:System.IDisposable" /> instances.
		</summary>
        </member>
        <member name="M:Funq.Container.RegisterAutoWired``1">
            <summary>
            Register an autowired dependency
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Funq.Container.RegisterAutoWired``1(System.String)">
            <summary>
            Register an autowired dependency
            </summary>
            <param name="name">Name of dependency</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Funq.Container.RegisterAutoWiredAs``2">
            <summary>
            Register an autowired dependency as a separate type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Funq.Container.RegisterAutoWiredAs``2(System.String)">
            <summary>
            Register an autowired dependency as a separate type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Funq.Container.RegisterAs``2">
            <summary>
            Alias for RegisterAutoWiredAs
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Funq.Container.RegisterAs``2(System.String)">
            <summary>
            Alias for RegisterAutoWiredAs
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Funq.Container.AutoWire(System.Object)">
            <summary>
            Auto-wires an existing instance, 
            ie all public properties are tried to be resolved.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Funq.Container.GenerateAutoWireFn``1">
            <summary>
            Generates a function which creates and auto-wires <see cref="!:TService"/>.
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="lambdaParam"></param>
            <returns></returns>
        </member>
        <member name="M:Funq.Container.AutoWire(Funq.Container,System.Object)">
            <summary>
            Auto-wires an existing instance of a specific type.
            The auto-wiring progress is also cached to be faster 
            when calling next time with the same type.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Funq.Container.#ctor">
            <summary>
			Initializes a new empty container.
		</summary>
        </member>
        <member name="P:Funq.Container.DefaultOwner">
            <summary>
			Default owner for new registrations. <see cref="F:Funq.Owner.Container" /> by default.
		</summary>
        </member>
        <member name="P:Funq.Container.DefaultReuse">
            <summary>
			Default reuse scope for new registrations. <see cref="F:Funq.ReuseScope.Hierarchy" /> by default.
		</summary>
        </member>
        <member name="M:Funq.Container.CreateChildContainer">
            <summary>
			Creates a child container of the current one, which exposes its
			current service registration to the new child container.
		</summary>
        </member>
        <member name="M:Funq.Container.Dispose">
            <summary>
			Disposes the container and all instances owned by it (see
			<see cref="F:Funq.Owner.Container" />), as well as all child containers
			created through <see cref="M:Funq.Container.CreateChildContainer" />.
		</summary>
        </member>
        <member name="M:Funq.Container.Register``1(``0)">
            <summary>
			Registers a service instance with the container. This instance 
			will have <see cref="F:Funq.Owner.External" /> and <see cref="F:Funq.ReuseScope.Hierarchy" /> 
			behavior.
		</summary><param name="instance">Service instance to use.</param>
        </member>
        <member name="M:Funq.Container.Register``1(System.String,``0)">
            <summary>
			Registers a named service instance with the container. This instance
			will have <see cref="F:Funq.Owner.External" /> and <see cref="F:Funq.ReuseScope.Hierarchy" />
			behavior.
		</summary><param name="name">Name of the service to register.</param><param name="instance">Service instance to use.</param>
        </member>
        <member name="M:Funq.Container.LazyResolve``1">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance 
			of the service when needed.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>The function that can resolve to the service instance when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``2">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*" />
        </member>
        <member name="M:Funq.Container.LazyResolve``3">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*" />
        </member>
        <member name="M:Funq.Container.LazyResolve``4">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*" />
        </member>
        <member name="M:Funq.Container.LazyResolve``5">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*" />
        </member>
        <member name="M:Funq.Container.LazyResolve``6">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*" />
        </member>
        <member name="M:Funq.Container.LazyResolve``7">
            <!-- No matching elements were found for the following include tag --><include file="Container.xdoc" path="docs/doc[@for=&quot;Container.LazyResolve{TService,TArgs}&quot;]/*" />
        </member>
        <member name="M:Funq.Container.LazyResolve``1(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service with the given name when needed.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``2(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``3(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``4(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``5(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``6(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.LazyResolve``7(System.String)">
            <summary>
			Retrieves a function that can be used to lazily resolve an instance
			of the service of the given type, name and service constructor arguments when needed.
		</summary><param name="name">Name of the service to retrieve.</param><returns>The function that can resolve to the service instance with the given and service constructor arguments name when invoked.</returns><exception cref="T:Funq.ResolutionException">The requested service with the given name and constructor arguments has not been registered previously.</exception>
        </member>
        <member name="M:Funq.Container.Register``1(System.Func{Funq.Container,``0})">
            <summary>
			Registers the given service by providing a factory delegate to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``2(System.Func{Funq.Container,``1,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg">First argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``3(System.Func{Funq.Container,``1,``2,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``4(System.Func{Funq.Container,``1,``2,``3,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``5(Funq.Func{Funq.Container,``1,``2,``3,``4,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``6(Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``7(Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``6,``0})">
            <summary>
			Registers the given service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg6">Sixth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``1(System.String,System.Func{Funq.Container,``0})">
            <summary>
			Registers the given named service by providing a factory delegate to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``2(System.String,System.Func{Funq.Container,``1,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg">First argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``3(System.String,System.Func{Funq.Container,``1,``2,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``4(System.String,System.Func{Funq.Container,``1,``2,``3,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``5(System.String,Funq.Func{Funq.Container,``1,``2,``3,``4,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``6(System.String,Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Register``7(System.String,Funq.Func{Funq.Container,``1,``2,``3,``4,``5,``6,``0})">
            <summary>
			Registers the given named service by providing a factory delegate that receives arguments to
			instantiate it.
		</summary><typeparam name="TService">The service type to register.</typeparam><typeparam name="TArg1">First argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg2">Second argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg3">Third argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg4">Fourth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg5">Fifth argument that should be passed to the factory delegate to create the instace.</typeparam><typeparam name="TArg6">Sixth argument that should be passed to the factory delegate to create the instace.</typeparam><param name="name">A name used to differenciate this service registration.</param><param name="factory">The factory delegate to initialize new instances of the service when needed.</param><returns>The registration object to perform further configuration via its fluent interface.</returns>
        </member>
        <member name="M:Funq.Container.Resolve``1">
            <summary>
			Resolves the given service by type, without passing any arguments for
			its construction.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``2(``1)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``3(``1,``2)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``4(``1,``2,``3)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``5(``1,``2,``3,``4)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``6(``1,``2,``3,``4,``5)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.Resolve``7(``1,``2,``3,``4,``5,``6)">
            <summary>
			Resolves the given service by type, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``1(System.String)">
            <summary>
			Resolves the given service by type and name, without passing arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``2(System.String,``1)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``3(System.String,``1,``2)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``4(System.String,``1,``2,``3)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``5(System.String,``1,``2,``3,``4)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``6(System.String,``1,``2,``3,``4,``5)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.ResolveNamed``7(System.String,``1,``2,``3,``4,``5,``6)">
            <summary>
			Resolves the given service by type and name, passing the given arguments
			for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>The resolved service instance.</returns><exception cref="T:Funq.ResolutionException">The given service could not be resolved.</exception>
        </member>
        <member name="M:Funq.Container.TryResolve``1">
            <summary>
			Attempts to resolve the given service by type, without passing arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>
			The resolved service instance or <see langword="null" /> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``2(``1)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null" /> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``3(``1,``2)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null" /> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``4(``1,``2,``3)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null" /> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``5(``1,``2,``3,``4)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null" /> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``6(``1,``2,``3,``4,``5)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null" /> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolve``7(``1,``2,``3,``4,``5,``6)">
            <summary>
			Attempts to resolve the given service by type, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null" /> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``1(System.String)">
            <summary>
			Attempts to resolve the given service by type and name, without passing
			arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><returns>
			The resolved service instance or <see langword="null" /> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``2(System.String,``1)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg">First argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null" /> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``3(System.String,``1,``2)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null" /> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``4(System.String,``1,``2,``3)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null" /> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``5(System.String,``1,``2,``3,``4)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null" /> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``6(System.String,``1,``2,``3,``4,``5)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null" /> if it cannot be resolved.
		</returns>
        </member>
        <member name="M:Funq.Container.TryResolveNamed``7(System.String,``1,``2,``3,``4,``5,``6)">
            <summary>
			Attempts to resolve the given service by type and name, passing the
			given arguments arguments for its initialization.
		</summary><typeparam name="TService">Type of the service to retrieve.</typeparam><typeparam name="TArg1">First argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg2">Second argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg3">Third argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg4">Fourth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg5">Fifth argument to pass to the factory delegate that may create the instace.</typeparam><typeparam name="TArg6">Sixth argument to pass to the factory delegate that may create the instace.</typeparam><returns>
			The resolved service instance or <see langword="null" /> if it cannot be resolved.
		</returns>
        </member>
        <member name="T:Funq.Func`6">
            <summary>
            Encapsulates a method that has five parameters and returns a value of the 
             type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
        </member>
        <member name="T:Funq.Func`7">
            <summary>
            Encapsulates a method that has six parameters and returns a value of the 
             type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
        </member>
        <member name="T:Funq.Func`8">
            <summary>
            Encapsulates a method that has seven parameters and returns a value of the 
             type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
        </member>
        <member name="T:Funq.IFluentInterface">
            <summary>
            Helper interface used to hide the base <see cref="T:System.Object"/> 
            members from the fluent API to make for much cleaner 
            Visual Studio intellisense experience.
            </summary>
        </member>
        <member name="M:Funq.IFluentInterface.GetType">
            <summary/>
        </member>
        <member name="M:Funq.IFluentInterface.GetHashCode">
            <summary/>
        </member>
        <member name="M:Funq.IFluentInterface.ToString">
            <summary/>
        </member>
        <member name="M:Funq.IFluentInterface.Equals(System.Object)">
            <summary/>
        </member>
        <member name="T:Funq.IFunqlet">
            <summary>
            Funqlets are a set of components provided as a package 
            to an existing container (like a module).
            </summary>
        </member>
        <member name="M:Funq.IFunqlet.Configure(Funq.Container)">
            <summary>
            Configure the given container with the 
            registrations provided by the funqlet.
            </summary>
            <param name="container">Container to register.</param>
        </member>
        <member name="T:Funq.IContainerModule">
            <summary>
            Interface used by plugins to contribute registrations 
            to an existing container.
            </summary>
        </member>
        <member name="T:Funq.Owner">
            <summary>
            Determines who is responsible for disposing instances 
            registered with a container.
            </summary>
        </member>
        <member name="F:Funq.Owner.Container">
            <summary>
            Container should dispose provided instances when it is disposed. This is the 
            default.
            </summary>
        </member>
        <member name="F:Funq.Owner.External">
            <summary>
            Container does not dispose provided instances.
            </summary>
        </member>
        <member name="F:Funq.Owner.Default">
            <summary>
            Default owner, which equals <see cref="F:Funq.Owner.Container"/>.
            </summary>
        </member>
        <member name="T:Funq.ResolutionException">
            <summary>
            Exception thrown by the container when a service cannot be resolved.
            </summary>
        </member>
        <member name="M:Funq.ResolutionException.#ctor(System.Type)">
            <summary>
            Initializes the exception with the service that could not be resolved.
            </summary>
        </member>
        <member name="M:Funq.ResolutionException.#ctor(System.Type,System.String)">
            <summary>
            Initializes the exception with the service (and its name) that could not be resolved.
            </summary>
        </member>
        <member name="M:Funq.ResolutionException.#ctor(System.String)">
            <summary>
            Initializes the exception with an arbitrary message.
            </summary>
        </member>
        <member name="T:Funq.ReuseScope">
            <summary>
            Determines visibility and reuse of instances provided by the container.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Hierarchy">
            <summary>
            Instances are reused within a container hierarchy. Instances 
            are created (if necessary) in the container where the registration
            was performed, and are reused by all descendent containers.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Container">
            <summary>
            Instances are reused only at the given container. Descendent 
            containers do not reuse parent container instances and get  
            a new instance at their level.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.None">
            <summary>
            Each request to resolve the dependency will result in a new 
            instance being returned.
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Request">
            <summary>
            Instaces are reused within the given request
            </summary>
        </member>
        <member name="F:Funq.ReuseScope.Default">
            <summary>
            Default scope, which equals <see cref="F:Funq.ReuseScope.Hierarchy"/>.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry.Owner">
            <summary>
            Ownership setting for the service.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry.Reuse">
            <summary>
            Reuse scope setting for the service.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry.Container">
            <summary>
            The container where the entry was registered.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry.OwnedBy(Funq.Owner)">
            <summary>
            Specifies the owner for instances, which determines how 
            they will be disposed.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry.ReusedWithin(Funq.ReuseScope)">
            <summary>
            Specifies the scope for instances, which determines 
            visibility of instances across containers and hierarchies.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry`2.Factory">
            <summary>
            The Func delegate that creates instances of the service.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry`2.instance">
            <summary>
            The cached service instance if the scope is <see cref="F:Funq.ReuseScope.Hierarchy"/> or 
            <see cref="F:Funq.ReuseScope.Container"/>.
            </summary>
        </member>
        <member name="F:Funq.ServiceEntry`2.Initializer">
            <summary>
            The Func delegate that initializes the object after creation.
            </summary>
        </member>
        <member name="M:Funq.ServiceEntry`2.CloneFor(Funq.Container)">
            <summary>
            Clones the service entry assigning the <see cref="T:Funq.Container"/> to the 
            <paramref name="newContainer"/>. Does not copy the <see cref="P:Funq.ServiceEntry`2.Instance"/>.
            </summary>
        </member>
        <member name="T:Funq.IRegistration">
            <summary>
            Fluent API for customizing the registration of a service.
            </summary>
        </member>
        <member name="T:Funq.IRegistration`1">
            <summary>
            Fluent API for customizing the registration of a service.
            </summary>
        </member>
        <member name="T:Funq.IInitializable`1">
            <summary>
            Fluent API that allows registering an initializer for the 
            service.
            </summary>
        </member>
        <member name="M:Funq.IInitializable`1.InitializedBy(System.Action{Funq.Container,`0})">
            <summary>
            Specifies an initializer that should be invoked after 
            the service instance has been created by the factory.
            </summary>
        </member>
        <member name="T:Funq.IReusedOwned">
            <summary>
            Fluent API that exposes both <see cref="M:Funq.IReused.ReusedWithin(Funq.ReuseScope)"/>
            and owner (<see cref="M:Funq.IOwned.OwnedBy(Funq.Owner)"/>).
            </summary>
        </member>
        <member name="T:Funq.IReused">
            <summary>
            Fluent API that allows specifying the reuse instances.
            </summary>
        </member>
        <member name="M:Funq.IReused.ReusedWithin(Funq.ReuseScope)">
            <summary>
            Specifies how instances are reused within a container or hierarchy. Default 
            scope is <see cref="F:Funq.ReuseScope.Hierarchy"/>.
            </summary>
        </member>
        <member name="T:Funq.IOwned">
            <summary>
            Fluent API that allows specifying the owner of instances 
            created from a registration.
            </summary>
        </member>
        <member name="M:Funq.IOwned.OwnedBy(Funq.Owner)">
            <summary>
            Specifies the owner of instances created from this registration. Default 
            owner is <see cref="F:Funq.Owner.Container"/>.
            </summary>
        </member>
    </members>
</doc>
