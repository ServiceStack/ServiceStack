""" Options:
Date: 2025-10-09 23:00:30
Version: 8.81
Tip: To override a DTO option, remove "#" prefix before updating
BaseUrl: http://localhost:5166

#GlobalNamespace: 
#AddServiceStackTypes: True
#AddResponseStatus: False
#AddImplicitVersion: 
#AddDescriptionAsComments: True
#IncludeTypes: 
#ExcludeTypes: 
#DefaultImports: datetime,decimal,marshmallow.fields:*,servicestack:*,typing:*,dataclasses:dataclass/field,dataclasses_json:dataclass_json/LetterCase/Undefined/config,enum:Enum/IntEnum
#DataClass: 
#DataClassJson: 
"""

import datetime
import decimal
from marshmallow.fields import *
from servicestack import *
from typing import *
from dataclasses import dataclass, field
from dataclasses_json import dataclass_json, LetterCase, Undefined, config
from enum import Enum, IntEnum
Object = TypeVar('Object')


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AiContent:
    # @ApiMember(Description="The type of the content part.")
    type: Optional[str] = None
    """
    The type of the content part.
    """


# @Api(Description="The tool calls generated by the model, such as function calls.")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ToolCall:
    """
    The tool calls generated by the model, such as function calls.
    """

    # @ApiMember(Description="The ID of the tool call.")
    id: Optional[str] = None
    """
    The ID of the tool call.
    """


    # @ApiMember(Description="The type of the tool. Currently, only `function` is supported.")
    type: Optional[str] = None
    """
    The type of the tool. Currently, only `function` is supported.
    """


    # @ApiMember(Description="The function that the model called.")
    function: Optional[str] = None
    """
    The function that the model called.
    """


# @Api(Description="A list of messages comprising the conversation so far.")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AiMessage:
    """
    A list of messages comprising the conversation so far.
    """

    # @ApiMember(Description="The contents of the message.")
    content: Optional[List[AiContent]] = None
    """
    The contents of the message.
    """


    # @ApiMember(Description="The role of the author of this message. Valid values are `system`, `user`, `assistant` and `tool`.")
    role: Optional[str] = None
    """
    The role of the author of this message. Valid values are `system`, `user`, `assistant` and `tool`.
    """


    # @ApiMember(Description="An optional name for the participant. Provides the model information to differentiate between participants of the same role.")
    name: Optional[str] = None
    """
    An optional name for the participant. Provides the model information to differentiate between participants of the same role.
    """


    # @ApiMember(Description="The tool calls generated by the model, such as function calls.")
    tool_calls: Optional[List[ToolCall]] = None
    """
    The tool calls generated by the model, such as function calls.
    """


    # @ApiMember(Description="Tool call that this message is responding to.")
    tool_call_id: Optional[str] = None
    """
    Tool call that this message is responding to.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AiChatAudio:
    """
    Parameters for audio output. Required when audio output is requested with modalities: [audio]
    """

    # @ApiMember(Description="Specifies the output audio format. Must be one of wav, mp3, flac, opus, or pcm16.")
    format: Optional[str] = None
    """
    Specifies the output audio format. Must be one of wav, mp3, flac, opus, or pcm16.
    """


    # @ApiMember(Description="The voice the model uses to respond. Supported voices are alloy, ash, ballad, coral, echo, fable, nova, onyx, sage, and shimmer.")
    voice: Optional[str] = None
    """
    The voice the model uses to respond. Supported voices are alloy, ash, ballad, coral, echo, fable, nova, onyx, sage, and shimmer.
    """


class ResponseFormat(str, Enum):
    TEXT = 'text'
    JSON_OBJECT = 'json_object'


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AiResponseFormat:
    # @ApiMember(Description="An object specifying the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106.")
    type: Optional[ResponseFormat] = None
    """
    An object specifying the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106.
    """


class ToolType(str, Enum):
    FUNCTION = 'function'


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class Tool:
    # @ApiMember(Description="The type of the tool. Currently, only function is supported.")
    type: Optional[ToolType] = None
    """
    The type of the tool. Currently, only function is supported.
    """


class RoomType(str, Enum):
    SINGLE = 'Single'
    DOUBLE = 'Double'
    QUEEN = 'Queen'
    TWIN = 'Twin'
    SUITE = 'Suite'


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class Coupon:
    """
    Discount Coupons
    """

    id: Optional[str] = None
    description: Optional[str] = None
    discount: int = 0
    expiry_date: datetime.datetime = datetime.datetime(1, 1, 1)


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class User:
    id: Optional[str] = None
    user_name: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    display_name: Optional[str] = None
    profile_url: Optional[str] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class Booking(AuditBase):
    """
    Booking Details
    """

    id: int = 0
    name: Optional[str] = None
    room_type: Optional[RoomType] = None
    room_number: int = 0
    booking_start_date: datetime.datetime = datetime.datetime(1, 1, 1)
    booking_end_date: Optional[datetime.datetime] = None
    cost: Decimal = decimal.Decimal(0)
    # @References(typeof(Coupon))
    coupon_id: Optional[str] = None

    discount: Optional[Coupon] = None
    notes: Optional[str] = None
    cancelled: Optional[bool] = None
    employee: Optional[User] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class PageStats:
    label: Optional[str] = None
    total: int = 0


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class UrlCitation:
    """
    Annotations for the message, when applicable, as when using the web search tool.
    """

    # @ApiMember(Description="The index of the last character of the URL citation in the message.")
    end_index: int = 0
    """
    The index of the last character of the URL citation in the message.
    """


    # @ApiMember(Description="The index of the first character of the URL citation in the message.")
    start_index: int = 0
    """
    The index of the first character of the URL citation in the message.
    """


    # @ApiMember(Description="The title of the web resource.")
    title: Optional[str] = None
    """
    The title of the web resource.
    """


    # @ApiMember(Description="The URL of the web resource.")
    url: Optional[str] = None
    """
    The URL of the web resource.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ChoiceAnnotation:
    """
    Annotations for the message, when applicable, as when using the web search tool.
    """

    # @ApiMember(Description="The type of the URL citation. Always url_citation.")
    type: Optional[str] = None
    """
    The type of the URL citation. Always url_citation.
    """


    # @ApiMember(Description="A URL citation when using web search.")
    url_citation: Optional[UrlCitation] = None
    """
    A URL citation when using web search.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ChoiceAudio:
    """
    If the audio output modality is requested, this object contains data about the audio response from the model.
    """

    # @ApiMember(Description="Base64 encoded audio bytes generated by the model, in the format specified in the request.")
    data: Optional[str] = None
    """
    Base64 encoded audio bytes generated by the model, in the format specified in the request.
    """


    # @ApiMember(Description="The Unix timestamp (in seconds) for when this audio response will no longer be accessible on the server for use in multi-turn conversations.")
    expires_at: int = 0
    """
    The Unix timestamp (in seconds) for when this audio response will no longer be accessible on the server for use in multi-turn conversations.
    """


    # @ApiMember(Description="Unique identifier for this audio response.")
    id: Optional[str] = None
    """
    Unique identifier for this audio response.
    """


    # @ApiMember(Description="Transcript of the audio generated by the model.")
    transcript: Optional[str] = None
    """
    Transcript of the audio generated by the model.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ChoiceMessage:
    # @ApiMember(Description="The contents of the message.")
    content: Optional[str] = None
    """
    The contents of the message.
    """


    # @ApiMember(Description="The refusal message generated by the model.")
    refusal: Optional[str] = None
    """
    The refusal message generated by the model.
    """


    # @ApiMember(Description="The reasoning process used by the model.")
    reasoning: Optional[str] = None
    """
    The reasoning process used by the model.
    """


    # @ApiMember(Description="The role of the author of this message.")
    role: Optional[str] = None
    """
    The role of the author of this message.
    """


    # @ApiMember(Description="Annotations for the message, when applicable, as when using the web search tool.")
    annotations: Optional[List[ChoiceAnnotation]] = None
    """
    Annotations for the message, when applicable, as when using the web search tool.
    """


    # @ApiMember(Description="If the audio output modality is requested, this object contains data about the audio response from the model.")
    audio: Optional[ChoiceAudio] = None
    """
    If the audio output modality is requested, this object contains data about the audio response from the model.
    """


    # @ApiMember(Description="The tool calls generated by the model, such as function calls.")
    tool_calls: Optional[List[ToolCall]] = None
    """
    The tool calls generated by the model, such as function calls.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class Choice:
    # @ApiMember(Description="The reason the model stopped generating tokens. This will be stop if the model hit a natural stop point or a provided stop sequence, length if the maximum number of tokens specified in the request was reached, content_filter if content was omitted due to a flag from our content filters, tool_calls if the model called a tool")
    finish_reason: Optional[str] = None
    """
    The reason the model stopped generating tokens. This will be stop if the model hit a natural stop point or a provided stop sequence, length if the maximum number of tokens specified in the request was reached, content_filter if content was omitted due to a flag from our content filters, tool_calls if the model called a tool
    """


    # @ApiMember(Description="The index of the choice in the list of choices.")
    index: int = 0
    """
    The index of the choice in the list of choices.
    """


    # @ApiMember(Description="A chat completion message generated by the model.")
    message: Optional[ChoiceMessage] = None
    """
    A chat completion message generated by the model.
    """


# @Api(Description="Usage statistics for the completion request.")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AiCompletionUsage:
    """
    Usage statistics for the completion request.
    """

    # @ApiMember(Description="When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion.\n\n")
    accepted_prediction_tokens: int = 0
    """
    When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion.
    """


    # @ApiMember(Description="Audio input tokens generated by the model.")
    audio_tokens: int = 0
    """
    Audio input tokens generated by the model.
    """


    # @ApiMember(Description="Tokens generated by the model for reasoning.")
    reasoning_tokens: int = 0
    """
    Tokens generated by the model for reasoning.
    """


    # @ApiMember(Description="When using Predicted Outputs, the number of tokens in the prediction that did not appear in the completion.")
    rejected_prediction_tokens: int = 0
    """
    When using Predicted Outputs, the number of tokens in the prediction that did not appear in the completion.
    """


# @Api(Description="Breakdown of tokens used in the prompt.")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AiPromptUsage:
    """
    Breakdown of tokens used in the prompt.
    """

    # @ApiMember(Description="When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion.\n\n")
    accepted_prediction_tokens: int = 0
    """
    When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion.
    """


    # @ApiMember(Description="Audio input tokens present in the prompt.")
    audio_tokens: int = 0
    """
    Audio input tokens present in the prompt.
    """


    # @ApiMember(Description="Cached tokens present in the prompt.")
    cached_tokens: int = 0
    """
    Cached tokens present in the prompt.
    """


# @Api(Description="Usage statistics for the completion request.")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AiUsage:
    """
    Usage statistics for the completion request.
    """

    # @ApiMember(Description="Number of tokens in the generated completion.")
    completion_tokens: int = 0
    """
    Number of tokens in the generated completion.
    """


    # @ApiMember(Description="Number of tokens in the prompt.")
    prompt_tokens: int = 0
    """
    Number of tokens in the prompt.
    """


    # @ApiMember(Description="Total number of tokens used in the request (prompt + completion).")
    total_tokens: int = 0
    """
    Total number of tokens used in the request (prompt + completion).
    """


    # @ApiMember(Description="Breakdown of tokens used in a completion.")
    completion_tokens_details: Optional[AiCompletionUsage] = None
    """
    Breakdown of tokens used in a completion.
    """


    # @ApiMember(Description="Breakdown of tokens used in the prompt.")
    prompt_tokens_details: Optional[AiPromptUsage] = None
    """
    Breakdown of tokens used in the prompt.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AnalyticsLogInfo:
    id: int = 0
    date_time: datetime.datetime = datetime.datetime(1, 1, 1)
    browser: Optional[str] = None
    device: Optional[str] = None
    bot: Optional[str] = None
    op: Optional[str] = None
    user_id: Optional[str] = None
    user_name: Optional[str] = None
    api_key: Optional[str] = None
    ip: Optional[str] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class RequestSummary:
    name: Optional[str] = None
    total_requests: int = 0
    total_request_length: int = 0
    min_request_length: int = 0
    max_request_length: int = 0
    total_duration: float = 0.0
    min_duration: float = 0.0
    max_duration: float = 0.0
    status: Optional[Dict[int, int]] = None
    durations: Optional[Dict[str, int]] = None
    apis: Optional[Dict[str, int]] = None
    users: Optional[Dict[str, int]] = None
    ips: Optional[Dict[str, int]] = None
    api_keys: Optional[Dict[str, int]] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AnalyticsReports:
    id: int = 0
    created: datetime.datetime = datetime.datetime(1, 1, 1)
    version: Decimal = decimal.Decimal(0)
    apis: Optional[Dict[str, RequestSummary]] = None
    users: Optional[Dict[str, RequestSummary]] = None
    tags: Optional[Dict[str, RequestSummary]] = None
    status: Optional[Dict[str, RequestSummary]] = None
    days: Optional[Dict[str, RequestSummary]] = None
    api_keys: Optional[Dict[str, RequestSummary]] = None
    ips: Optional[Dict[str, RequestSummary]] = None
    browsers: Optional[Dict[str, RequestSummary]] = None
    devices: Optional[Dict[str, RequestSummary]] = None
    bots: Optional[Dict[str, RequestSummary]] = None
    durations: Optional[Dict[str, int]] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AiTextContent(AiContent):
    """
    Text content part
    """

    # @ApiMember(Description="The text content.")
    text: Optional[str] = None
    """
    The text content.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AiImageUrl:
    # @ApiMember(Description="Either a URL of the image or the base64 encoded image data.")
    url: Optional[str] = None
    """
    Either a URL of the image or the base64 encoded image data.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AiImageContent(AiContent):
    """
    Image content part
    """

    # @ApiMember(Description="The image for this content.")
    image_url: Optional[AiImageUrl] = None
    """
    The image for this content.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AiInputAudio:
    """
    Audio content part
    """

    # @ApiMember(Description="URL or Base64 encoded audio data.")
    data: Optional[str] = None
    """
    URL or Base64 encoded audio data.
    """


    # @ApiMember(Description="The format of the encoded audio data. Currently supports 'wav' and 'mp3'.")
    format: Optional[str] = None
    """
    The format of the encoded audio data. Currently supports 'wav' and 'mp3'.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AiAudioContent(AiContent):
    """
    Audio content part
    """

    # @ApiMember(Description="The audio input for this content.")
    input_audio: Optional[AiInputAudio] = None
    """
    The audio input for this content.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AiFile:
    """
    File content part
    """

    # @ApiMember(Description="The URL or base64 encoded file data, used when passing the file to the model as a string.")
    file_data: Optional[str] = None
    """
    The URL or base64 encoded file data, used when passing the file to the model as a string.
    """


    # @ApiMember(Description="The name of the file, used when passing the file to the model as a string.")
    filename: Optional[str] = None
    """
    The name of the file, used when passing the file to the model as a string.
    """


    # @ApiMember(Description="The ID of an uploaded file to use as input.")
    file_id: Optional[str] = None
    """
    The ID of an uploaded file to use as input.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AiFileContent(AiContent):
    """
    File content part
    """

    # @ApiMember(Description="The file input for this content.")
    file: Optional[AiFile] = None
    """
    The file input for this content.
    """


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class HelloResponse:
    result: Optional[str] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AdminDataResponse:
    page_stats: List[PageStats] = field(default_factory=list)


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ChatResponse:
    # @ApiMember(Description="A unique identifier for the chat completion.")
    id: Optional[str] = None
    """
    A unique identifier for the chat completion.
    """


    # @ApiMember(Description="A list of chat completion choices. Can be more than one if n is greater than 1.")
    choices: List[Choice] = field(default_factory=list)
    """
    A list of chat completion choices. Can be more than one if n is greater than 1.
    """


    # @ApiMember(Description="The Unix timestamp (in seconds) of when the chat completion was created.")
    created: int = 0
    """
    The Unix timestamp (in seconds) of when the chat completion was created.
    """


    # @ApiMember(Description="The model used for the chat completion.")
    model: Optional[str] = None
    """
    The model used for the chat completion.
    """


    # @ApiMember(Description="This fingerprint represents the backend configuration that the model runs with.")
    system_fingerprint: Optional[str] = None
    """
    This fingerprint represents the backend configuration that the model runs with.
    """


    # @ApiMember(Description="The object type, which is always chat.completion.")
    object: Optional[str] = None
    """
    The object type, which is always chat.completion.
    """


    # @ApiMember(Description="Specifies the processing type used for serving the request.")
    service_tier: Optional[str] = None
    """
    Specifies the processing type used for serving the request.
    """


    # @ApiMember(Description="Usage statistics for the completion request.")
    usage: Optional[AiUsage] = None
    """
    Usage statistics for the completion request.
    """


    # @ApiMember(Description="Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format.")
    metadata: Optional[Dict[str, str]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format.
    """


    response_status: Optional[ResponseStatus] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class GetAnalyticsInfoResponse:
    months: Optional[List[str]] = None
    result: Optional[AnalyticsLogInfo] = None
    response_status: Optional[ResponseStatus] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class GetAnalyticsReportsResponse:
    result: Optional[AnalyticsReports] = None
    response_status: Optional[ResponseStatus] = None


# @Route("/hello/{Name}")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class Hello(IReturn[HelloResponse], IGet):
    name: Optional[str] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class AdminData(IReturn[AdminDataResponse], IGet):
    pass


# @Route("/v1/chat/completions", "POST")
# @Api(Description="Chat Completions API (OpenAI-Compatible)")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class ChatCompletion(IReturn[ChatResponse], IPost):
    """
    Chat Completions API (OpenAI-Compatible)
    """

    # @ApiMember(Description="The messages to generate chat completions for.")
    messages: List[AiMessage] = field(default_factory=list)
    """
    The messages to generate chat completions for.
    """


    # @ApiMember(Description="ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API")
    model: Optional[str] = None
    """
    ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API
    """


    # @ApiMember(Description="Parameters for audio output. Required when audio output is requested with modalities: [audio]")
    audio: Optional[AiChatAudio] = None
    """
    Parameters for audio output. Required when audio output is requested with modalities: [audio]
    """


    # @ApiMember(Description="Modify the likelihood of specified tokens appearing in the completion.")
    logit_bias: Optional[Dict[int, int]] = None
    """
    Modify the likelihood of specified tokens appearing in the completion.
    """


    # @ApiMember(Description="Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format.")
    metadata: Optional[Dict[str, str]] = None
    """
    Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format.
    """


    # @ApiMember(Description="Constrains effort on reasoning for reasoning models. Currently supported values are minimal, low, medium, and high (none, default). Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.")
    reasoning_effort: Optional[str] = None
    """
    Constrains effort on reasoning for reasoning models. Currently supported values are minimal, low, medium, and high (none, default). Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.
    """


    # @ApiMember(Description="An object specifying the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`. Setting Type to ResponseFormat.JsonObject enables JSON mode, which guarantees the message the model generates is valid JSON.")
    response_format: Optional[AiResponseFormat] = None
    """
    An object specifying the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`. Setting Type to ResponseFormat.JsonObject enables JSON mode, which guarantees the message the model generates is valid JSON.
    """


    # @ApiMember(Description="Specifies the processing type used for serving the request.")
    service_tier: Optional[str] = None
    """
    Specifies the processing type used for serving the request.
    """


    # @ApiMember(Description="Up to 4 sequences where the API will stop generating further tokens.")
    stop: Optional[List[str]] = None
    """
    Up to 4 sequences where the API will stop generating further tokens.
    """


    # @ApiMember(Description="Output types that you would like the model to generate. Most models are capable of generating text, which is the default:")
    modalities: Optional[List[str]] = None
    """
    Output types that you would like the model to generate. Most models are capable of generating text, which is the default:
    """


    # @ApiMember(Description="Used by OpenAI to cache responses for similar requests to optimize your cache hit rates.")
    prompt_cache_key: Optional[str] = None
    """
    Used by OpenAI to cache responses for similar requests to optimize your cache hit rates.
    """


    # @ApiMember(Description="A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies. The IDs should be a string that uniquely identifies each user.")
    safety_identifier: Optional[str] = None
    """
    A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies. The IDs should be a string that uniquely identifies each user.
    """


    # @ApiMember(Description="A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.")
    tools: Optional[List[Tool]] = None
    """
    A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
    """


    # @ApiMember(Description="Constrains the verbosity of the model's response. Lower values will result in more concise responses, while higher values will result in more verbose responses. Currently supported values are low, medium, and high.")
    verbosity: Optional[str] = None
    """
    Constrains the verbosity of the model's response. Lower values will result in more concise responses, while higher values will result in more verbose responses. Currently supported values are low, medium, and high.
    """


    # @ApiMember(Description="What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.")
    temperature: Optional[float] = None
    """
    What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    """


    # @ApiMember(Description="An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens.")
    max_completion_tokens: Optional[int] = None
    """
    An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens.
    """


    # @ApiMember(Description="An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.")
    top_logprobs: Optional[int] = None
    """
    An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
    """


    # @ApiMember(Description="An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.")
    top_p: Optional[float] = None
    """
    An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    """


    # @ApiMember(Description="Number between `-2.0` and `2.0`. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.")
    frequency_penalty: Optional[float] = None
    """
    Number between `-2.0` and `2.0`. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    """


    # @ApiMember(Description="Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.")
    presence_penalty: Optional[float] = None
    """
    Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    """


    # @ApiMember(Description="This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.")
    seed: Optional[int] = None
    """
    This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.
    """


    # @ApiMember(Description="How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.")
    n: Optional[int] = None
    """
    How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
    """


    # @ApiMember(Description="Whether or not to store the output of this chat completion request for use in our model distillation or evals products.")
    store: Optional[bool] = None
    """
    Whether or not to store the output of this chat completion request for use in our model distillation or evals products.
    """


    # @ApiMember(Description="Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.")
    logprobs: Optional[bool] = None
    """
    Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.
    """


    # @ApiMember(Description="Whether to enable parallel function calling during tool use.")
    parallel_tool_calls: Optional[bool] = None
    """
    Whether to enable parallel function calling during tool use.
    """


    # @ApiMember(Description="Whether to enable thinking mode for some Qwen models and providers.")
    enable_thinking: Optional[bool] = None
    """
    Whether to enable thinking mode for some Qwen models and providers.
    """


    # @ApiMember(Description="If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.")
    stream: Optional[bool] = None
    """
    If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.
    """


# @Route("/bookings", "GET")
# @Route("/bookings/{Id}", "GET")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class QueryBookings(QueryDb[Booking], IReturn[QueryResponse[Booking]]):
    """
    Find Bookings
    """

    id: Optional[int] = None


# @Route("/coupons", "GET")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class QueryCoupons(QueryDb[Coupon], IReturn[QueryResponse[Coupon]]):
    """
    Find Coupons
    """

    id: Optional[str] = None


# @ValidateRequest(Validator="IsAdmin")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class QueryUsers(QueryDb[User], IReturn[QueryResponse[User]]):
    id: Optional[str] = None


# @Route("/bookings", "POST")
# @ValidateRequest(Validator="HasRole(`Employee`)")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class CreateBooking(IReturn[IdResponse], ICreateDb[Booking]):
    """
    Create a new Booking
    """

    # @Validate(Validator="NotEmpty")
    name: Optional[str] = None
    """
    Name this Booking is for
    """


    room_type: Optional[RoomType] = None
    # @Validate(Validator="GreaterThan(0)")
    room_number: int = 0

    # @Validate(Validator="GreaterThan(0)")
    cost: Decimal = decimal.Decimal(0)

    # @Required()
    booking_start_date: datetime.datetime = datetime.datetime(1, 1, 1)

    booking_end_date: Optional[datetime.datetime] = None
    notes: Optional[str] = None
    coupon_id: Optional[str] = None


# @Route("/booking/{Id}", "PATCH")
# @ValidateRequest(Validator="HasRole(`Employee`)")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class UpdateBooking(IReturn[IdResponse], IPatchDb[Booking]):
    """
    Update an existing Booking
    """

    id: int = 0
    name: Optional[str] = None
    room_type: Optional[RoomType] = None
    # @Validate(Validator="GreaterThan(0)")
    room_number: Optional[int] = None

    # @Validate(Validator="GreaterThan(0)")
    cost: Optional[Decimal] = None

    booking_start_date: Optional[datetime.datetime] = None
    booking_end_date: Optional[datetime.datetime] = None
    notes: Optional[str] = None
    coupon_id: Optional[str] = None
    cancelled: Optional[bool] = None


# @Route("/booking/{Id}", "DELETE")
# @ValidateRequest(Validator="HasRole(`Manager`)")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class DeleteBooking(IReturnVoid, IDeleteDb[Booking]):
    """
    Delete a Booking
    """

    id: int = 0


# @Route("/coupons", "POST")
# @ValidateRequest(Validator="HasRole(`Employee`)")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class CreateCoupon(IReturn[IdResponse], ICreateDb[Coupon]):
    # @Validate(Validator="NotEmpty")
    id: Optional[str] = None

    # @Validate(Validator="NotEmpty")
    description: Optional[str] = None

    # @Validate(Validator="GreaterThan(0)")
    discount: int = 0

    # @Validate(Validator="NotNull")
    expiry_date: datetime.datetime = datetime.datetime(1, 1, 1)


# @Route("/coupons/{Id}", "PATCH")
# @ValidateRequest(Validator="HasRole(`Employee`)")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class UpdateCoupon(IReturn[IdResponse], IPatchDb[Coupon]):
    id: Optional[str] = None
    # @Validate(Validator="NotEmpty")
    description: Optional[str] = None

    # @Validate(Validator="NotNull")
    # @Validate(Validator="GreaterThan(0)")
    discount: Optional[int] = None

    # @Validate(Validator="NotNull")
    expiry_date: Optional[datetime.datetime] = None


# @Route("/coupons/{Id}", "DELETE")
# @ValidateRequest(Validator="HasRole(`Manager`)")
@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class DeleteCoupon(IReturnVoid, IDeleteDb[Coupon]):
    """
    Delete a Coupon
    """

    id: Optional[str] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class GetAnalyticsInfo(IReturn[GetAnalyticsInfoResponse], IGet):
    month: Optional[datetime.datetime] = None
    type: Optional[str] = None
    op: Optional[str] = None
    api_key: Optional[str] = None
    user_id: Optional[str] = None
    ip: Optional[str] = None


@dataclass_json(letter_case=LetterCase.CAMEL, undefined=Undefined.EXCLUDE)
@dataclass
class GetAnalyticsReports(IReturn[GetAnalyticsReportsResponse], IGet):
    month: Optional[datetime.datetime] = None
    filter: Optional[str] = None
    value: Optional[str] = None
    force: Optional[bool] = None

