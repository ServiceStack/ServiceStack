/* Options:
Date: 2025-10-09 22:57:45
Version: 8.81
Tip: To override a DTO option, remove "//" prefix before updating
BaseUrl: http://localhost:5166

//GlobalNamespace: 
//MakePropertiesOptional: False
//AddServiceStackTypes: True
//AddResponseStatus: False
//AddImplicitVersion: 
//AddDescriptionAsComments: True
//IncludeTypes: 
//ExcludeTypes: 
//DefaultImports: 
*/


export interface IReturn<T>
{
    createResponse(): T;
}

export interface IReturnVoid
{
    createResponse(): void;
}

export interface IHasSessionId
{
    sessionId?: string;
}

export interface IHasBearerToken
{
    bearerToken?: string;
}

export interface IGet
{
}

export interface IPost
{
}

export interface ICreateDb<Table>
{
}

export interface IPatchDb<Table>
{
}

export interface IDeleteDb<Table>
{
}

// @DataContract
export class AiContent
{
    /** @description The type of the content part. */
    // @DataMember(Name="type")
    // @ApiMember(Description="The type of the content part.")
    public type: string;

    public constructor(init?: Partial<AiContent>) { (Object as any).assign(this, init); }
}

/** @description The tool calls generated by the model, such as function calls. */
// @Api(Description="The tool calls generated by the model, such as function calls.")
// @DataContract
export class ToolCall
{
    /** @description The ID of the tool call. */
    // @DataMember(Name="id")
    // @ApiMember(Description="The ID of the tool call.")
    public id: string;

    /** @description The type of the tool. Currently, only `function` is supported. */
    // @DataMember(Name="type")
    // @ApiMember(Description="The type of the tool. Currently, only `function` is supported.")
    public type: string;

    /** @description The function that the model called. */
    // @DataMember(Name="function")
    // @ApiMember(Description="The function that the model called.")
    public function: string;

    public constructor(init?: Partial<ToolCall>) { (Object as any).assign(this, init); }
}

/** @description A list of messages comprising the conversation so far. */
// @Api(Description="A list of messages comprising the conversation so far.")
// @DataContract
export class AiMessage
{
    /** @description The contents of the message. */
    // @DataMember(Name="content")
    // @ApiMember(Description="The contents of the message.")
    public content?: AiContent[];

    /** @description The role of the author of this message. Valid values are `system`, `user`, `assistant` and `tool`. */
    // @DataMember(Name="role")
    // @ApiMember(Description="The role of the author of this message. Valid values are `system`, `user`, `assistant` and `tool`.")
    public role: string;

    /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
    // @DataMember(Name="name")
    // @ApiMember(Description="An optional name for the participant. Provides the model information to differentiate between participants of the same role.")
    public name?: string;

    /** @description The tool calls generated by the model, such as function calls. */
    // @DataMember(Name="tool_calls")
    // @ApiMember(Description="The tool calls generated by the model, such as function calls.")
    public tool_calls?: ToolCall[];

    /** @description Tool call that this message is responding to. */
    // @DataMember(Name="tool_call_id")
    // @ApiMember(Description="Tool call that this message is responding to.")
    public tool_call_id?: string;

    public constructor(init?: Partial<AiMessage>) { (Object as any).assign(this, init); }
}

/** @description Parameters for audio output. Required when audio output is requested with modalities: [audio] */
// @DataContract
export class AiChatAudio
{
    /** @description Specifies the output audio format. Must be one of wav, mp3, flac, opus, or pcm16. */
    // @DataMember(Name="format")
    // @ApiMember(Description="Specifies the output audio format. Must be one of wav, mp3, flac, opus, or pcm16.")
    public format: string;

    /** @description The voice the model uses to respond. Supported voices are alloy, ash, ballad, coral, echo, fable, nova, onyx, sage, and shimmer. */
    // @DataMember(Name="voice")
    // @ApiMember(Description="The voice the model uses to respond. Supported voices are alloy, ash, ballad, coral, echo, fable, nova, onyx, sage, and shimmer.")
    public voice: string;

    public constructor(init?: Partial<AiChatAudio>) { (Object as any).assign(this, init); }
}

export enum ResponseFormat
{
    Text = 'text',
    JsonObject = 'json_object',
}

// @DataContract
export class AiResponseFormat
{
    /** @description An object specifying the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106. */
    // @DataMember(Name="response_format")
    // @ApiMember(Description="An object specifying the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than gpt-3.5-turbo-1106.")
    public response_format: ResponseFormat;

    public constructor(init?: Partial<AiResponseFormat>) { (Object as any).assign(this, init); }
}

export enum ToolType
{
    Function = 'function',
}

// @DataContract
export class Tool
{
    /** @description The type of the tool. Currently, only function is supported. */
    // @DataMember(Name="type")
    // @ApiMember(Description="The type of the tool. Currently, only function is supported.")
    public type: ToolType;

    public constructor(init?: Partial<Tool>) { (Object as any).assign(this, init); }
}

// @DataContract
export class QueryBase
{
    // @DataMember(Order=1)
    public skip?: number;

    // @DataMember(Order=2)
    public take?: number;

    // @DataMember(Order=3)
    public orderBy?: string;

    // @DataMember(Order=4)
    public orderByDesc?: string;

    // @DataMember(Order=5)
    public include?: string;

    // @DataMember(Order=6)
    public fields?: string;

    // @DataMember(Order=7)
    public meta?: { [index:string]: string; };

    public constructor(init?: Partial<QueryBase>) { (Object as any).assign(this, init); }
}

export class QueryDb<T> extends QueryBase
{

    public constructor(init?: Partial<QueryDb<T>>) { super(init); (Object as any).assign(this, init); }
}

// @DataContract
export class AuditBase
{
    // @DataMember(Order=1)
    public createdDate: string;

    // @DataMember(Order=2)
    // @Required()
    public createdBy: string;

    // @DataMember(Order=3)
    public modifiedDate: string;

    // @DataMember(Order=4)
    // @Required()
    public modifiedBy: string;

    // @DataMember(Order=5)
    public deletedDate?: string;

    // @DataMember(Order=6)
    public deletedBy?: string;

    public constructor(init?: Partial<AuditBase>) { (Object as any).assign(this, init); }
}

export enum RoomType
{
    Single = 'Single',
    Double = 'Double',
    Queen = 'Queen',
    Twin = 'Twin',
    Suite = 'Suite',
}

/** @description Discount Coupons */
export class Coupon
{
    public id: string;
    public description: string;
    public discount: number;
    public expiryDate: string;

    public constructor(init?: Partial<Coupon>) { (Object as any).assign(this, init); }
}

export class User
{
    public id: string;
    public userName: string;
    public firstName?: string;
    public lastName?: string;
    public displayName?: string;
    public profileUrl?: string;

    public constructor(init?: Partial<User>) { (Object as any).assign(this, init); }
}

/** @description Booking Details */
export class Booking extends AuditBase
{
    public id: number;
    public name: string;
    public roomType: RoomType;
    public roomNumber: number;
    public bookingStartDate: string;
    public bookingEndDate?: string;
    public cost: number;
    // @References("typeof(MyApp.ServiceModel.Coupon)")
    public couponId?: string;

    public discount: Coupon;
    public notes?: string;
    public cancelled?: boolean;
    public employee: User;

    public constructor(init?: Partial<Booking>) { super(init); (Object as any).assign(this, init); }
}

export class PageStats
{
    public label: string;
    public total: number;

    public constructor(init?: Partial<PageStats>) { (Object as any).assign(this, init); }
}

/** @description Annotations for the message, when applicable, as when using the web search tool. */
// @DataContract
export class UrlCitation
{
    /** @description The index of the last character of the URL citation in the message. */
    // @DataMember(Name="end_index")
    // @ApiMember(Description="The index of the last character of the URL citation in the message.")
    public end_index: number;

    /** @description The index of the first character of the URL citation in the message. */
    // @DataMember(Name="start_index")
    // @ApiMember(Description="The index of the first character of the URL citation in the message.")
    public start_index: number;

    /** @description The title of the web resource. */
    // @DataMember(Name="title")
    // @ApiMember(Description="The title of the web resource.")
    public title: string;

    /** @description The URL of the web resource. */
    // @DataMember(Name="url")
    // @ApiMember(Description="The URL of the web resource.")
    public url: string;

    public constructor(init?: Partial<UrlCitation>) { (Object as any).assign(this, init); }
}

/** @description Annotations for the message, when applicable, as when using the web search tool. */
// @DataContract
export class ChoiceAnnotation
{
    /** @description The type of the URL citation. Always url_citation. */
    // @DataMember(Name="type")
    // @ApiMember(Description="The type of the URL citation. Always url_citation.")
    public type: string;

    /** @description A URL citation when using web search. */
    // @DataMember(Name="url_citation")
    // @ApiMember(Description="A URL citation when using web search.")
    public url_citation: UrlCitation;

    public constructor(init?: Partial<ChoiceAnnotation>) { (Object as any).assign(this, init); }
}

/** @description If the audio output modality is requested, this object contains data about the audio response from the model. */
// @DataContract
export class ChoiceAudio
{
    /** @description Base64 encoded audio bytes generated by the model, in the format specified in the request. */
    // @DataMember(Name="data")
    // @ApiMember(Description="Base64 encoded audio bytes generated by the model, in the format specified in the request.")
    public data: string;

    /** @description The Unix timestamp (in seconds) for when this audio response will no longer be accessible on the server for use in multi-turn conversations. */
    // @DataMember(Name="expires_at")
    // @ApiMember(Description="The Unix timestamp (in seconds) for when this audio response will no longer be accessible on the server for use in multi-turn conversations.")
    public expires_at: number;

    /** @description Unique identifier for this audio response. */
    // @DataMember(Name="id")
    // @ApiMember(Description="Unique identifier for this audio response.")
    public id: string;

    /** @description Transcript of the audio generated by the model. */
    // @DataMember(Name="transcript")
    // @ApiMember(Description="Transcript of the audio generated by the model.")
    public transcript: string;

    public constructor(init?: Partial<ChoiceAudio>) { (Object as any).assign(this, init); }
}

// @DataContract
export class ChoiceMessage
{
    /** @description The contents of the message. */
    // @DataMember(Name="content")
    // @ApiMember(Description="The contents of the message.")
    public content: string;

    /** @description The refusal message generated by the model. */
    // @DataMember(Name="refusal")
    // @ApiMember(Description="The refusal message generated by the model.")
    public refusal?: string;

    /** @description The reasoning process used by the model. */
    // @DataMember(Name="reasoning")
    // @ApiMember(Description="The reasoning process used by the model.")
    public reasoning?: string;

    /** @description The role of the author of this message. */
    // @DataMember(Name="role")
    // @ApiMember(Description="The role of the author of this message.")
    public role: string;

    /** @description Annotations for the message, when applicable, as when using the web search tool. */
    // @DataMember(Name="annotations")
    // @ApiMember(Description="Annotations for the message, when applicable, as when using the web search tool.")
    public annotations?: ChoiceAnnotation[];

    /** @description If the audio output modality is requested, this object contains data about the audio response from the model. */
    // @DataMember(Name="audio")
    // @ApiMember(Description="If the audio output modality is requested, this object contains data about the audio response from the model.")
    public audio?: ChoiceAudio;

    /** @description The tool calls generated by the model, such as function calls. */
    // @DataMember(Name="tool_calls")
    // @ApiMember(Description="The tool calls generated by the model, such as function calls.")
    public tool_calls?: ToolCall[];

    public constructor(init?: Partial<ChoiceMessage>) { (Object as any).assign(this, init); }
}

export class Choice
{
    /** @description The reason the model stopped generating tokens. This will be stop if the model hit a natural stop point or a provided stop sequence, length if the maximum number of tokens specified in the request was reached, content_filter if content was omitted due to a flag from our content filters, tool_calls if the model called a tool */
    // @DataMember(Name="finish_reason")
    // @ApiMember(Description="The reason the model stopped generating tokens. This will be stop if the model hit a natural stop point or a provided stop sequence, length if the maximum number of tokens specified in the request was reached, content_filter if content was omitted due to a flag from our content filters, tool_calls if the model called a tool")
    public finish_reason: string;

    /** @description The index of the choice in the list of choices. */
    // @DataMember(Name="index")
    // @ApiMember(Description="The index of the choice in the list of choices.")
    public index: number;

    /** @description A chat completion message generated by the model. */
    // @DataMember(Name="message")
    // @ApiMember(Description="A chat completion message generated by the model.")
    public message: ChoiceMessage;

    public constructor(init?: Partial<Choice>) { (Object as any).assign(this, init); }
}

/** @description Usage statistics for the completion request. */
// @Api(Description="Usage statistics for the completion request.")
// @DataContract
export class AiCompletionUsage
{
    /** @description When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion. */
    // @DataMember(Name="accepted_prediction_tokens")
    // @ApiMember(Description="When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion.\n\n")
    public accepted_prediction_tokens: number;

    /** @description Audio input tokens generated by the model. */
    // @DataMember(Name="audio_tokens")
    // @ApiMember(Description="Audio input tokens generated by the model.")
    public audio_tokens: number;

    /** @description Tokens generated by the model for reasoning. */
    // @DataMember(Name="reasoning_tokens")
    // @ApiMember(Description="Tokens generated by the model for reasoning.")
    public reasoning_tokens: number;

    /** @description When using Predicted Outputs, the number of tokens in the prediction that did not appear in the completion. */
    // @DataMember(Name="rejected_prediction_tokens")
    // @ApiMember(Description="When using Predicted Outputs, the number of tokens in the prediction that did not appear in the completion.")
    public rejected_prediction_tokens: number;

    public constructor(init?: Partial<AiCompletionUsage>) { (Object as any).assign(this, init); }
}

/** @description Breakdown of tokens used in the prompt. */
// @Api(Description="Breakdown of tokens used in the prompt.")
// @DataContract
export class AiPromptUsage
{
    /** @description When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion. */
    // @DataMember(Name="accepted_prediction_tokens")
    // @ApiMember(Description="When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion.\n\n")
    public accepted_prediction_tokens: number;

    /** @description Audio input tokens present in the prompt. */
    // @DataMember(Name="audio_tokens")
    // @ApiMember(Description="Audio input tokens present in the prompt.")
    public audio_tokens: number;

    /** @description Cached tokens present in the prompt. */
    // @DataMember(Name="cached_tokens")
    // @ApiMember(Description="Cached tokens present in the prompt.")
    public cached_tokens: number;

    public constructor(init?: Partial<AiPromptUsage>) { (Object as any).assign(this, init); }
}

/** @description Usage statistics for the completion request. */
// @Api(Description="Usage statistics for the completion request.")
// @DataContract
export class AiUsage
{
    /** @description Number of tokens in the generated completion. */
    // @DataMember(Name="completion_tokens")
    // @ApiMember(Description="Number of tokens in the generated completion.")
    public completion_tokens: number;

    /** @description Number of tokens in the prompt. */
    // @DataMember(Name="prompt_tokens")
    // @ApiMember(Description="Number of tokens in the prompt.")
    public prompt_tokens: number;

    /** @description Total number of tokens used in the request (prompt + completion). */
    // @DataMember(Name="total_tokens")
    // @ApiMember(Description="Total number of tokens used in the request (prompt + completion).")
    public total_tokens: number;

    /** @description Breakdown of tokens used in a completion. */
    // @DataMember(Name="completion_tokens_details")
    // @ApiMember(Description="Breakdown of tokens used in a completion.")
    public completion_tokens_details?: AiCompletionUsage;

    /** @description Breakdown of tokens used in the prompt. */
    // @DataMember(Name="prompt_tokens_details")
    // @ApiMember(Description="Breakdown of tokens used in the prompt.")
    public prompt_tokens_details?: AiPromptUsage;

    public constructor(init?: Partial<AiUsage>) { (Object as any).assign(this, init); }
}

// @DataContract
export class ResponseError
{
    // @DataMember(Order=1)
    public errorCode: string;

    // @DataMember(Order=2)
    public fieldName: string;

    // @DataMember(Order=3)
    public message: string;

    // @DataMember(Order=4)
    public meta?: { [index:string]: string; };

    public constructor(init?: Partial<ResponseError>) { (Object as any).assign(this, init); }
}

// @DataContract
export class ResponseStatus
{
    // @DataMember(Order=1)
    public errorCode: string;

    // @DataMember(Order=2)
    public message?: string;

    // @DataMember(Order=3)
    public stackTrace?: string;

    // @DataMember(Order=4)
    public errors?: ResponseError[];

    // @DataMember(Order=5)
    public meta?: { [index:string]: string; };

    public constructor(init?: Partial<ResponseStatus>) { (Object as any).assign(this, init); }
}

// @DataContract
export class QueryResponse<T>
{
    // @DataMember(Order=1)
    public offset: number;

    // @DataMember(Order=2)
    public total: number;

    // @DataMember(Order=3)
    public results: T[] = [];

    // @DataMember(Order=4)
    public meta?: { [index:string]: string; };

    // @DataMember(Order=5)
    public responseStatus?: ResponseStatus;

    public constructor(init?: Partial<QueryResponse<T>>) { (Object as any).assign(this, init); }
}

// @DataContract
export class AnalyticsLogInfo
{
    // @DataMember(Order=1)
    public id: number;

    // @DataMember(Order=2)
    public dateTime: string;

    // @DataMember(Order=3)
    public browser: string;

    // @DataMember(Order=4)
    public device: string;

    // @DataMember(Order=5)
    public bot: string;

    // @DataMember(Order=6)
    public op: string;

    // @DataMember(Order=7)
    public userId: string;

    // @DataMember(Order=8)
    public userName: string;

    // @DataMember(Order=9)
    public apiKey: string;

    // @DataMember(Order=10)
    public ip: string;

    public constructor(init?: Partial<AnalyticsLogInfo>) { (Object as any).assign(this, init); }
}

// @DataContract
export class RequestSummary
{
    // @DataMember(Order=1)
    public name: string;

    // @DataMember(Order=2)
    public totalRequests: number;

    // @DataMember(Order=3)
    public totalRequestLength: number;

    // @DataMember(Order=4)
    public minRequestLength: number;

    // @DataMember(Order=5)
    public maxRequestLength: number;

    // @DataMember(Order=6)
    public totalDuration: number;

    // @DataMember(Order=7)
    public minDuration: number;

    // @DataMember(Order=8)
    public maxDuration: number;

    // @DataMember(Order=9)
    public status: { [index:number]: number; };

    // @DataMember(Order=10)
    public durations: { [index:string]: number; };

    // @DataMember(Order=11)
    public apis: { [index:string]: number; };

    // @DataMember(Order=12)
    public users: { [index:string]: number; };

    // @DataMember(Order=13)
    public ips: { [index:string]: number; };

    // @DataMember(Order=14)
    public apiKeys: { [index:string]: number; };

    public constructor(init?: Partial<RequestSummary>) { (Object as any).assign(this, init); }
}

// @DataContract
export class AnalyticsReports
{
    // @DataMember(Order=1)
    public id: number;

    // @DataMember(Order=2)
    public created: string;

    // @DataMember(Order=3)
    public version: number;

    // @DataMember(Order=4)
    public apis: { [index:string]: RequestSummary; };

    // @DataMember(Order=5)
    public users: { [index:string]: RequestSummary; };

    // @DataMember(Order=6)
    public tags: { [index:string]: RequestSummary; };

    // @DataMember(Order=7)
    public status: { [index:string]: RequestSummary; };

    // @DataMember(Order=8)
    public days: { [index:string]: RequestSummary; };

    // @DataMember(Order=9)
    public apiKeys: { [index:string]: RequestSummary; };

    // @DataMember(Order=10)
    public ips: { [index:string]: RequestSummary; };

    // @DataMember(Order=11)
    public browsers: { [index:string]: RequestSummary; };

    // @DataMember(Order=12)
    public devices: { [index:string]: RequestSummary; };

    // @DataMember(Order=13)
    public bots: { [index:string]: RequestSummary; };

    // @DataMember(Order=14)
    public durations: { [index:string]: number; };

    public constructor(init?: Partial<AnalyticsReports>) { (Object as any).assign(this, init); }
}

/** @description Text content part */
// @DataContract
export class AiTextContent extends AiContent
{
    /** @description The text content. */
    // @DataMember(Name="text")
    // @ApiMember(Description="The text content.")
    public text: string;

    public constructor(init?: Partial<AiTextContent>) { super(init); (Object as any).assign(this, init); }
}

export class AiImageUrl
{
    /** @description Either a URL of the image or the base64 encoded image data. */
    // @DataMember(Name="url")
    // @ApiMember(Description="Either a URL of the image or the base64 encoded image data.")
    public url: string;

    public constructor(init?: Partial<AiImageUrl>) { (Object as any).assign(this, init); }
}

/** @description Image content part */
// @DataContract
export class AiImageContent extends AiContent
{
    /** @description The image for this content. */
    // @DataMember(Name="image_url")
    // @ApiMember(Description="The image for this content.")
    public image_url: AiImageUrl;

    public constructor(init?: Partial<AiImageContent>) { super(init); (Object as any).assign(this, init); }
}

/** @description Audio content part */
// @DataContract
export class AiInputAudio
{
    /** @description URL or Base64 encoded audio data. */
    // @DataMember(Name="data")
    // @ApiMember(Description="URL or Base64 encoded audio data.")
    public data: string;

    /** @description The format of the encoded audio data. Currently supports 'wav' and 'mp3'. */
    // @DataMember(Name="format")
    // @ApiMember(Description="The format of the encoded audio data. Currently supports 'wav' and 'mp3'.")
    public format: string;

    public constructor(init?: Partial<AiInputAudio>) { (Object as any).assign(this, init); }
}

/** @description Audio content part */
// @DataContract
export class AiAudioContent extends AiContent
{
    /** @description The audio input for this content. */
    // @DataMember(Name="input_audio")
    // @ApiMember(Description="The audio input for this content.")
    public input_audio: AiInputAudio;

    public constructor(init?: Partial<AiAudioContent>) { super(init); (Object as any).assign(this, init); }
}

/** @description File content part */
// @DataContract
export class AiFile
{
    /** @description The URL or base64 encoded file data, used when passing the file to the model as a string. */
    // @DataMember(Name="file_data")
    // @ApiMember(Description="The URL or base64 encoded file data, used when passing the file to the model as a string.")
    public file_data: string;

    /** @description The name of the file, used when passing the file to the model as a string. */
    // @DataMember(Name="filename")
    // @ApiMember(Description="The name of the file, used when passing the file to the model as a string.")
    public filename: string;

    /** @description The ID of an uploaded file to use as input. */
    // @DataMember(Name="file_id")
    // @ApiMember(Description="The ID of an uploaded file to use as input.")
    public file_id?: string;

    public constructor(init?: Partial<AiFile>) { (Object as any).assign(this, init); }
}

/** @description File content part */
// @DataContract
export class AiFileContent extends AiContent
{
    /** @description The file input for this content. */
    // @DataMember(Name="file")
    // @ApiMember(Description="The file input for this content.")
    public file: AiFile;

    public constructor(init?: Partial<AiFileContent>) { super(init); (Object as any).assign(this, init); }
}

export class HelloResponse
{
    public result: string;

    public constructor(init?: Partial<HelloResponse>) { (Object as any).assign(this, init); }
}

export class AdminDataResponse
{
    public pageStats: PageStats[] = [];

    public constructor(init?: Partial<AdminDataResponse>) { (Object as any).assign(this, init); }
}

// @DataContract
export class ChatResponse
{
    /** @description A unique identifier for the chat completion. */
    // @DataMember(Name="id")
    // @ApiMember(Description="A unique identifier for the chat completion.")
    public id: string;

    /** @description A list of chat completion choices. Can be more than one if n is greater than 1. */
    // @DataMember(Name="choices")
    // @ApiMember(Description="A list of chat completion choices. Can be more than one if n is greater than 1.")
    public choices: Choice[] = [];

    /** @description The Unix timestamp (in seconds) of when the chat completion was created. */
    // @DataMember(Name="created")
    // @ApiMember(Description="The Unix timestamp (in seconds) of when the chat completion was created.")
    public created: number;

    /** @description The model used for the chat completion. */
    // @DataMember(Name="model")
    // @ApiMember(Description="The model used for the chat completion.")
    public model: string;

    /** @description This fingerprint represents the backend configuration that the model runs with. */
    // @DataMember(Name="system_fingerprint")
    // @ApiMember(Description="This fingerprint represents the backend configuration that the model runs with.")
    public system_fingerprint?: string;

    /** @description The object type, which is always chat.completion. */
    // @DataMember(Name="object")
    // @ApiMember(Description="The object type, which is always chat.completion.")
    public object: string;

    /** @description Specifies the processing type used for serving the request. */
    // @DataMember(Name="service_tier")
    // @ApiMember(Description="Specifies the processing type used for serving the request.")
    public service_tier?: string;

    /** @description Usage statistics for the completion request. */
    // @DataMember(Name="usage")
    // @ApiMember(Description="Usage statistics for the completion request.")
    public usage: AiUsage;

    /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. */
    // @DataMember(Name="metadata")
    // @ApiMember(Description="Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format.")
    public metadata?: { [index:string]: string; };

    // @DataMember(Name="responseStatus")
    public responseStatus?: ResponseStatus;

    public constructor(init?: Partial<ChatResponse>) { (Object as any).assign(this, init); }
}

// @DataContract
export class AuthenticateResponse implements IHasSessionId, IHasBearerToken
{
    // @DataMember(Order=1)
    public userId: string;

    // @DataMember(Order=2)
    public sessionId: string;

    // @DataMember(Order=3)
    public userName: string;

    // @DataMember(Order=4)
    public displayName: string;

    // @DataMember(Order=5)
    public referrerUrl: string;

    // @DataMember(Order=6)
    public bearerToken: string;

    // @DataMember(Order=7)
    public refreshToken: string;

    // @DataMember(Order=8)
    public refreshTokenExpiry?: string;

    // @DataMember(Order=9)
    public profileUrl: string;

    // @DataMember(Order=10)
    public roles: string[];

    // @DataMember(Order=11)
    public permissions: string[];

    // @DataMember(Order=12)
    public authProvider: string;

    // @DataMember(Order=13)
    public responseStatus: ResponseStatus;

    // @DataMember(Order=14)
    public meta: { [index:string]: string; };

    public constructor(init?: Partial<AuthenticateResponse>) { (Object as any).assign(this, init); }
}

// @DataContract
export class IdResponse
{
    // @DataMember(Order=1)
    public id: string;

    // @DataMember(Order=2)
    public responseStatus?: ResponseStatus;

    public constructor(init?: Partial<IdResponse>) { (Object as any).assign(this, init); }
}

// @DataContract
export class GetAnalyticsInfoResponse
{
    // @DataMember(Order=1)
    public months: string[];

    // @DataMember(Order=2)
    public result: AnalyticsLogInfo;

    // @DataMember(Order=3)
    public responseStatus: ResponseStatus;

    public constructor(init?: Partial<GetAnalyticsInfoResponse>) { (Object as any).assign(this, init); }
}

// @DataContract
export class GetAnalyticsReportsResponse
{
    // @DataMember(Order=1)
    public result: AnalyticsReports;

    // @DataMember(Order=2)
    public responseStatus: ResponseStatus;

    public constructor(init?: Partial<GetAnalyticsReportsResponse>) { (Object as any).assign(this, init); }
}

// @Route("/hello/{Name}")
export class Hello implements IReturn<HelloResponse>, IGet
{
    public name?: string;

    public constructor(init?: Partial<Hello>) { (Object as any).assign(this, init); }
    public getTypeName() { return 'Hello'; }
    public getMethod() { return 'GET'; }
    public createResponse() { return new HelloResponse(); }
}

export class AdminData implements IReturn<AdminDataResponse>, IGet
{

    public constructor(init?: Partial<AdminData>) { (Object as any).assign(this, init); }
    public getTypeName() { return 'AdminData'; }
    public getMethod() { return 'GET'; }
    public createResponse() { return new AdminDataResponse(); }
}

/** @description Chat Completions API (OpenAI-Compatible) */
// @Route("/v1/chat/completions", "POST")
// @Api(Description="Chat Completions API (OpenAI-Compatible)")
// @DataContract
export class ChatCompletion implements IReturn<ChatResponse>, IPost
{
    /** @description The messages to generate chat completions for. */
    // @DataMember(Name="messages")
    // @ApiMember(Description="The messages to generate chat completions for.")
    public messages: AiMessage[] = [];

    /** @description ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API */
    // @DataMember(Name="model")
    // @ApiMember(Description="ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API")
    public model: string;

    /** @description Parameters for audio output. Required when audio output is requested with modalities: [audio] */
    // @DataMember(Name="audio")
    // @ApiMember(Description="Parameters for audio output. Required when audio output is requested with modalities: [audio]")
    public audio?: AiChatAudio;

    /** @description Modify the likelihood of specified tokens appearing in the completion. */
    // @DataMember(Name="logit_bias")
    // @ApiMember(Description="Modify the likelihood of specified tokens appearing in the completion.")
    public logit_bias?: { [index:number]: number; };

    /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. */
    // @DataMember(Name="metadata")
    // @ApiMember(Description="Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format.")
    public metadata?: { [index:string]: string; };

    /** @description Constrains effort on reasoning for reasoning models. Currently supported values are minimal, low, medium, and high (none, default). Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response. */
    // @DataMember(Name="reasoning_effort")
    // @ApiMember(Description="Constrains effort on reasoning for reasoning models. Currently supported values are minimal, low, medium, and high (none, default). Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.")
    public reasoning_effort?: string;

    /** @description An object specifying the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`. Setting Type to ResponseFormat.JsonObject enables JSON mode, which guarantees the message the model generates is valid JSON. */
    // @DataMember(Name="response_format")
    // @ApiMember(Description="An object specifying the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`. Setting Type to ResponseFormat.JsonObject enables JSON mode, which guarantees the message the model generates is valid JSON.")
    public response_format?: AiResponseFormat;

    /** @description Specifies the processing type used for serving the request. */
    // @DataMember(Name="service_tier")
    // @ApiMember(Description="Specifies the processing type used for serving the request.")
    public service_tier?: string;

    /** @description Up to 4 sequences where the API will stop generating further tokens. */
    // @DataMember(Name="stop")
    // @ApiMember(Description="Up to 4 sequences where the API will stop generating further tokens.")
    public stop?: string[];

    /** @description Output types that you would like the model to generate. Most models are capable of generating text, which is the default: */
    // @DataMember(Name="modalities")
    // @ApiMember(Description="Output types that you would like the model to generate. Most models are capable of generating text, which is the default:")
    public modalities?: string[];

    /** @description Used by OpenAI to cache responses for similar requests to optimize your cache hit rates. */
    // @DataMember(Name="prompt_cache_key")
    // @ApiMember(Description="Used by OpenAI to cache responses for similar requests to optimize your cache hit rates.")
    public prompt_cache_key?: string;

    /** @description A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies. The IDs should be a string that uniquely identifies each user. */
    // @DataMember(Name="safety_identifier")
    // @ApiMember(Description="A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies. The IDs should be a string that uniquely identifies each user.")
    public safety_identifier?: string;

    /** @description A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported. */
    // @DataMember(Name="tools")
    // @ApiMember(Description="A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.")
    public tools?: Tool[];

    /** @description Constrains the verbosity of the model's response. Lower values will result in more concise responses, while higher values will result in more verbose responses. Currently supported values are low, medium, and high. */
    // @DataMember(Name="verbosity")
    // @ApiMember(Description="Constrains the verbosity of the model's response. Lower values will result in more concise responses, while higher values will result in more verbose responses. Currently supported values are low, medium, and high.")
    public verbosity?: string;

    /** @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. */
    // @DataMember(Name="temperature")
    // @ApiMember(Description="What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.")
    public temperature?: number;

    /** @description An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens. */
    // @DataMember(Name="max_completion_tokens")
    // @ApiMember(Description="An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens.")
    public max_completion_tokens?: number;

    /** @description An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used. */
    // @DataMember(Name="top_logprobs")
    // @ApiMember(Description="An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.")
    public top_logprobs?: number;

    /** @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. */
    // @DataMember(Name="top_p")
    // @ApiMember(Description="An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.")
    public top_p?: number;

    /** @description Number between `-2.0` and `2.0`. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim. */
    // @DataMember(Name="frequency_penalty")
    // @ApiMember(Description="Number between `-2.0` and `2.0`. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.")
    public frequency_penalty?: number;

    /** @description Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics. */
    // @DataMember(Name="presence_penalty")
    // @ApiMember(Description="Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.")
    public presence_penalty?: number;

    /** @description This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend. */
    // @DataMember(Name="seed")
    // @ApiMember(Description="This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.")
    public seed?: number;

    /** @description How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs. */
    // @DataMember(Name="n")
    // @ApiMember(Description="How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.")
    public n?: number;

    /** @description Whether or not to store the output of this chat completion request for use in our model distillation or evals products. */
    // @DataMember(Name="store")
    // @ApiMember(Description="Whether or not to store the output of this chat completion request for use in our model distillation or evals products.")
    public store?: boolean;

    /** @description Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message. */
    // @DataMember(Name="logprobs")
    // @ApiMember(Description="Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.")
    public logprobs?: boolean;

    /** @description Whether to enable parallel function calling during tool use. */
    // @DataMember(Name="parallel_tool_calls")
    // @ApiMember(Description="Whether to enable parallel function calling during tool use.")
    public parallel_tool_calls?: boolean;

    /** @description Whether to enable thinking mode for some Qwen models and providers. */
    // @DataMember(Name="enable_thinking")
    // @ApiMember(Description="Whether to enable thinking mode for some Qwen models and providers.")
    public enable_thinking?: boolean;

    /** @description If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message. */
    // @DataMember(Name="stream")
    // @ApiMember(Description="If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.")
    public stream?: boolean;

    public constructor(init?: Partial<ChatCompletion>) { (Object as any).assign(this, init); }
    public getTypeName() { return 'ChatCompletion'; }
    public getMethod() { return 'POST'; }
    public createResponse() { return new ChatResponse(); }
}

/** @description Sign In */
// @Route("/auth", "GET,POST")
// @Route("/auth/{provider}", "POST")
// @Api(Description="Sign In")
// @DataContract
export class Authenticate implements IReturn<AuthenticateResponse>, IPost
{
    /** @description AuthProvider, e.g. credentials */
    // @DataMember(Order=1)
    public provider: string;

    // @DataMember(Order=2)
    public userName: string;

    // @DataMember(Order=3)
    public password: string;

    // @DataMember(Order=4)
    public rememberMe?: boolean;

    // @DataMember(Order=5)
    public accessToken: string;

    // @DataMember(Order=6)
    public accessTokenSecret: string;

    // @DataMember(Order=7)
    public returnUrl: string;

    // @DataMember(Order=8)
    public errorView: string;

    // @DataMember(Order=9)
    public meta: { [index:string]: string; };

    public constructor(init?: Partial<Authenticate>) { (Object as any).assign(this, init); }
    public getTypeName() { return 'Authenticate'; }
    public getMethod() { return 'POST'; }
    public createResponse() { return new AuthenticateResponse(); }
}

/** @description Find Bookings */
// @Route("/bookings", "GET")
// @Route("/bookings/{Id}", "GET")
export class QueryBookings extends QueryDb<Booking> implements IReturn<QueryResponse<Booking>>
{
    public id?: number;

    public constructor(init?: Partial<QueryBookings>) { super(init); (Object as any).assign(this, init); }
    public getTypeName() { return 'QueryBookings'; }
    public getMethod() { return 'GET'; }
    public createResponse() { return new QueryResponse<Booking>(); }
}

/** @description Find Coupons */
// @Route("/coupons", "GET")
export class QueryCoupons extends QueryDb<Coupon> implements IReturn<QueryResponse<Coupon>>
{
    public id: string;

    public constructor(init?: Partial<QueryCoupons>) { super(init); (Object as any).assign(this, init); }
    public getTypeName() { return 'QueryCoupons'; }
    public getMethod() { return 'GET'; }
    public createResponse() { return new QueryResponse<Coupon>(); }
}

// @ValidateRequest(Validator="IsAdmin")
export class QueryUsers extends QueryDb<User> implements IReturn<QueryResponse<User>>
{
    public id?: string;

    public constructor(init?: Partial<QueryUsers>) { super(init); (Object as any).assign(this, init); }
    public getTypeName() { return 'QueryUsers'; }
    public getMethod() { return 'GET'; }
    public createResponse() { return new QueryResponse<User>(); }
}

/** @description Create a new Booking */
// @Route("/bookings", "POST")
// @ValidateRequest(Validator="HasRole(`Employee`)")
export class CreateBooking implements IReturn<IdResponse>, ICreateDb<Booking>
{
    /** @description Name this Booking is for */
    // @Validate(Validator="NotEmpty")
    public name: string;

    public roomType: RoomType;
    // @Validate(Validator="GreaterThan(0)")
    public roomNumber: number;

    // @Validate(Validator="GreaterThan(0)")
    public cost: number;

    // @Required()
    public bookingStartDate: string;

    public bookingEndDate?: string;
    public notes?: string;
    public couponId?: string;

    public constructor(init?: Partial<CreateBooking>) { (Object as any).assign(this, init); }
    public getTypeName() { return 'CreateBooking'; }
    public getMethod() { return 'POST'; }
    public createResponse() { return new IdResponse(); }
}

/** @description Update an existing Booking */
// @Route("/booking/{Id}", "PATCH")
// @ValidateRequest(Validator="HasRole(`Employee`)")
export class UpdateBooking implements IReturn<IdResponse>, IPatchDb<Booking>
{
    public id: number;
    public name?: string;
    public roomType?: RoomType;
    // @Validate(Validator="GreaterThan(0)")
    public roomNumber?: number;

    // @Validate(Validator="GreaterThan(0)")
    public cost?: number;

    public bookingStartDate?: string;
    public bookingEndDate?: string;
    public notes?: string;
    public couponId?: string;
    public cancelled?: boolean;

    public constructor(init?: Partial<UpdateBooking>) { (Object as any).assign(this, init); }
    public getTypeName() { return 'UpdateBooking'; }
    public getMethod() { return 'PATCH'; }
    public createResponse() { return new IdResponse(); }
}

/** @description Delete a Booking */
// @Route("/booking/{Id}", "DELETE")
// @ValidateRequest(Validator="HasRole(`Manager`)")
export class DeleteBooking implements IReturnVoid, IDeleteDb<Booking>
{
    public id: number;

    public constructor(init?: Partial<DeleteBooking>) { (Object as any).assign(this, init); }
    public getTypeName() { return 'DeleteBooking'; }
    public getMethod() { return 'DELETE'; }
    public createResponse() {}
}

// @Route("/coupons", "POST")
// @ValidateRequest(Validator="HasRole(`Employee`)")
export class CreateCoupon implements IReturn<IdResponse>, ICreateDb<Coupon>
{
    // @Validate(Validator="NotEmpty")
    public id: string;

    // @Validate(Validator="NotEmpty")
    public description: string;

    // @Validate(Validator="GreaterThan(0)")
    public discount: number;

    // @Validate(Validator="NotNull")
    public expiryDate: string;

    public constructor(init?: Partial<CreateCoupon>) { (Object as any).assign(this, init); }
    public getTypeName() { return 'CreateCoupon'; }
    public getMethod() { return 'POST'; }
    public createResponse() { return new IdResponse(); }
}

// @Route("/coupons/{Id}", "PATCH")
// @ValidateRequest(Validator="HasRole(`Employee`)")
export class UpdateCoupon implements IReturn<IdResponse>, IPatchDb<Coupon>
{
    public id: string;
    // @Validate(Validator="NotEmpty")
    public description: string;

    // @Validate(Validator="NotNull")
    // @Validate(Validator="GreaterThan(0)")
    public discount: number;

    // @Validate(Validator="NotNull")
    public expiryDate: string;

    public constructor(init?: Partial<UpdateCoupon>) { (Object as any).assign(this, init); }
    public getTypeName() { return 'UpdateCoupon'; }
    public getMethod() { return 'PATCH'; }
    public createResponse() { return new IdResponse(); }
}

/** @description Delete a Coupon */
// @Route("/coupons/{Id}", "DELETE")
// @ValidateRequest(Validator="HasRole(`Manager`)")
export class DeleteCoupon implements IReturnVoid, IDeleteDb<Coupon>
{
    public id: string;

    public constructor(init?: Partial<DeleteCoupon>) { (Object as any).assign(this, init); }
    public getTypeName() { return 'DeleteCoupon'; }
    public getMethod() { return 'DELETE'; }
    public createResponse() {}
}

// @DataContract
export class GetAnalyticsInfo implements IReturn<GetAnalyticsInfoResponse>, IGet
{
    // @DataMember(Order=1)
    public month?: string;

    // @DataMember(Order=2)
    public type: string;

    // @DataMember(Order=3)
    public op: string;

    // @DataMember(Order=4)
    public apiKey: string;

    // @DataMember(Order=5)
    public userId: string;

    // @DataMember(Order=6)
    public ip: string;

    public constructor(init?: Partial<GetAnalyticsInfo>) { (Object as any).assign(this, init); }
    public getTypeName() { return 'GetAnalyticsInfo'; }
    public getMethod() { return 'GET'; }
    public createResponse() { return new GetAnalyticsInfoResponse(); }
}

// @DataContract
export class GetAnalyticsReports implements IReturn<GetAnalyticsReportsResponse>, IGet
{
    // @DataMember(Order=1)
    public month?: string;

    // @DataMember(Order=2)
    public filter: string;

    // @DataMember(Order=3)
    public value: string;

    // @DataMember(Order=4)
    public force?: boolean;

    public constructor(init?: Partial<GetAnalyticsReports>) { (Object as any).assign(this, init); }
    public getTypeName() { return 'GetAnalyticsReports'; }
    public getMethod() { return 'GET'; }
    public createResponse() { return new GetAnalyticsReportsResponse(); }
}

